
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000944c  000094e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000944c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030f  0080014a  0080014a  0000952a  2**0
                  ALLOC
  3 .debug_aranges 000007e0  00000000  00000000  0000952a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001546  00000000  00000000  00009d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b01a  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002cfc  00000000  00000000  0001626a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000880a  00000000  00000000  00018f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ca0  00000000  00000000  00021770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000040b8  00000000  00000000  00022410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000526e  00000000  00000000  000264c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e0  00000000  00000000  0002b736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	/* Redirect all standard streams to UART1 */
//	stdout = &uout;
//	stderr = &uout;
//	stdin = &uin;
}
       0:	0c 94 91 30 	jmp	0x6122	; 0x6122 <__ctors_end>
   key repeat functionality kicks in. After a small setup delay
   the key is reported being pressed in subsequent calls
   to this function. This simulates the user repeatedly
   pressing and releasing the key.
*/
uint8_t get_switch_rpt( uint8_t switch_mask ) {
       4:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
    TIMSK0 = _BV(TOIE0); /* enable overflow interrupt for T0, DS p.113  */
    TCNT0 = 0;
    OCR0A = 255;  /* LED full brightness */
}

void os_led_brightness(uint8_t level) {
       8:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
{
    /* Configure Timer 2 Fast PWM Mode 3 */
    TCCR2A = _BV(COM2A1) | _BV(WGM21) | _BV(WGM20);
    TCCR2B = _BV(CS20);
    OCR2A = i;
}
       c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
      10:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
      14:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
      18:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      1c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      20:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      24:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      28:	0c 94 fe 3c 	jmp	0x79fc	; 0x79fc <__vector_10>
      2c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      30:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      34:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      38:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      3c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      40:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      44:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      48:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      4c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      50:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      54:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      58:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      5c:	0c 94 84 32 	jmp	0x6508	; 0x6508 <__vector_23>
      60:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      64:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      68:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      6c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      70:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      74:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      78:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      7c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      80:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      84:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      88:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      8c:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      90:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>
      94:	0c 94 af 30 	jmp	0x615e	; 0x615e <__bad_interrupt>

00000098 <JoystickReport>:
      98:	05 01 09 04 a1 01 a1 00 05 09 19 01 29 0a 95 0a     ............)...
      a8:	75 01 81 02 95 01 75 06 81 03 c0 a1 00 95 40 75     u.....u.......@u
      b8:	08 09 01 91 02 c0 c0                                .......

000000bf <DeviceDescriptor>:
      bf:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
      cf:	dc 01                                               ..

000000d1 <ConfigurationDescriptor>:
      d1:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      e1:	00 00 09 21 11 01 00 01 22 27 00 07 05 81 03 08     ...!...."'......
      f1:	00 05                                               ..

000000f3 <LanguageString>:
      f3:	04 03 09 04                                         ....

000000f7 <ManufacturerString>:
      f7:	1a 03 52 00 75 00 70 00 65 00 72 00 74 00 20 00     ..R.u.p.e.r.t. .
     107:	53 00 6d 00 69 00 74 00 68 00 00 00                 S.m.i.t.h...

00000113 <ProductString>:
     113:	38 03 41 00 73 00 73 00 65 00 74 00 74 00 6f 00     8.A.s.s.e.t.t.o.
     123:	20 00 43 00 6f 00 72 00 73 00 61 00 20 00 52 00      .C.o.r.s.a. .R.
     133:	61 00 63 00 65 00 2d 00 63 00 6f 00 6d 00 70 00     a.c.e.-.c.o.m.p.
     143:	75 00 74 00 65 00 72 00 00 00                       u.t.e.r...

0000014d <font5x7>:
     14d:	00 00 00 00 00 00 00 5f 00 00 00 03 00 03 00 14     ......._........
     15d:	3e 14 3e 14 24 2a 7f 2a 12 43 33 08 66 61 36 49     >.>.$*.*.C3.fa6I
     16d:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     17d:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     18d:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     19d:	3e 51 49 45 3e 00 04 02 7f 00 42 61 51 49 46 22     >QIE>.....BaQIF"
     1ad:	41 49 49 36 18 14 12 7f 10 27 45 45 45 39 3e 49     AII6.....'EEE9>I
     1bd:	49 49 32 01 01 71 09 07 36 49 49 49 36 26 49 49     II2..q..6III6&II
     1cd:	49 3e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     I>.66...V6...."A
     1dd:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     1ed:	3e 41 59 55 5e 7e 09 09 09 7e 7f 49 49 49 36 3e     >AYU^~...~.III6>
     1fd:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     20d:	09 09 01 3e 41 41 49 3a 7f 08 08 08 7f 00 41 7f     ...>AAI:......A.
     21d:	41 00 30 40 40 40 3f 7f 08 14 22 41 7f 40 40 40     A.0@@@?..."A.@@@
     22d:	40 7f 02 0c 02 7f 7f 02 04 08 7f 3e 41 41 41 3e     @..........>AAA>
     23d:	7f 09 09 09 06 1e 21 21 21 5e 7f 09 09 09 76 26     ......!!!^....v&
     24d:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     25d:	40 20 1f 7f 20 10 20 7f 41 22 1c 22 41 07 08 70     @ .. . .A"."A..p
     26d:	08 07 61 51 49 45 43 00 7f 41 00 00 02 04 08 10     ..aQIEC..A......
     27d:	20 00 00 41 7f 00 04 02 01 02 04 40 40 40 40 40      ..A.......@@@@@
     28d:	00 01 02 04 00 20 54 54 54 78 7f 44 44 44 38 38     ..... TTTx.DDD88
     29d:	44 44 44 44 38 44 44 44 7f 38 54 54 54 18 04 04     DDDD8DDD.8TTT...
     2ad:	7e 05 05 08 54 54 54 3c 7f 08 04 04 78 00 44 7d     ~...TTT<....x.D}
     2bd:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     2cd:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2dd:	7c 14 14 14 08 08 14 14 14 7c 00 7c 08 04 04 48     |........|.|...H
     2ed:	54 54 54 20 04 04 3f 44 44 3c 40 40 20 7c 1c 20     TTT ..?DD<@@ |. 
     2fd:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     30d:	50 3c 44 64 54 4c 44 00 08 36 41 41 00 00 7f 00     P<DdTLD..6AA....
     31d:	00 41 41 36 08 00 02 01 02 04 02                    .AA6.......

00000328 <Unispace7x14>:
     328:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
     338:	00 00 00 00 fc 04 fc 04 00 00 00 00 00 00 05 00     ................
     348:	00 1c 00 1c 00 00 00 1c 00 00 00 00 00 06 00 00     ................
     358:	20 01 fc 07 20 01 fc 07 20 01 00 00 06 30 00 78      ... ... ....0.x
     368:	02 48 02 fc 07 48 02 c8 03 00 00 06 3c 00 24 00     .H...H......<.$.
     378:	3c 07 f0 00 8c 07 80 07 00 00 06 00 01 fc 07 44     <..............D
     388:	04 44 04 c4 07 40 04 00 00 04 00 00 00 00 00 00     .D...@..........
     398:	1c 00 00 00 00 00 00 00 05 00 00 00 00 fe 3f 01     ..............?.
     3a8:	20 01 20 00 00 00 00 05 00 00 00 00 01 20 03 20      . .......... . 
     3b8:	fe 1f 00 00 00 00 06 00 00 38 00 5c 00 3c 00 74     .........8.\.<.t
     3c8:	00 18 00 00 00 06 00 00 40 00 40 00 f0 01 40 00     ........@.@...@.
     3d8:	40 00 00 00 04 00 00 00 00 00 1c 00 1c 00 00 00     @...............
     3e8:	00 00 00 06 00 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
     3f8:	00 00 04 00 00 00 00 00 04 00 04 00 00 00 00 00     ................
     408:	00 06 00 04 00 06 80 01 60 00 18 00 0c 00 00 00     ........`.......
     418:	06 f0 01 fc 07 84 07 f4 04 1c 04 fc 07 00 00 06     ................
     428:	00 00 04 04 04 04 fc 07 00 04 00 04 00 00 06 00     ................
     438:	07 c4 07 44 04 44 04 6c 04 7c 04 00 00 06 04 04     ...D.D.l.|......
     448:	04 04 44 04 44 04 fc 06 b8 07 00 00 06 00 01 c0     ..D.D...........
     458:	01 30 01 0c 01 fc 07 00 01 00 00 06 3c 04 3c 04     .0..........<.<.
     468:	24 04 24 04 64 06 e4 03 00 00 06 f0 01 fc 07 44     $.$.d..........D
     478:	04 44 04 44 04 c0 07 00 00 06 04 00 04 04 04 07     .D.D............
     488:	e4 01 7c 00 0c 00 00 00 06 00 01 fc 07 44 04 44     ..|..........D.D
     498:	04 cc 06 fc 07 00 00 06 38 00 7c 04 44 04 44 04     ........8.|.D.D.
     4a8:	4c 06 fc 07 00 00 04 00 00 00 00 40 04 40 04 00     L..........@.@..
     4b8:	00 00 00 00 00 04 00 00 00 00 40 1c 40 1c 00 00     ..........@.@...
     4c8:	00 00 00 00 05 00 00 40 00 60 00 b0 00 18 03 00     .......@.`......
     4d8:	00 00 00 06 00 00 a0 00 a0 00 a0 00 a0 00 a0 00     ................
     4e8:	00 00 05 00 00 08 03 90 01 a0 00 40 00 00 00 00     ...........@....
     4f8:	00 06 00 00 04 00 c4 05 44 04 6c 00 78 00 00 00     ........D.l.x...
     508:	06 e0 0f f0 1f 90 13 50 12 d0 13 f0 13 00 00 06     .......P........
     518:	00 04 c0 07 fc 01 0c 01 fc 03 80 07 00 00 06 fc     ................
     528:	07 fc 07 44 04 44 04 fc 06 b8 07 00 00 06 00 00     ...D.D..........
     538:	fc 07 0c 06 04 04 04 04 04 04 00 00 06 00 00 fc     ................
     548:	07 04 04 04 04 0c 06 fc 07 00 00 06 00 00 fc 07     ................
     558:	44 04 44 04 44 04 04 04 00 00 06 00 00 fc 07 44     D.D.D..........D
     568:	00 44 00 44 00 04 00 00 00 06 00 00 fc 07 04 04     .D.D............
     578:	44 04 44 04 c4 07 00 00 06 fc 07 fc 07 40 00 40     D.D..........@.@
     588:	00 40 00 fc 07 00 00 06 00 00 04 04 04 04 fc 07     .@..............
     598:	04 04 04 04 00 00 06 00 00 00 04 04 04 04 04 fc     ................
     5a8:	07 fc 03 00 00 06 fc 07 fc 07 60 00 f0 01 1c 07     ..........`.....
     5b8:	04 06 00 00 06 00 00 fc 07 00 04 00 04 00 04 00     ................
     5c8:	04 00 00 06 fc 07 fc 07 f0 03 00 07 fc 00 fc 07     ................
     5d8:	00 00 06 fc 07 fc 07 78 00 e0 01 00 07 fc 07 00     .......x........
     5e8:	00 06 f0 01 fc 07 04 04 04 04 0c 06 fc 07 00 00     ................
     5f8:	06 fc 07 fc 07 44 00 44 00 6c 00 7c 00 00 00 06     .....D.D.l.|....
     608:	f0 01 fc 07 04 04 04 0c 0c 0e fc 07 00 00 06 00     ................
     618:	00 fc 07 44 00 44 00 ec 00 bc 07 00 00 06 10 00     ...D.D..........
     628:	7c 04 44 04 44 04 c4 06 c4 07 00 00 06 00 00 04     |.D.D...........
     638:	00 04 00 fc 07 04 00 04 00 00 00 06 fc 01 fc 07     ................
     648:	00 04 00 04 00 06 fc 07 00 00 06 04 00 7c 00 e0     .............|..
     658:	07 00 06 f0 03 3c 00 00 00 07 3c 00 fc 07 80 07     .....<....<.....
     668:	f0 01 00 06 fc 07 04 00 06 04 04 0c 07 f8 03 e0     ................
     678:	00 b8 07 0c 06 00 00 06 04 00 1c 00 f8 07 c0 07     ................
     688:	7c 00 0c 00 00 00 06 00 00 04 07 84 07 e4 04 3c     |..............<
     698:	04 0c 04 00 00 05 00 00 00 00 ff 3f 01 20 01 20     ...........?. . 
     6a8:	00 00 00 00 06 04 00 0c 00 30 00 c0 00 00 03 00     .........0......
     6b8:	06 00 00 05 00 00 00 00 01 20 01 20 ff 3f 00 00     ......... . .?..
     6c8:	00 00 07 20 00 10 00 08 00 0c 00 10 00 20 00 20     ... ......... . 
     6d8:	00 07 00 20 00 20 00 20 00 20 00 20 00 20 00 20     ... . . . . . . 
     6e8:	05 00 00 04 00 08 00 08 00 08 00 00 00 00 00 06     ................
     6f8:	00 03 90 07 90 04 90 04 90 04 f0 07 00 00 06 fc     ................
     708:	07 fc 07 10 04 10 04 30 06 f0 07 00 00 06 00 00     .......0........
     718:	f0 07 10 04 10 04 10 04 10 04 00 00 06 00 00 f0     ................
     728:	07 10 04 10 04 fc 07 fc 07 00 00 06 c0 01 f0 07     ................
     738:	90 04 90 04 90 04 f0 04 00 00 06 00 00 10 00 f8     ................
     748:	07 fc 07 14 00 04 00 00 00 06 c0 01 f0 07 10 24     ...............$
     758:	10 24 10 34 f0 3f 00 00 06 fc 07 fc 07 10 00 10     .$.4.?..........
     768:	00 30 00 f0 07 00 00 06 00 00 10 04 14 04 f4 07     .0..............
     778:	00 04 00 04 00 00 06 00 00 10 20 10 20 10 20 f4     .......... . . .
     788:	3f 04 00 00 00 06 fc 07 fc 07 80 01 60 03 30 06     ?...........`.0.
     798:	10 04 00 00 06 00 00 04 04 fc 07 fc 07 00 04 00     ................
     7a8:	04 00 00 06 f0 07 f0 07 10 00 f0 07 10 00 f0 07     ................
     7b8:	00 00 06 f0 07 f0 07 10 00 10 00 30 00 f0 07 00     ...........0....
     7c8:	00 06 e0 03 f0 07 10 04 10 04 10 04 f0 07 00 00     ................
     7d8:	06 f0 3f f0 3f 10 04 10 04 10 04 f0 07 00 00 06     ..?.?...........
     7e8:	00 00 f0 07 10 04 10 04 10 04 f0 3f 00 00 06 00     ...........?....
     7f8:	00 f0 07 10 00 10 00 10 00 10 00 00 00 06 60 00     ..............`.
     808:	f0 04 90 04 90 04 90 04 90 07 00 00 06 00 00 10     ................
     818:	00 fc 07 fc 07 10 04 10 00 00 00 06 f0 01 f0 07     ................
     828:	00 04 00 04 00 04 f0 07 00 00 07 10 00 f0 00 c0     ................
     838:	07 00 06 e0 07 70 00 10 00 07 70 00 f0 07 80 07     .....p....p.....
     848:	c0 01 00 06 f0 07 10 00 06 10 04 30 06 e0 03 c0     ...........0....
     858:	01 60 07 10 06 00 00 07 10 00 f0 00 e0 37 00 1e     .`...........7..
     868:	c0 03 70 00 10 00 06 00 00 10 06 90 07 d0 05 70     ..p............p
     878:	04 30 04 00 00 06 00 00 80 00 fc 1f 3f 3f 01 20     .0..........??. 
     888:	01 20 00 00 04 00 00 00 00 00 00 ff 3f 00 00 00     . ..........?...
     898:	00 00 00 06 00 00 01 20 03 20 fe 1f c0 00 80 00     ....... . ......
     8a8:	00 00 06 00 00 60 00 20 00 60 00 40 00 20 00 00     .....`. .`.@. ..
     8b8:	00 04 f8 07 f8 07 f8 07 f8 07 00 00 00 00 00 00     ................

000008c8 <Unispace29x58>:
     8c8:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     908:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     918:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     928:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     938:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     948:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     958:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     968:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     978:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     988:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     998:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9a8:	00 00 00 00 00 00 00 00 00 13 00 00 00 00 00 00     ................
     9b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9f8:	00 00 00 00 00 00 00 00 00 00 80 ff ff ff 0f 3f     ...............?
     a08:	00 00 80 ff ff ff 0f 3f 00 00 80 ff ff ff 0f 3f     .......?.......?
     a18:	00 00 80 ff ff ff 0f 3f 00 00 80 ff ff ff 0f 3f     .......?.......?
     a28:	00 00 80 ff ff ff 0f 3f 00 00 80 ff ff ff 0f 3f     .......?.......?
     a38:	00 00 80 ff ff ff 0f 3f 00 00 80 ff ff ff 0f 3f     .......?.......?
     a48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a68:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a78:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a98:	00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aa8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ab8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac8:	00 00 00 e0 ff 07 00 00 00 00 00 e0 ff 07 00 00     ................
     ad8:	00 00 00 e0 ff 07 00 00 00 00 00 e0 ff 07 00 00     ................
     ae8:	00 00 00 e0 ff 07 00 00 00 00 00 e0 ff 07 00 00     ................
     af8:	00 00 00 e0 ff 07 00 00 00 00 00 00 00 00 00 00     ................
     b08:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b18:	00 00 00 00 00 00 00 00 00 00 00 e0 ff 07 00 00     ................
     b28:	00 00 00 e0 ff 07 00 00 00 00 00 e0 ff 07 00 00     ................
     b38:	00 00 00 e0 ff 07 00 00 00 00 00 e0 ff 07 00 00     ................
     b48:	00 00 00 e0 ff 07 00 00 00 00 00 00 00 00 00 00     ................
     b58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b68:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b78:	00 00 00 00 00 00 00 00 00 00 00 1a 00 00 00 00     ................
     b88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b98:	00 00 00 00 00 00 78 00 0f 00 00 00 00 00 78 00     ......x.......x.
     ba8:	0f 00 00 00 00 00 78 00 0f 00 00 00 00 00 78 00     ......x.......x.
     bb8:	0f 00 00 00 00 00 78 00 0f 00 00 00 80 ff ff ff     ......x.........
     bc8:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff     .?.......?......
     bd8:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00 78 00     .?.......?....x.
     be8:	0f 00 00 00 00 00 78 00 0f 00 00 00 00 00 78 00     ......x.......x.
     bf8:	0f 00 00 00 00 00 78 00 0f 00 00 00 00 00 78 00     ......x.......x.
     c08:	0f 00 00 00 00 00 78 00 0f 00 00 00 80 ff ff ff     ......x.........
     c18:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff     .?.......?......
     c28:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00 78 00     .?.......?....x.
     c38:	0f 00 00 00 00 00 78 00 0f 00 00 00 00 00 78 00     ......x.......x.
     c48:	0f 00 00 00 00 00 78 00 0f 00 00 00 00 00 00 00     ......x.........
     c58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c68:	00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 3c     ...............<
     c78:	00 00 00 00 00 00 80 ff 01 00 07 00 00 00 c0 ff     ................
     c88:	07 00 07 00 00 00 e0 ff 0f 00 07 00 00 00 f0 ff     ................
     c98:	1f 00 07 00 00 00 f0 ff 1f 00 07 00 00 00 f0 ff     ................
     ca8:	1f 00 07 00 00 00 f0 80 1f 00 07 00 00 00 70 00     ..............p.
     cb8:	1f 00 07 00 00 00 70 00 1f 00 07 00 00 00 70 00     ......p.......p.
     cc8:	1f 00 07 00 00 00 70 00 1f 00 07 00 00 80 ff ff     ......p.........
     cd8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
     ce8:	ff ff 3f 00 00 00 70 00 1f 00 07 00 00 00 70 00     ..?...p.......p.
     cf8:	1f 00 07 00 00 00 70 00 1f 00 07 00 00 00 70 00     ......p.......p.
     d08:	1f 00 07 00 00 00 70 00 3f 80 07 00 00 00 70 00     ......p.?.....p.
     d18:	ff c0 07 00 00 00 70 00 ff ff 07 00 00 00 70 00     ......p.......p.
     d28:	ff ff 07 00 00 00 70 00 fe ff 07 00 00 00 70 00     ......p.......p.
     d38:	fe ff 03 00 00 00 00 00 f8 ff 01 00 00 00 00 00     ................
     d48:	e0 3f 00 00 00 00 00 00 00 00 00 00 00 1c 00 00     .?..............
     d58:	00 00 00 00 00 00 00 fc 1f 00 00 00 00 00 00 ff     ................
     d68:	7f 00 00 00 00 00 80 ff ff 00 00 00 00 00 80 ff     ................
     d78:	ff 00 00 00 00 00 80 07 f0 00 00 00 00 00 80 03     ................
     d88:	e0 00 00 00 00 00 80 03 e0 00 00 20 00 00 80 03     ........... ....
     d98:	e0 00 00 3c 00 00 80 ff ff 00 c0 3f 00 00 80 ff     ...<.......?....
     da8:	ff 00 f8 3f 00 00 80 ff ff 80 ff 0f 00 00 00 fe     ...?............
     db8:	3f f0 ff 01 00 00 00 00 00 fe 3f 00 00 00 00 00     ?.........?.....
     dc8:	e0 ff 03 00 00 00 00 00 fc 7f 00 00 00 00 00 c0     ................
     dd8:	ff 87 ff 0f 00 00 00 f8 ff c0 ff 1f 00 00 00 ff     ................
     de8:	0f e0 ff 3f 00 00 80 ff 01 e0 ff 3f 00 00 80 3f     ...?.......?...?
     df8:	00 e0 00 38 00 00 80 03 00 e0 00 38 00 00 00 00     ...8.......8....
     e08:	00 e0 00 38 00 00 00 00 00 e0 00 38 00 00 00 00     ...8.......8....
     e18:	00 e0 ff 3f 00 00 00 00 00 e0 ff 3f 00 00 00 00     ...?.......?....
     e28:	00 c0 ff 1f 00 00 00 00 00 80 ff 0f 00 00 00 00     ................
     e38:	00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00     ................
     e48:	00 00 00 00 00 00 00 00 00 01 80 3f 00 00 00 00     ...........?....
     e58:	f8 1f f0 ff 01 00 00 00 fc 7f fc ff 07 00 00 00     ................
     e68:	fe ff fe ff 0f 00 00 00 ff ff ff ff 1f 00 00 80     ................
     e78:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
     e88:	ff fc ff f0 3f 00 00 80 1f e0 0f 00 3f 00 00 80     ....?.......?...
     e98:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
     ea8:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
     eb8:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
     ec8:	0f c0 ff ff 3f 00 00 80 0f c0 ff ff 3f 00 00 80     ....?.......?...
     ed8:	0f c0 ff ff 3f 00 00 80 0f c0 ff ff 3f 00 00 00     ....?.......?...
     ee8:	00 c0 ff ff 3f 00 00 00 00 c0 07 00 3e 00 00 00     ....?.......>...
     ef8:	00 c0 07 00 3e 00 00 00 00 c0 07 00 3e 00 00 00     ....>.......>...
     f08:	00 c0 07 00 3e 00 00 00 00 c0 07 00 3e 00 00 00     ....>.......>...
     f18:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 12     ................
     f28:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f68:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f78:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f88:	e0 ff 07 00 00 00 00 00 e0 ff 07 00 00 00 00 00     ................
     f98:	e0 ff 07 00 00 00 00 00 e0 ff 07 00 00 00 00 00     ................
     fa8:	e0 ff 07 00 00 00 00 00 e0 ff 07 00 00 00 00 00     ................
     fb8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fc8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fd8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fe8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ff8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1008:	00 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00     ................
    1018:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1028:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1038:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1048:	00 80 ff ff ff ff ff 0f 00 e0 ff ff ff ff ff 3f     ...............?
    1058:	00 f0 ff ff ff ff ff 7f 00 f8 ff ff ff ff ff ff     ................
    1068:	00 fc ff ff ff ff ff ff 00 fe ff ff ff ff ff ff     ................
    1078:	01 fe 01 00 00 00 00 fc 01 7e 00 00 00 00 00 f0     .........~......
    1088:	01 3f 00 00 00 00 00 e0 03 1f 00 00 00 00 00 e0     .?..............
    1098:	03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00 e0     ................
    10a8:	03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00 e0     ................
    10b8:	03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00 e0     ................
    10c8:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10f8:	00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1108:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1118:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1128:	00 00 00 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    1138:	e0 03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00     ................
    1148:	e0 03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00     ................
    1158:	e0 03 1f 00 00 00 00 00 e0 03 1f 00 00 00 00 00     ................
    1168:	e0 03 3f 00 00 00 00 00 f0 03 fe 00 00 00 00 00     ..?.............
    1178:	f8 01 fe ff ff ff ff ff ff 01 fc ff ff ff ff ff     ................
    1188:	ff 00 fc ff ff ff ff ff ff 00 f8 ff ff ff ff ff     ................
    1198:	7f 00 f0 ff ff ff ff ff 3f 00 c0 ff ff ff ff ff     ........?.......
    11a8:	1f 00 00 fe ff ff ff ff 03 00 00 00 00 00 00 00     ................
    11b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    11c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    11d8:	00 00 00 00 00 00 00 00 00 00 19 00 00 00 00 00     ................
    11e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    11f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00     ................
    1208:	00 00 00 00 00 7e 00 00 00 00 00 00 18 3e 00 00     .....~.......>..
    1218:	00 00 00 00 3c 3e 00 00 00 00 00 00 7e 3e 00 00     ....<>......~>..
    1228:	00 00 00 00 ff 1f 04 00 00 00 00 00 fc 9f 07 00     ................
    1238:	00 00 00 00 f8 ff 07 00 00 00 00 00 f0 ff 07 00     ................
    1248:	00 00 00 00 e0 ff 0f 00 00 00 00 00 ff ff 0f 00     ................
    1258:	00 00 00 80 ff ff 00 00 00 00 00 80 ff 7f 00 00     ................
    1268:	00 00 00 00 ff ff 00 00 00 00 00 00 cf ff 01 00     ................
    1278:	00 00 00 00 c3 ff 07 00 00 00 00 00 e0 f3 03 00     ................
    1288:	00 00 00 00 e0 e3 01 00 00 00 00 00 e0 c3 00 00     ................
    1298:	00 00 00 00 f0 43 00 00 00 00 00 00 80 03 00 00     .....C..........
    12a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12c8:	00 00 00 19 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    12e8:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    12f8:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1308:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1318:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1328:	00 00 00 00 00 80 ff ff 0f 00 00 00 00 80 ff ff     ................
    1338:	0f 00 00 00 00 80 ff ff 0f 00 00 00 00 80 ff ff     ................
    1348:	0f 00 00 00 00 80 ff ff 0f 00 00 00 00 00 80 0f     ................
    1358:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1368:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1378:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    1388:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 00 00     ................
    1398:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13a8:	00 00 00 00 00 00 00 00 00 00 00 00 13 00 00 00     ................
    13b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1408:	00 00 ff 7f 00 00 00 00 00 00 ff 7f 00 00 00 00     ................
    1418:	00 00 ff 7f 00 00 00 00 00 00 ff 7f 00 00 00 00     ................
    1428:	00 00 ff 7f 00 00 00 00 00 00 ff 7f 00 00 00 00     ................
    1438:	00 00 ff 7f 00 00 00 00 00 00 ff 07 00 00 00 00     ................
    1448:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1458:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1468:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1478:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1488:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1498:	00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     ................
    14a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14b8:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    14c8:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    14d8:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    14e8:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    14f8:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1508:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1518:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1528:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1538:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1548:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1558:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1568:	00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    1578:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 13 00     ................
    1588:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1598:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15d8:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
    15e8:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
    15f8:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
    1608:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
    1618:	00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00 00     ....?...........
    1628:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1638:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1648:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1658:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1668:	00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00     ................
    1678:	00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
    1688:	00 00 00 00 00 38 00 00 00 00 00 00 00 3e 00 00     .....8.......>..
    1698:	00 00 00 00 80 3f 00 00 00 00 00 00 e0 3f 00 00     .....?.......?..
    16a8:	00 00 00 00 f8 1f 00 00 00 00 00 00 fe 07 00 00     ................
    16b8:	00 00 00 00 ff 01 00 00 00 00 00 c0 7f 00 00 00     ................
    16c8:	00 00 00 f0 1f 00 00 00 00 00 00 fc 07 00 00 00     ................
    16d8:	00 00 00 ff 03 00 00 00 00 00 c0 ff 00 00 00 00     ................
    16e8:	00 00 f0 3f 00 00 00 00 00 00 fc 0f 00 00 00 00     ...?............
    16f8:	00 00 ff 03 00 00 00 00 00 c0 ff 00 00 00 00 00     ................
    1708:	00 e0 3f 00 00 00 00 00 00 f8 0f 00 00 00 00 00     ..?.............
    1718:	00 fe 03 00 00 00 00 00 80 ff 00 00 00 00 00 00     ................
    1728:	80 7f 00 00 00 00 00 00 80 1f 00 00 00 00 00 00     ................
    1738:	80 07 00 00 00 00 00 00 80 01 00 00 00 00 00 00     ................
    1748:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1758:	1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1768:	00 00 c0 ff ff 7f 00 00 00 00 f8 ff ff ff 03 00     ................
    1778:	00 00 fe ff ff ff 0f 00 00 00 ff ff ff ff 1f 00     ................
    1788:	00 00 ff ff ff ff 1f 00 00 80 ff ff ff ff 3f 00     ..............?.
    1798:	00 80 ff ff ff ff 3f 00 00 80 3f 00 00 fc 3f 00     ......?...?...?.
    17a8:	00 80 0f 00 80 ff 3f 00 00 80 0f 00 f0 ff 3f 00     ......?.......?.
    17b8:	00 80 0f 00 fc ff 3e 00 00 80 0f 80 ff 1f 3e 00     ......>.......>.
    17c8:	00 80 0f f0 ff 07 3e 00 00 80 0f fe ff 00 3e 00     ......>.......>.
    17d8:	00 80 cf ff 1f 00 3e 00 00 80 ff ff 03 00 3e 00     ......>.......>.
    17e8:	00 80 ff 7f 00 00 3e 00 00 80 ff 1f 00 00 3f 00     ......>.......?.
    17f8:	00 80 ff 03 00 c0 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    1808:	00 00 ff ff ff ff 1f 00 00 00 ff ff ff ff 1f 00     ................
    1818:	00 00 fe ff ff ff 0f 00 00 00 f8 ff ff ff 07 00     ................
    1828:	00 00 e0 ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    1838:	00 00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00     ................
    1848:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3e     ...............>
    1858:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    1868:	00 00 00 00 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    1878:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    1888:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    1898:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    18a8:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    18b8:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    18c8:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    18d8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    18e8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    18f8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    1908:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    1918:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1928:	00 00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1938:	00 00 00 00 00 00 80 ff 3f 00 00 00 00 00 f0 ff     ........?.......
    1948:	3f 00 00 00 00 00 fc ff 3f 00 00 00 00 00 fe ff     ?.......?.......
    1958:	3f 00 00 80 0f 00 fe ff 3f 00 00 80 0f 00 ff ff     ?.......?.......
    1968:	3f 00 00 80 0f 00 ff ff 3f 00 00 80 0f 00 ff 01     ?.......?.......
    1978:	3e 00 00 80 0f 00 3f 00 3e 00 00 80 0f 00 1f 00     >.....?.>.......
    1988:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    1998:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    19a8:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    19b8:	3e 00 00 80 1f 80 1f 00 3e 00 00 80 7f e0 1f 00     >.......>.......
    19c8:	3e 00 00 80 ff ff 1f 00 3e 00 00 80 ff ff 1f 00     >.......>.......
    19d8:	3e 00 00 00 ff ff 0f 00 3e 00 00 00 ff ff 0f 00     >.......>.......
    19e8:	3e 00 00 00 fe ff 07 00 3e 00 00 00 f8 ff 01 00     >.......>.......
    19f8:	3e 00 00 00 e0 7f 00 00 3e 00 00 00 00 00 00 00     >.......>.......
    1a08:	00 00 00 00 00 00 00 00 00 00 00 1b 00 00 00 00     ................
    1a18:	00 00 00 00 00 00 00 00 00 00 00 00 80 0f 00 00     ................
    1a28:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    1a38:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    1a48:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    1a58:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 1f     .>.......>......
    1a68:	00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f     .>.......>......
    1a78:	00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f     .>.......>......
    1a88:	00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f     .>.......>......
    1a98:	00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 1f c0 3f     .>.......>.....?
    1aa8:	00 3f 00 00 80 ff ff ff c0 3f 00 00 80 ff ff ff     .?.......?......
    1ab8:	ff 3f 00 00 00 ff ff ff ff 3f 00 00 00 ff ff ff     .?.......?......
    1ac8:	ff 1f 00 00 00 fe ff ff ff 1f 00 00 00 fc ff f9     ................
    1ad8:	ff 0f 00 00 00 f0 7f e0 ff 03 00 00 00 00 06 80     ................
    1ae8:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1af8:	00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00     ................
    1b08:	00 00 00 00 00 00 00 00 00 7f 00 00 00 00 00 00     ................
    1b18:	c0 7f 00 00 00 00 00 00 f0 7f 00 00 00 00 00 00     ................
    1b28:	fc 7f 00 00 00 00 00 00 ff 7f 00 00 00 00 00 c0     ................
    1b38:	ff 7f 00 00 00 00 00 f8 ff 7c 00 00 00 00 00 fe     .........|......
    1b48:	1f 7c 00 00 00 00 80 ff 07 7c 00 00 00 00 e0 ff     .|.......|......
    1b58:	01 7c 00 00 00 00 f8 7f 00 7c 00 00 00 00 fe 1f     .|.......|......
    1b68:	00 7c 00 00 00 80 ff 07 00 7c 00 00 00 80 ff 01     .|.......|......
    1b78:	00 7c 00 00 00 80 3f 00 00 7c 00 00 00 80 ff ff     .|....?..|......
    1b88:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    1b98:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    1ba8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00 00     ..?.......?.....
    1bb8:	00 7c 00 00 00 00 00 00 00 7c 00 00 00 00 00 00     .|.......|......
    1bc8:	00 7c 00 00 00 00 00 00 00 7c 00 00 00 00 00 00     .|.......|......
    1bd8:	00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00     ................
    1be8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 ff     ................
    1bf8:	ff 07 00 3e 00 00 80 ff ff 07 00 3e 00 00 80 ff     ...>.......>....
    1c08:	ff 07 00 3e 00 00 80 ff ff 07 00 3e 00 00 80 ff     ...>.......>....
    1c18:	ff 07 00 3e 00 00 80 ff ff 07 00 3e 00 00 80 ff     ...>.......>....
    1c28:	ff 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80 0f     ...>.......>....
    1c38:	c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80 0f     ...>.......>....
    1c48:	c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80 0f     ...>.......>....
    1c58:	c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80 0f     ...>.......>....
    1c68:	c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80 0f     ...>.......>....
    1c78:	c0 07 00 3f 00 00 80 0f c0 1f c0 3f 00 00 80 0f     ...?.......?....
    1c88:	c0 ff ff 3f 00 00 80 0f c0 ff ff 3f 00 00 80 0f     ...?.......?....
    1c98:	80 ff ff 1f 00 00 80 0f 80 ff ff 0f 00 00 00 00     ................
    1ca8:	00 ff ff 07 00 00 00 00 00 fc ff 01 00 00 00 00     ................
    1cb8:	00 f0 7f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cc8:	00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00     ................
    1cd8:	00 00 00 00 00 00 00 00 f0 ff ff ff 01 00 00 00     ................
    1ce8:	fc ff ff ff 07 00 00 00 ff ff ff ff 1f 00 00 00     ................
    1cf8:	ff ff ff ff 1f 00 00 80 ff ff ff ff 3f 00 00 80     ............?...
    1d08:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    1d18:	7f c0 07 c0 3f 00 00 80 0f c0 07 00 3e 00 00 80     ....?.......>...
    1d28:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
    1d38:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
    1d48:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
    1d58:	0f c0 07 00 3e 00 00 80 0f c0 07 00 3e 00 00 80     ....>.......>...
    1d68:	0f c0 07 00 3f 00 00 80 0f c0 ff ff 3f 00 00 80     ....?.......?...
    1d78:	0f c0 ff ff 3f 00 00 80 0f c0 ff ff 3f 00 00 00     ....?.......?...
    1d88:	00 c0 ff ff 1f 00 00 00 00 80 ff ff 1f 00 00 00     ................
    1d98:	00 00 ff ff 0f 00 00 00 00 00 fc ff 03 00 00 00     ................
    1da8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1c     ................
    1db8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1dc8:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    1dd8:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 20 00 00     ............. ..
    1de8:	80 0f 00 00 00 3c 00 00 80 0f 00 00 00 3f 00 00     .....<.......?..
    1df8:	80 0f 00 00 e0 3f 00 00 80 0f 00 00 f8 3f 00 00     .....?.......?..
    1e08:	80 0f 00 00 ff 3f 00 00 80 0f 00 c0 ff 3f 00 00     .....?.......?..
    1e18:	80 0f 00 f0 ff 1f 00 00 80 0f 00 fe ff 07 00 00     ................
    1e28:	80 0f 80 ff ff 00 00 00 80 0f f0 ff 3f 00 00 00     ............?...
    1e38:	80 0f fc ff 07 00 00 00 80 8f ff ff 01 00 00 00     ................
    1e48:	80 ef ff 3f 00 00 00 00 80 ff ff 0f 00 00 00 00     ...?............
    1e58:	80 ff ff 01 00 00 00 00 80 ff 7f 00 00 00 00 00     ................
    1e68:	80 ff 0f 00 00 00 00 00 80 ff 03 00 00 00 00 00     ................
    1e78:	80 7f 00 00 00 00 00 00 80 1f 00 00 00 00 00 00     ................
    1e88:	80 03 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    1e98:	00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00     ................
    1ea8:	00 00 00 00 00 00 00 00 00 00 00 00 e0 ff 00 00     ................
    1eb8:	00 00 f8 3f f8 ff 03 00 00 00 fc ff fc ff 0f 00     ...?............
    1ec8:	00 00 fe ff ff ff 1f 00 00 00 ff ff ff ff 1f 00     ................
    1ed8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    1ee8:	00 80 3f e0 3f c0 3f 00 00 80 1f c0 1f 00 3f 00     ..?.?.?.......?.
    1ef8:	00 80 0f 80 0f 00 3e 00 00 80 0f 80 0f 00 3e 00     ......>.......>.
    1f08:	00 80 0f 80 0f 00 3e 00 00 80 0f 80 0f 00 3e 00     ......>.......>.
    1f18:	00 80 0f 80 0f 00 3e 00 00 80 0f 80 0f 00 3e 00     ......>.......>.
    1f28:	00 80 0f 80 0f 00 3e 00 00 80 0f 80 0f 00 3e 00     ......>.......>.
    1f38:	00 80 3f e0 3f 80 3f 00 00 80 ff ff ff ff 3f 00     ..?.?.?.......?.
    1f48:	00 80 ff ff ff ff 3f 00 00 00 ff ff ff ff 1f 00     ......?.........
    1f58:	00 00 ff ff ff ff 1f 00 00 00 fe ff fe ff 0f 00     ................
    1f68:	00 00 f8 7f fc ff 07 00 00 00 c0 0f f0 ff 01 00     ................
    1f78:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f88:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f98:	00 00 00 f0 ff 03 00 00 00 00 00 fe ff 0f 00 00     ................
    1fa8:	00 00 00 ff ff 3f 00 3e 00 00 00 ff ff 3f 00 3e     .....?.>.....?.>
    1fb8:	00 00 80 ff ff 7f 00 3e 00 00 80 ff ff 7f 00 3e     .......>.......>
    1fc8:	00 00 80 ff ff 7f 00 3e 00 00 80 ff 80 7f 00 3e     .......>.......>
    1fd8:	00 00 80 0f 00 7c 00 3e 00 00 80 0f 00 7c 00 3e     .....|.>.....|.>
    1fe8:	00 00 80 0f 00 7c 00 3e 00 00 80 0f 00 7c 00 3e     .....|.>.....|.>
    1ff8:	00 00 80 0f 00 7c 00 3e 00 00 80 0f 00 7c 00 3e     .....|.>.....|.>
    2008:	00 00 80 0f 00 7c 00 3e 00 00 80 0f 00 7c 00 3e     .....|.>.....|.>
    2018:	00 00 80 0f 00 7c 00 3e 00 00 80 3f 00 7c 80 3f     .....|.>...?.|.?
    2028:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    2038:	00 00 80 ff ff ff ff 3f 00 00 00 ff ff ff ff 1f     .......?........
    2048:	00 00 00 ff ff ff ff 1f 00 00 00 fe ff ff ff 0f     ................
    2058:	00 00 00 f8 ff ff ff 03 00 00 00 00 00 00 00 00     ................
    2068:	00 00 00 00 00 00 00 00 00 00 13 00 00 00 00 00     ................
    2078:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2088:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2098:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    20a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    20b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 80 1f 00     ................
    20c8:	3f 00 00 00 00 80 1f 00 3f 00 00 00 00 80 1f 00     ?.......?.......
    20d8:	3f 00 00 00 00 80 1f 00 3f 00 00 00 00 80 1f 00     ?.......?.......
    20e8:	3f 00 00 00 00 80 1f 00 3f 00 00 00 00 80 1f 00     ?.......?.......
    20f8:	3f 00 00 00 00 80 1f 00 3f 00 00 00 00 80 1f 00     ?.......?.......
    2108:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    2118:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2128:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2138:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2148:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2158:	00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2168:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2178:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2188:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2198:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    21a8:	00 00 00 00 00 00 80 1f 00 ff 7f 00 00 00 80 1f     ................
    21b8:	00 ff 7f 00 00 00 80 1f 00 ff 7f 00 00 00 80 1f     ................
    21c8:	00 ff 7f 00 00 00 80 1f 00 ff 7f 00 00 00 80 1f     ................
    21d8:	00 ff 7f 00 00 00 80 1f 00 ff 7f 00 00 00 80 1f     ................
    21e8:	00 ff 07 00 00 00 80 1f 00 0f 00 00 00 00 00 00     ................
    21f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2208:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2218:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2228:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2238:	00 00 00 00 00 00 00 00 00 00 00 00 17 00 00 00     ................
    2248:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2258:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2268:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2278:	02 00 00 00 00 00 00 00 07 00 00 00 00 00 00 80     ................
    2288:	0f 00 00 00 00 00 00 c0 1f 00 00 00 00 00 00 c0     ................
    2298:	3f 00 00 00 00 00 00 e0 7f 00 00 00 00 00 00 f0     ?...............
    22a8:	ff 00 00 00 00 00 00 f8 fd 00 00 00 00 00 00 fc     ................
    22b8:	f8 01 00 00 00 00 00 7e f0 03 00 00 00 00 00 3f     .......~.......?
    22c8:	e0 07 00 00 00 00 80 1f e0 0f 00 00 00 00 c0 1f     ................
    22d8:	c0 1f 00 00 00 00 e0 0f 80 3f 00 00 00 00 f0 07     .........?......
    22e8:	00 7f 00 00 00 00 f0 03 00 7e 00 00 00 00 fc 01     .........~......
    22f8:	00 fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2308:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2318:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2328:	00 00 00 00 00 19 00 00 00 00 00 00 00 00 00 00     ................
    2338:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2348:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2358:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    2368:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    2378:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    2388:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    2398:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23a8:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23b8:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23c8:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23d8:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23e8:	7c f0 01 00 00 00 00 00 7c f0 01 00 00 00 00 00     |.......|.......
    23f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2408:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 17 00     ................
    2418:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2428:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2438:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2448:	fc 01 00 fc 01 00 00 00 f8 03 00 fe 00 00 00 00     ................
    2458:	f0 07 00 7f 00 00 00 00 e0 07 00 3f 00 00 00 00     ...........?....
    2468:	c0 0f 80 1f 00 00 00 00 80 1f c0 0f 00 00 00 00     ................
    2478:	00 3f e0 07 00 00 00 00 00 7e f0 07 00 00 00 00     .?.......~......
    2488:	00 fc f8 03 00 00 00 00 00 f8 fd 01 00 00 00 00     ................
    2498:	00 f8 ff 00 00 00 00 00 00 f0 7f 00 00 00 00 00     ................
    24a8:	00 e0 3f 00 00 00 00 00 00 c0 1f 00 00 00 00 00     ..?.............
    24b8:	00 80 0f 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
    24c8:	00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24f8:	00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00     ................
    2508:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2518:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    2528:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    2538:	80 0f 00 00 00 3f 00 00 80 0f 00 f0 0f 3f 00 00     .....?.......?..
    2548:	80 0f 00 f8 1f 3f 00 00 80 0f 00 fc 1f 3f 00 00     .....?.......?..
    2558:	80 0f 00 fe 1f 3f 00 00 80 0f 00 ff 03 3f 00 00     .....?.......?..
    2568:	80 0f 00 7f 00 3f 00 00 80 0f 00 1f 00 3f 00 00     .....?.......?..
    2578:	80 0f 00 1f 00 3f 00 00 80 0f 00 1f 00 00 00 00     .....?..........
    2588:	80 0f 00 1f 00 00 00 00 80 1f 80 1f 00 00 00 00     ................
    2598:	80 ff f0 1f 00 00 00 00 80 ff ff 1f 00 00 00 00     ................
    25a8:	80 ff ff 0f 00 00 00 00 00 ff ff 0f 00 00 00 00     ................
    25b8:	00 fe ff 07 00 00 00 00 00 fc ff 03 00 00 00 00     ................
    25c8:	00 f0 ff 00 00 00 00 00 00 80 1f 00 00 00 00 00     ................
    25d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25e8:	1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25f8:	00 00 00 fc ff ff ff 07 00 00 00 fe ff ff ff 1f     ................
    2608:	00 00 00 ff ff ff ff 1f 00 00 80 ff ff ff ff 3f     ...............?
    2618:	00 00 80 ff ff ff ff 3f 00 00 80 0f 00 00 00 3e     .......?.......>
    2628:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2638:	00 00 80 0f e0 ff 00 3e 00 00 80 0f f8 ff 03 3e     .......>.......>
    2648:	00 00 80 0f fc ff 07 3e 00 00 80 0f 7c e0 07 3e     .......>....|..>
    2658:	00 00 80 0f 3c 80 07 3e 00 00 80 0f 3c 80 07 3e     ....<..>....<..>
    2668:	00 00 80 0f fc ff 07 3e 00 00 80 0f fc ff 07 3e     .......>.......>
    2678:	00 00 80 0f fc ff 07 3e 00 00 80 0f fc ff 07 3e     .......>.......>
    2688:	00 00 80 0f 00 80 07 3e 00 00 80 0f 00 80 07 3e     .......>.......>
    2698:	00 00 80 1f 00 80 07 3e 00 00 80 ff ff ff 07 3e     .......>.......>
    26a8:	00 00 80 ff ff ff 07 3e 00 00 00 ff ff ff 07 3e     .......>.......>
    26b8:	00 00 00 fe ff ff 07 3e 00 00 00 00 00 00 00 00     .......>........
    26c8:	00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00     ................
    26d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c     ...............<
    26e8:	00 00 00 00 00 00 e0 3f 00 00 00 00 00 00 fe 3f     .......?.......?
    26f8:	00 00 00 00 00 f0 ff 3f 00 00 00 00 80 ff ff 3f     .......?.......?
    2708:	00 00 00 00 fc ff ff 3f 00 00 00 e0 ff ff ff 3f     .......?.......?
    2718:	00 00 00 ff ff ff ff 0f 00 00 80 ff ff ff 3f 00     ..............?.
    2728:	00 00 80 ff ff 3f 3e 00 00 00 80 ff ff 00 3e 00     .....?>.......>.
    2738:	00 00 80 ff 01 00 3e 00 00 00 80 0f 00 00 3e 00     ......>.......>.
    2748:	00 00 80 7f 00 00 3e 00 00 00 80 ff 3f 00 3e 00     ......>.....?.>.
    2758:	00 00 80 ff ff 0f 3e 00 00 00 80 ff ff ff 3f 00     ......>.......?.
    2768:	00 00 80 ff ff ff ff 03 00 00 00 f0 ff ff ff 3f     ...............?
    2778:	00 00 00 00 fe ff ff 3f 00 00 00 00 e0 ff ff 3f     .......?.......?
    2788:	00 00 00 00 00 fc ff 3f 00 00 00 00 00 80 ff 3f     .......?.......?
    2798:	00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 00 3e     .......?.......>
    27a8:	00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00     ....... ........
    27b8:	00 00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    27c8:	00 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ........?.......
    27d8:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    27e8:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    27f8:	3f 00 00 80 ff ff ff ff 3f 00 00 80 0f 00 1f 00     ?.......?.......
    2808:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    2818:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    2828:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    2838:	3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00     >.......>.......
    2848:	3e 00 00 80 1f 80 3f 00 3f 00 00 80 ff f9 7f 80     >.....?.?.......
    2858:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    2868:	3f 00 00 00 ff ff ff ff 1f 00 00 00 fe ff ff ff     ?...............
    2878:	1f 00 00 00 fc ff f9 ff 0f 00 00 00 f0 ff f0 ff     ................
    2888:	07 00 00 00 80 0f c0 ff 01 00 00 00 00 00 00 00     ................
    2898:	00 00 00 00 00 00 00 00 00 00 00 1a 00 00 00 00     ................
    28a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    28b8:	00 00 00 00 00 c0 ff ff 7f 00 00 00 00 f8 ff ff     ................
    28c8:	ff 03 00 00 00 fc ff ff ff 07 00 00 00 fe ff ff     ................
    28d8:	ff 0f 00 00 00 ff ff ff ff 1f 00 00 80 ff ff ff     ................
    28e8:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff 00 00     .?.......?......
    28f8:	e0 3f 00 00 80 1f 00 00 00 3f 00 00 80 0f 00 00     .?.......?......
    2908:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2918:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2928:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2938:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2948:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2958:	00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00     .>.......>......
    2968:	00 3e 00 00 80 0f 00 00 00 3e 00 00 00 00 00 00     .>.......>......
    2978:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2988:	00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00     ................
    2998:	00 00 00 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..........?.....
    29a8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    29b8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    29c8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    29d8:	ff ff 3f 00 00 80 0f 00 00 00 3e 00 00 80 0f 00     ..?.......>.....
    29e8:	00 00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00     ..>.......>.....
    29f8:	00 00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00     ..>.......>.....
    2a08:	00 00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00     ..>.......>.....
    2a18:	00 00 3e 00 00 80 1f 00 00 00 3f 00 00 80 7f 00     ..>.......?.....
    2a28:	00 c0 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    2a38:	ff ff 3f 00 00 00 ff ff ff ff 1f 00 00 00 ff ff     ..?.............
    2a48:	ff ff 1f 00 00 00 fe ff ff ff 0f 00 00 00 f8 ff     ................
    2a58:	ff ff 03 00 00 00 e0 ff ff ff 00 00 00 00 00 00     ................
    2a68:	00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00     ................
    2a78:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a88:	00 00 00 00 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...........?....
    2a98:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    2aa8:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    2ab8:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 0f     ...?.......?....
    2ac8:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2ad8:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2ae8:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2af8:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2b08:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2b18:	00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00 80 0f     ...>.......>....
    2b28:	00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f     ...>.......>....
    2b38:	00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00 80 0f     ...>.......>....
    2b48:	00 00 00 3e 00 00 00 00 00 00 00 00 00 00 00 00     ...>............
    2b58:	00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00     ................
    2b68:	00 00 00 00 00 00 00 80 ff ff ff ff 3f 00 00 80     ............?...
    2b78:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    2b88:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    2b98:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    2ba8:	ff ff ff ff 3f 00 00 80 0f 00 1f 00 00 00 00 80     ....?...........
    2bb8:	0f 00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80     ................
    2bc8:	0f 00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80     ................
    2bd8:	0f 00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80     ................
    2be8:	0f 00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80     ................
    2bf8:	0f 00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80     ................
    2c08:	0f 00 1f 00 00 00 00 80 0f 00 00 00 00 00 00 80     ................
    2c18:	0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80     ................
    2c28:	0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00 00     ................
    2c38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1b     ................
    2c48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c58:	00 00 00 00 00 00 00 00 00 f0 ff ff ff 01 00 00     ................
    2c68:	00 fc ff ff ff 07 00 00 00 fe ff ff ff 0f 00 00     ................
    2c78:	00 ff ff ff ff 1f 00 00 00 ff ff ff ff 1f 00 00     ................
    2c88:	80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00     .....?.......?..
    2c98:	80 3f 00 00 80 3f 00 00 80 0f 00 00 00 3e 00 00     .?...?.......>..
    2ca8:	80 0f 00 00 00 3e 00 00 80 0f 00 1f 00 3e 00 00     .....>.......>..
    2cb8:	80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00     .....>.......>..
    2cc8:	80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00     .....>.......>..
    2cd8:	80 0f 00 1f 00 3e 00 00 80 0f 00 1f 00 3e 00 00     .....>.......>..
    2ce8:	80 0f 00 ff ff 3f 00 00 80 0f 00 ff ff 3f 00 00     .....?.......?..
    2cf8:	80 0f 00 ff ff 3f 00 00 80 0f 00 ff ff 3f 00 00     .....?.......?..
    2d08:	80 0f 00 ff ff 3f 00 00 80 0f 00 ff ff 3f 00 00     .....?.......?..
    2d18:	00 00 00 ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
    2d28:	00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00     ................
    2d38:	00 00 00 00 00 00 00 00 00 80 ff ff ff ff 3f 00     ..............?.
    2d48:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2d58:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2d68:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2d78:	00 80 ff ff ff ff 3f 00 00 00 00 00 1f 00 00 00     ......?.........
    2d88:	00 00 00 00 1f 00 00 00 00 00 00 00 1f 00 00 00     ................
    2d98:	00 00 00 00 1f 00 00 00 00 00 00 00 1f 00 00 00     ................
    2da8:	00 00 00 00 1f 00 00 00 00 00 00 00 1f 00 00 00     ................
    2db8:	00 00 00 00 1f 00 00 00 00 00 00 00 1f 00 00 00     ................
    2dc8:	00 00 00 00 1f 00 00 00 00 80 ff ff ff ff 3f 00     ..............?.
    2dd8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2de8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2df8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    2e08:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e18:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e28:	00 00 00 00 00 00 00 00 00 00 80 0f 00 00 00 3e     ...............>
    2e38:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2e48:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2e58:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2e68:	00 00 80 0f 00 00 00 3e 00 00 80 ff ff ff ff 3f     .......>.......?
    2e78:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    2e88:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    2e98:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    2ea8:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2eb8:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2ec8:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2ed8:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    2ee8:	00 00 80 0f 00 00 00 3e 00 00 00 00 00 00 00 00     .......>........
    2ef8:	00 00 00 00 00 00 00 00 00 00 1b 00 00 00 00 00     ................
    2f08:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f18:	00 00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00     ........>.......
    2f28:	3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00     >.......>.......
    2f38:	3e 00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00     >.......>.......
    2f48:	3e 00 00 00 00 00 00 00 3e 00 00 80 0f 00 00 00     >.......>.......
    2f58:	3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00     >.......>.......
    2f68:	3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00     >.......>.......
    2f78:	3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00     >.......>.......
    2f88:	3e 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 80     >.......>.......
    2f98:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    2fa8:	3f 00 00 80 ff ff ff ff 1f 00 00 80 ff ff ff ff     ?...............
    2fb8:	1f 00 00 80 ff ff ff ff 0f 00 00 80 ff ff ff ff     ................
    2fc8:	07 00 00 80 ff ff ff ff 01 00 00 80 ff ff ff 07     ................
    2fd8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fe8:	00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff8:	00 00 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff     .........?......
    3008:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff     .?.......?......
    3018:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff     .?.......?......
    3028:	ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00 c0 0f     .?.......?......
    3038:	00 00 00 00 00 00 e0 1f 00 00 00 00 00 00 f8 7f     ................
    3048:	00 00 00 00 00 00 fc ff 01 00 00 00 00 00 ff ff     ................
    3058:	07 00 00 00 00 80 ff ff 1f 00 00 00 00 e0 ff ff     ................
    3068:	7f 00 00 00 00 f0 ff fe ff 01 00 00 00 fc 3f f8     ..............?.
    3078:	ff 07 00 00 00 fe 1f e0 ff 1f 00 00 80 ff 07 80     ................
    3088:	ff 3f 00 00 80 ff 03 00 fe 3f 00 00 80 ff 00 00     .?.......?......
    3098:	f8 3f 00 00 80 7f 00 00 e0 3f 00 00 80 1f 00 00     .?.......?......
    30a8:	80 3f 00 00 80 0f 00 00 00 3f 00 00 80 03 00 00     .?.......?......
    30b8:	00 3c 00 00 80 01 00 00 00 30 00 00 80 00 00 00     .<.......0......
    30c8:	00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00 00     ................
    30d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 80 ff ff     ................
    30e8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    30f8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    3108:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    3118:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00 00     ..?.......?.....
    3128:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3138:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3148:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3158:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3168:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3178:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3188:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    3198:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    31a8:	00 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
    31b8:	00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     ................
    31c8:	00 00 00 00 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...........?....
    31d8:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    31e8:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    31f8:	ff ff ff 3f 00 00 80 ff ff 03 00 00 00 00 80 ff     ...?............
    3208:	ff ff 01 00 00 00 00 f0 ff ff 7f 00 00 00 00 00     ................
    3218:	fc ff ff 1f 00 00 00 00 00 ff ff 3f 00 00 00 00     ...........?....
    3228:	00 c0 ff 3f 00 00 00 00 00 00 f0 3f 00 00 00 00     ...?.......?....
    3238:	00 00 ff 3f 00 00 00 00 00 fc ff 3f 00 00 00 00     ...?.......?....
    3248:	f0 ff ff 3f 00 00 00 c0 ff ff ff 00 00 00 00 ff     ...?............
    3258:	ff ff 03 00 00 00 80 ff ff 0f 00 00 00 00 80 ff     ................
    3268:	3f 00 00 00 00 00 80 ff ff ff ff 3f 00 00 80 ff     ?..........?....
    3278:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    3288:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 00     ...?.......?....
    3298:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00     ................
    32a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80     ................
    32b8:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    32c8:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    32d8:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    32e8:	ff 1f 00 00 00 00 00 80 ff ff 00 00 00 00 00 00     ................
    32f8:	fe ff 03 00 00 00 00 00 f0 ff 1f 00 00 00 00 00     ................
    3308:	c0 ff 7f 00 00 00 00 00 00 fe ff 01 00 00 00 00     ................
    3318:	00 f8 ff 0f 00 00 00 00 00 c0 ff 3f 00 00 00 00     ...........?....
    3328:	00 00 fe ff 01 00 00 00 00 00 f8 ff 07 00 00 00     ................
    3338:	00 00 c0 ff 1f 00 00 00 00 00 00 ff 3f 00 00 00     ............?...
    3348:	00 00 00 f8 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    3358:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    3368:	ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80     ....?.......?...
    3378:	ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00 00     ....?...........
    3388:	00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00     ................
    3398:	00 00 00 00 00 00 00 00 00 e0 ff ff ff 00 00 00     ................
    33a8:	00 f8 ff ff ff 03 00 00 00 fe ff ff ff 0f 00 00     ................
    33b8:	00 ff ff ff ff 1f 00 00 00 ff ff ff ff 1f 00 00     ................
    33c8:	80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00     .....?.......?..
    33d8:	80 7f 00 00 c0 3f 00 00 80 1f 00 00 00 3f 00 00     .....?.......?..
    33e8:	80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00     .....>.......>..
    33f8:	80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00     .....>.......>..
    3408:	80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00     .....>.......>..
    3418:	80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e 00 00     .....>.......>..
    3428:	80 3f 00 00 80 3f 00 00 80 ff ff ff ff 3f 00 00     .?...?.......?..
    3438:	80 ff ff ff ff 3f 00 00 00 ff ff ff ff 1f 00 00     .....?..........
    3448:	00 ff ff ff ff 1f 00 00 00 fe ff ff ff 0f 00 00     ................
    3458:	00 fc ff ff ff 07 00 00 00 f0 ff ff ff 01 00 00     ................
    3468:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3478:	1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3488:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    3498:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    34a8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    34b8:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00     ......?.......?.
    34c8:	00 80 0f 00 7c 00 00 00 00 80 0f 00 7c 00 00 00     ....|.......|...
    34d8:	00 80 0f 00 7c 00 00 00 00 80 0f 00 7c 00 00 00     ....|.......|...
    34e8:	00 80 0f 00 7c 00 00 00 00 80 0f 00 7c 00 00 00     ....|.......|...
    34f8:	00 80 0f 00 7c 00 00 00 00 80 0f 00 7c 00 00 00     ....|.......|...
    3508:	00 80 1f 00 7e 00 00 00 00 80 7f 80 7f 00 00 00     ....~...........
    3518:	00 80 ff ff 7f 00 00 00 00 80 ff ff 7f 00 00 00     ................
    3528:	00 00 ff ff 3f 00 00 00 00 00 fe ff 3f 00 00 00     ....?.......?...
    3538:	00 00 fc ff 0f 00 00 00 00 00 f0 ff 07 00 00 00     ................
    3548:	00 00 c0 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3558:	00 00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00     ................
    3568:	00 00 00 00 00 00 00 00 00 00 00 c0 ff ff ff 00     ................
    3578:	00 00 00 f8 ff ff ff 03 00 00 00 fe ff ff ff 0f     ................
    3588:	00 00 00 ff ff ff ff 1f 00 00 00 ff ff ff ff 1f     ................
    3598:	00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f     .......?.......?
    35a8:	00 00 80 7f 00 00 c0 3f 00 00 80 1f 00 00 00 3f     .......?.......?
    35b8:	00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 00 3e     .......>.......>
    35c8:	00 00 80 0f 00 00 00 7e 00 00 80 0f 00 00 00 fe     .......~........
    35d8:	03 00 80 0f 00 00 00 fe 07 00 80 0f 00 00 00 fe     ................
    35e8:	07 00 80 0f 00 00 00 fe 07 00 80 1f 00 00 00 ff     ................
    35f8:	07 00 80 3f 00 00 80 bf 07 00 80 ff ff ff ff 3f     ...?...........?
    3608:	06 00 80 ff ff ff ff 3f 00 00 00 ff ff ff ff 1f     .......?........
    3618:	00 00 00 ff ff ff ff 1f 00 00 00 fe ff ff ff 0f     ................
    3628:	00 00 00 fc ff ff ff 07 00 00 00 f0 ff ff ff 01     ................
    3638:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3648:	00 00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3658:	00 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ........?.......
    3668:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    3678:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    3688:	3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ?.......?.......
    3698:	3f 00 00 80 0f 00 1f 00 00 00 00 80 0f 00 1f 00     ?...............
    36a8:	00 00 00 80 0f 00 1f 00 00 00 00 80 0f 00 1f 00     ................
    36b8:	00 00 00 80 0f 00 1f 00 00 00 00 80 0f 00 1f 00     ................
    36c8:	00 00 00 80 0f 00 1f 00 00 00 00 80 0f 00 1f 00     ................
    36d8:	00 00 00 80 1f 80 3f 00 00 00 00 80 3f c0 ff 00     ......?.....?...
    36e8:	00 00 00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff     ........?.......
    36f8:	3f 00 00 00 ff ff ff ff 3f 00 00 00 ff ff f9 ff     ?.......?.......
    3708:	3f 00 00 00 fe ff f1 ff 3f 00 00 00 f8 7f e0 ff     ?.......?.......
    3718:	3f 00 00 00 c0 1f c0 ff 3f 00 00 00 00 00 00 00     ?.......?.......
    3728:	00 00 00 00 00 00 00 00 00 00 00 1b 00 00 00 00     ................
    3738:	00 00 00 00 00 00 00 00 00 00 00 00 00 80 3f 00     ..............?.
    3748:	00 00 00 00 00 f0 ff 01 00 3e 00 00 00 fc ff 03     .........>......
    3758:	00 3e 00 00 00 fe ff 07 00 3e 00 00 00 ff ff 0f     .>.......>......
    3768:	00 3e 00 00 80 ff ff 1f 00 3e 00 00 80 ff ff 1f     .>.......>......
    3778:	00 3e 00 00 80 7f f8 1f 00 3e 00 00 80 1f c0 1f     .>.......>......
    3788:	00 3e 00 00 80 0f 80 1f 00 3e 00 00 80 0f 80 1f     .>.......>......
    3798:	00 3e 00 00 80 0f 80 1f 00 3e 00 00 80 0f 80 1f     .>.......>......
    37a8:	00 3e 00 00 80 0f 80 1f 00 3e 00 00 80 0f 80 1f     .>.......>......
    37b8:	00 3e 00 00 80 0f 80 1f 00 3e 00 00 80 0f 80 3f     .>.......>.....?
    37c8:	00 3f 00 00 80 0f 80 7f c0 3f 00 00 80 0f 80 ff     .?.......?......
    37d8:	ff 3f 00 00 80 0f 80 ff ff 3f 00 00 80 0f 00 ff     .?.......?......
    37e8:	ff 1f 00 00 80 0f 00 ff ff 0f 00 00 80 0f 00 fe     ................
    37f8:	ff 07 00 00 00 00 00 f8 ff 03 00 00 00 00 00 e0     ................
    3808:	7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3818:	00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00     ................
    3828:	00 00 00 00 00 00 00 00 00 00 00 00 00 80 0f 00     ................
    3838:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    3848:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    3858:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    3868:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 ff ff     ................
    3878:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    3888:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    3898:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    38a8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 0f 00     ..?.......?.....
    38b8:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    38c8:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    38d8:	00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
    38e8:	00 00 00 00 00 80 0f 00 00 00 00 00 00 00 00 00     ................
    38f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00     ................
    3908:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 ff     ................
    3918:	ff ff 7f 00 00 00 80 ff ff ff ff 03 00 00 80 ff     ................
    3928:	ff ff ff 0f 00 00 80 ff ff ff ff 1f 00 00 80 ff     ................
    3938:	ff ff ff 1f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...........?....
    3948:	ff ff ff 3f 00 00 00 00 00 00 c0 3f 00 00 00 00     ...?.......?....
    3958:	00 00 00 3f 00 00 00 00 00 00 00 3e 00 00 00 00     ...?.......>....
    3968:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    3978:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    3988:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    3998:	00 00 00 3f 00 00 00 00 00 00 80 3f 00 00 80 ff     ...?.......?....
    39a8:	ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff     ...?.......?....
    39b8:	ff ff ff 1f 00 00 80 ff ff ff ff 1f 00 00 80 ff     ................
    39c8:	ff ff ff 0f 00 00 80 ff ff ff ff 07 00 00 80 ff     ................
    39d8:	ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39e8:	00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00     ................
    39f8:	00 00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80     ................
    3a08:	ff 00 00 00 00 00 00 80 ff 1f 00 00 00 00 00 80     ................
    3a18:	ff ff 03 00 00 00 00 80 ff ff 7f 00 00 00 00 80     ................
    3a28:	ff ff ff 07 00 00 00 80 ff ff ff ff 00 00 00 00     ................
    3a38:	fc ff ff ff 1f 00 00 00 00 ff ff ff 3f 00 00 00     ............?...
    3a48:	00 c0 ff ff 3f 00 00 00 00 00 f0 ff 3f 00 00 00     ....?.......?...
    3a58:	00 00 00 fc 3f 00 00 00 00 00 00 c0 3f 00 00 00     ....?.......?...
    3a68:	00 00 00 f8 3f 00 00 00 00 00 c0 ff 3f 00 00 00     ....?.......?...
    3a78:	00 00 fe ff 3f 00 00 00 00 f0 ff ff 3f 00 00 00     ....?.......?...
    3a88:	80 ff ff ff 07 00 00 00 fe ff ff 7f 00 00 00 80     ................
    3a98:	ff ff ff 03 00 00 00 80 ff ff 3f 00 00 00 00 80     ..........?.....
    3aa8:	ff ff 03 00 00 00 00 80 ff 1f 00 00 00 00 00 80     ................
    3ab8:	ff 01 00 00 00 00 00 80 1f 00 00 00 00 00 00 80     ................
    3ac8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
    3ad8:	80 00 00 00 00 00 00 00 80 ff 03 00 00 00 00 00     ................
    3ae8:	80 ff ff 0f 00 00 00 00 80 ff ff ff 3f 00 00 00     ............?...
    3af8:	80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00     .....?.......?..
    3b08:	80 ff ff ff ff 3f 00 00 00 fc ff ff ff 3f 00 00     .....?.......?..
    3b18:	00 00 00 ff ff 3f 00 00 00 00 00 00 e0 3f 00 00     .....?.......?..
    3b28:	00 00 00 00 ff 3f 00 00 00 00 00 ff ff 3f 00 00     .....?.......?..
    3b38:	00 00 fe ff ff 0f 00 00 00 00 fe ff 1f 00 00 00     ................
    3b48:	00 00 fe 3f 00 00 00 00 00 00 fe ff 07 00 00 00     ...?............
    3b58:	00 00 fe ff ff 01 00 00 00 00 c0 ff ff 3f 00 00     .............?..
    3b68:	00 00 00 c0 ff 3f 00 00 00 00 00 00 c0 3f 00 00     .....?.......?..
    3b78:	00 00 00 e0 ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    3b88:	80 ff ff ff ff 3f 00 00 80 ff ff ff ff 3f 00 00     .....?.......?..
    3b98:	80 ff ff ff ff 3f 00 00 80 ff ff ff ff 03 00 00     .....?..........
    3ba8:	80 ff ff ff 00 00 00 00 80 ff 1f 00 00 00 00 00     ................
    3bb8:	80 07 00 00 00 00 00 00 1c 00 00 00 00 00 00 00     ................
    3bc8:	00 00 00 00 00 00 20 00 00 80 00 00 00 00 30 00     ...... .......0.
    3bd8:	00 80 07 00 00 00 3e 00 00 80 1f 00 00 80 3f 00     ......>.......?.
    3be8:	00 80 7f 00 00 e0 3f 00 00 80 ff 01 00 f8 3f 00     ......?.......?.
    3bf8:	00 80 ff 07 00 fe 3f 00 00 80 ff 1f 80 ff 3f 00     ......?.......?.
    3c08:	00 80 ff 7f e0 ff 1f 00 00 00 fe ff fb ff 03 00     ................
    3c18:	00 00 f0 ff ff 7f 00 00 00 00 c0 ff ff 1f 00 00     ................
    3c28:	00 00 00 fe ff 03 00 00 00 00 00 f8 ff 00 00 00     ................
    3c38:	00 00 00 f0 ff 01 00 00 00 00 00 fc ff 0f 00 00     ................
    3c48:	00 00 00 ff ff 7f 00 00 00 00 e0 ff ff ff 01 00     ................
    3c58:	00 00 f8 ff f9 ff 0f 00 00 00 ff 7f e0 ff 3f 00     ..............?.
    3c68:	00 80 ff 1f 80 ff 3f 00 00 80 ff 07 00 fc 3f 00     ......?.......?.
    3c78:	00 80 ff 01 00 f0 3f 00 00 80 7f 00 00 c0 3f 00     ......?.......?.
    3c88:	00 80 0f 00 00 00 3f 00 00 80 03 00 00 00 38 00     ......?.......8.
    3c98:	00 80 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
    3ca8:	00 1c 00 00 00 00 00 00 00 00 80 00 00 00 00 00     ................
    3cb8:	00 00 80 07 00 00 00 00 00 00 80 1f 00 00 00 00     ................
    3cc8:	00 00 80 ff 00 00 00 00 00 00 80 ff 03 00 00 00     ................
    3cd8:	00 00 80 ff 1f 00 00 00 00 00 80 ff ff 00 00 00     ................
    3ce8:	00 00 80 ff ff 03 00 00 00 00 00 ff ff 1f 00 00     ................
    3cf8:	00 00 00 f0 ff ff 00 00 00 00 00 80 ff ff ff 3f     ...............?
    3d08:	00 00 00 00 f8 ff ff 3f 00 00 00 00 c0 ff ff 3f     .......?.......?
    3d18:	00 00 00 00 00 fc ff 3f 00 00 00 00 00 ff ff 3f     .......?.......?
    3d28:	00 00 00 00 f0 ff ff 3f 00 00 00 00 fe ff ff 3f     .......?.......?
    3d38:	00 00 00 e0 ff ff 00 00 00 00 00 fc ff 1f 00 00     ................
    3d48:	00 00 80 ff ff 07 00 00 00 00 80 ff ff 00 00 00     ................
    3d58:	00 00 80 ff 3f 00 00 00 00 00 80 ff 07 00 00 00     ....?...........
    3d68:	00 00 80 ff 01 00 00 00 00 00 80 3f 00 00 00 00     ...........?....
    3d78:	00 00 80 07 00 00 00 00 00 00 80 01 00 00 00 00     ................
    3d88:	00 00 00 00 00 00 00 00 00 00 1b 00 00 00 00 00     ................
    3d98:	00 00 00 00 00 00 00 00 00 00 00 80 0f 00 00 00     ................
    3da8:	3c 00 00 80 0f 00 00 00 3e 00 00 80 0f 00 00 80     <.......>.......
    3db8:	3f 00 00 80 0f 00 00 e0 3f 00 00 80 0f 00 00 f8     ?.......?.......
    3dc8:	3f 00 00 80 0f 00 00 fe 3f 00 00 80 0f 00 80 ff     ?.......?.......
    3dd8:	3f 00 00 80 0f 00 c0 ff 3f 00 00 80 0f 00 f0 ff     ?.......?.......
    3de8:	3f 00 00 80 0f 00 fc ff 3e 00 00 80 0f 00 ff 7f     ?.......>.......
    3df8:	3e 00 00 80 0f c0 ff 1f 3e 00 00 80 0f f0 ff 07     >.......>.......
    3e08:	3e 00 00 80 0f fc ff 01 3e 00 00 80 0f fe 7f 00     >.......>.......
    3e18:	3e 00 00 80 8f ff 1f 00 3e 00 00 80 ef ff 07 00     >.......>.......
    3e28:	3e 00 00 80 ff ff 01 00 3e 00 00 80 ff 7f 00 00     >.......>.......
    3e38:	3e 00 00 80 ff 1f 00 00 3e 00 00 80 ff 0f 00 00     >.......>.......
    3e48:	3e 00 00 80 ff 03 00 00 3e 00 00 80 ff 00 00 00     >.......>.......
    3e58:	3e 00 00 80 3f 00 00 00 3e 00 00 80 0f 00 00 00     >...?...>.......
    3e68:	3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
    3e78:	00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e98:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ea8:	00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    3eb8:	ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff ff ff     ................
    3ec8:	ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff ff ff     ................
    3ed8:	ff ff ff 03 ff ff ff ff ff ff ff 03 0f 00 00 00     ................
    3ee8:	00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00 00 00     ................
    3ef8:	00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00 00 00     ................
    3f08:	00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00 00 00     ................
    3f18:	00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00 00 00     ................
    3f28:	00 00 c0 03 0f 00 00 00 00 00 c0 03 00 00 00 00     ................
    3f38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f58:	00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00 00     ................
    3f68:	00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00     ................
    3f78:	00 00 00 00 00 80 03 00 00 00 00 00 00 80 0f 00     ................
    3f88:	00 00 00 00 00 80 3f 00 00 00 00 00 00 80 ff 00     ......?.........
    3f98:	00 00 00 00 00 00 ff 03 00 00 00 00 00 00 fc 0f     ................
    3fa8:	00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 c0 7f     .......?........
    3fb8:	00 00 00 00 00 00 00 ff 01 00 00 00 00 00 00 fc     ................
    3fc8:	07 00 00 00 00 00 00 f0 1f 00 00 00 00 00 00 e0     ................
    3fd8:	7f 00 00 00 00 00 00 80 ff 01 00 00 00 00 00 00     ................
    3fe8:	fe 07 00 00 00 00 00 00 f8 1f 00 00 00 00 00 00     ................
    3ff8:	e0 7f 00 00 00 00 00 00 80 ff 01 00 00 00 00 00     ................
    4008:	00 fe 07 00 00 00 00 00 00 f8 1f 00 00 00 00 00     ................
    4018:	00 e0 3f 00 00 00 00 00 00 80 3f 00 00 00 00 00     ..?.......?.....
    4028:	00 00 3f 00 00 00 00 00 00 00 3c 00 00 00 00 00     ..?.......<.....
    4038:	00 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00     ..0.............
    4048:	00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00     ................
    4058:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4068:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4078:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
    4088:	00 00 00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00     ................
    4098:	00 00 00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00     ................
    40a8:	00 00 00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00     ................
    40b8:	00 00 00 00 c0 03 0f 00 00 00 00 00 c0 03 0f 00     ................
    40c8:	00 00 00 00 c0 03 0f 00 00 00 00 00 c0 03 ff ff     ................
    40d8:	ff ff ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff     ................
    40e8:	ff ff ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff     ................
    40f8:	ff ff ff ff ff 03 ff ff ff ff ff ff ff 03 00 00     ................
    4108:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4118:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4128:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
    4138:	00 80 00 00 00 00 00 00 00 c0 00 00 00 00 00 00     ................
    4148:	00 e0 00 00 00 00 00 00 00 f0 00 00 00 00 00 00     ................
    4158:	00 f8 00 00 00 00 00 00 00 7c 00 00 00 00 00 00     .........|......
    4168:	00 3f 00 00 00 00 00 00 80 1f 00 00 00 00 00 00     .?..............
    4178:	c0 07 00 00 00 00 00 00 e0 03 00 00 00 00 00 00     ................
    4188:	f0 01 00 00 00 00 00 00 fc 00 00 00 00 00 00 00     ................
    4198:	7e 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 80     ~...............
    41a8:	1f 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00     ................
    41b8:	3e 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00     >.......|.......
    41c8:	f8 01 00 00 00 00 00 00 e0 03 00 00 00 00 00 00     ................
    41d8:	c0 07 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    41e8:	00 1f 00 00 00 00 00 00 00 3e 00 00 00 00 00 00     .........>......
    41f8:	00 f8 00 00 00 00 00 00 00 f0 00 00 00 00 00 00     ................
    4208:	00 e0 00 00 00 00 00 00 00 c0 00 00 00 00 00 00     ................
    4218:	00 80 00 00 00 00 00 1d 00 00 00 00 00 00 f8 01     ................
    4228:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4238:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4248:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4258:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4268:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4278:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4288:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4298:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42a8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42b8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42c8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42d8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42e8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    42f8:	00 00 00 00 00 00 f8 01 00 00 00 00 00 00 f8 01     ................
    4308:	14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4318:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4328:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4338:	00 00 1f 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    4348:	00 00 1f 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    4358:	00 00 1e 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
    4368:	00 00 1e 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
    4378:	00 00 3e 00 00 00 00 00 00 00 3c 00 00 00 00 00     ..>.......<.....
    4388:	00 00 3c 00 00 00 00 00 00 00 3c 00 00 00 00 00     ..<.......<.....
    4398:	00 00 3c 00 00 00 00 00 00 00 3c 00 00 00 00 00     ..<.......<.....
    43a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43d8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43e8:	00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00     ................
    43f8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 01     ................
    4408:	00 00 00 00 00 e0 ff 07 00 00 00 00 00 f0 ff 0f     ................
    4418:	00 00 00 00 00 f8 ff 1f 00 00 00 80 0f f8 ff 3f     ...............?
    4428:	00 00 00 80 0f fc ff 3f 00 00 00 80 0f fc ff 3f     .......?.......?
    4438:	00 00 00 80 0f fc 01 3f 00 00 00 80 0f fc 00 3e     .......?.......>
    4448:	00 00 00 80 0f 7c 00 3e 00 00 00 80 0f 7c 00 3e     .....|.>.....|.>
    4458:	00 00 00 80 0f 7c 00 3e 00 00 00 80 0f 7c 00 3e     .....|.>.....|.>
    4468:	00 00 00 80 0f 7c 00 3e 00 00 00 80 0f 7c 00 3e     .....|.>.....|.>
    4478:	00 00 00 80 0f 7c 00 3e 00 00 00 80 0f 7c 00 3e     .....|.>.....|.>
    4488:	00 00 00 80 1f 7c 00 3e 00 00 00 80 ff ff ff 3f     .....|.>.......?
    4498:	00 00 00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f     .......?.......?
    44a8:	00 00 00 00 ff ff ff 3f 00 00 00 00 ff ff ff 3f     .......?.......?
    44b8:	00 00 00 00 fe ff ff 3f 00 00 00 00 fc ff ff 3f     .......?.......?
    44c8:	00 00 00 00 00 fe ff 3f 00 00 00 00 00 00 00 00     .......?........
    44d8:	00 00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44e8:	00 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff     ........?.......
    44f8:	3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff     ?.......?.......
    4508:	3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff     ?.......?.......
    4518:	3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff     ?.......?.......
    4528:	3f 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00     ?.......>.......
    4538:	3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00     >.......>.......
    4548:	3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00     >.......>.......
    4558:	3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00     >.......>.......
    4568:	3e 00 00 00 80 0f 00 00 3e 00 00 00 80 3f 00 80     >.......>....?..
    4578:	3f 00 00 00 80 ff ff ff 3f 00 00 00 80 ff ff ff     ?.......?.......
    4588:	3f 00 00 00 80 ff ff ff 3f 00 00 00 00 ff ff ff     ?.......?.......
    4598:	1f 00 00 00 00 fe ff ff 0f 00 00 00 00 fc ff ff     ................
    45a8:	07 00 00 00 00 f0 ff ff 01 00 00 00 00 00 00 00     ................
    45b8:	00 00 00 00 00 00 00 00 00 00 00 1b 00 00 00 00     ................
    45c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45d8:	00 00 00 00 00 00 f8 ff ff 03 00 00 00 00 fe ff     ................
    45e8:	ff 0f 00 00 00 00 ff ff ff 1f 00 00 00 00 ff ff     ................
    45f8:	ff 1f 00 00 00 80 ff ff ff 3f 00 00 00 80 ff ff     .........?......
    4608:	ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80 1f 00     .?.......?......
    4618:	80 3f 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .?.......>......
    4628:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4638:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4648:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4658:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4668:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4678:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4688:	00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00     .>.......>......
    4698:	00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .>..............
    46a8:	00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00     ................
    46b8:	00 00 00 00 00 00 00 c0 ff 7f 00 00 00 00 00 f8     ................
    46c8:	ff ff 03 00 00 00 00 fe ff ff 0f 00 00 00 00 ff     ................
    46d8:	ff ff 1f 00 00 00 00 ff ff ff 1f 00 00 00 80 ff     ................
    46e8:	ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80 ff     ..?.......?.....
    46f8:	ff ff 3f 00 00 00 80 1f 00 80 3f 00 00 00 80 0f     ..?.......?.....
    4708:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    4718:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    4728:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    4738:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    4748:	00 00 3e 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..>.......?.....
    4758:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..?.......?.....
    4768:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..?.......?.....
    4778:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 00 00 00     ..?.......?.....
    4788:	00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00     ................
    4798:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47a8:	e0 ff ff 00 00 00 00 00 fc ff ff 07 00 00 00 00     ................
    47b8:	fe ff ff 0f 00 00 00 00 ff ff ff 1f 00 00 00 00     ................
    47c8:	ff ff ff 1f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...........?....
    47d8:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    47e8:	0f f0 01 3f 00 00 00 80 0f f0 01 3e 00 00 00 80     ...?.......>....
    47f8:	0f f0 01 3e 00 00 00 80 0f f0 01 3e 00 00 00 80     ...>.......>....
    4808:	0f f0 01 3e 00 00 00 80 0f f0 01 3e 00 00 00 80     ...>.......>....
    4818:	0f f0 01 3e 00 00 00 80 0f f0 01 3e 00 00 00 80     ...>.......>....
    4828:	0f f0 01 3e 00 00 00 80 0f f0 01 3e 00 00 00 80     ...>.......>....
    4838:	ff ff 01 3e 00 00 00 80 ff ff 01 3e 00 00 00 80     ...>.......>....
    4848:	ff ff 01 3e 00 00 00 00 ff ff 01 3e 00 00 00 00     ...>.......>....
    4858:	ff ff 00 3e 00 00 00 00 fe 7f 00 00 00 00 00 00     ...>............
    4868:	f8 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4878:	00 00 00 00 00 00 1b 00 00 00 00 00 00 00 00 00     ................
    4888:	00 00 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    4898:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    48a8:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    48b8:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    48c8:	80 0f 00 00 00 00 00 00 ff ff ff ff 3f 00 00 80     ............?...
    48d8:	ff ff ff ff 3f 00 00 c0 ff ff ff ff 3f 00 00 c0     ....?.......?...
    48e8:	ff ff ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0     ....?.......?...
    48f8:	ff ff ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0     ....?.......?...
    4908:	87 0f 00 00 00 00 00 e0 83 0f 00 00 00 00 00 e0     ................
    4918:	83 0f 00 00 00 00 00 e0 83 0f 00 00 00 00 00 e0     ................
    4928:	83 0f 00 00 00 00 00 e0 83 0f 00 00 00 00 00 e0     ................
    4938:	83 0f 00 00 00 00 00 e0 03 00 00 00 00 00 00 e0     ................
    4948:	03 00 00 00 00 00 00 e0 03 00 00 00 00 00 00 00     ................
    4958:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1b     ................
    4968:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4978:	00 00 e0 ff ff 00 00 00 00 00 fc ff ff 07 00 00     ................
    4988:	00 00 fe ff ff 0f 00 00 00 00 ff ff ff 1f 00 00     ................
    4998:	00 00 ff ff ff 1f 00 00 00 80 ff ff ff 3f e0 03     .............?..
    49a8:	00 80 ff ff ff 3f e0 03 00 80 ff ff ff 3f e0 03     .....?.......?..
    49b8:	00 80 1f 00 00 3e e0 03 00 80 0f 00 00 3e e0 03     .....>.......>..
    49c8:	00 80 0f 00 00 3e e0 03 00 80 0f 00 00 3e e0 03     .....>.......>..
    49d8:	00 80 0f 00 00 3e e0 03 00 80 0f 00 00 3e e0 03     .....>.......>..
    49e8:	00 80 0f 00 00 3e e0 03 00 80 0f 00 00 3e e0 03     .....>.......>..
    49f8:	00 80 0f 00 00 3e f0 03 00 80 0f 00 00 3e f8 03     .....>.......>..
    4a08:	00 80 ff ff ff ff ff 03 00 80 ff ff ff ff ff 03     ................
    4a18:	00 80 ff ff ff ff ff 03 00 80 ff ff ff ff ff 01     ................
    4a28:	00 80 ff ff ff ff ff 01 00 80 ff ff ff ff ff 00     ................
    4a38:	00 80 ff ff ff ff 1f 00 00 00 00 00 00 00 00 00     ................
    4a48:	00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00     ................
    4a58:	00 00 00 00 00 00 00 00 00 e0 ff ff ff ff 3f 00     ..............?.
    4a68:	00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff 3f 00     ......?.......?.
    4a78:	00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff 3f 00     ......?.......?.
    4a88:	00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff ff 3f 00     ......?.......?.
    4a98:	00 e0 ff ff ff ff 3f 00 00 00 80 0f 00 00 00 00     ......?.........
    4aa8:	00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00 00     ................
    4ab8:	00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00 00     ................
    4ac8:	00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00 00     ................
    4ad8:	00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00 00     ................
    4ae8:	00 00 80 3f 00 00 00 00 00 00 80 ff ff ff 3f 00     ...?..........?.
    4af8:	00 00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00     ......?.......?.
    4b08:	00 00 00 ff ff ff 3f 00 00 00 00 ff ff ff 3f 00     ......?.......?.
    4b18:	00 00 00 fe ff ff 3f 00 00 00 00 f8 ff ff 3f 00     ......?.......?.
    4b28:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b38:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b48:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    4b58:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    4b68:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    4b78:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    4b88:	00 00 e0 87 0f 00 00 3e 00 00 e0 87 ff ff ff 3f     .......>.......?
    4b98:	00 00 e0 87 ff ff ff 3f 00 00 e0 87 ff ff ff 3f     .......?.......?
    4ba8:	00 00 e0 87 ff ff ff 3f 00 00 e0 87 ff ff ff 3f     .......?.......?
    4bb8:	00 00 e0 87 ff ff ff 3f 00 00 e0 87 ff ff ff 3f     .......?.......?
    4bc8:	00 00 e0 07 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    4bd8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    4be8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    4bf8:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 3e     .......>.......>
    4c08:	00 00 00 00 00 00 00 3e 00 00 00 00 00 00 00 00     .......>........
    4c18:	00 00 00 00 00 00 00 00 00 00 19 00 00 00 00 00     ................
    4c28:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c48:	00 00 00 00 00 00 00 00 00 00 00 00 80 0f 00 00     ................
    4c58:	00 e0 03 00 80 0f 00 00 00 e0 03 00 80 0f 00 00     ................
    4c68:	00 e0 03 00 80 0f 00 00 00 e0 03 00 80 0f 00 00     ................
    4c78:	00 e0 03 00 80 0f 00 00 00 e0 03 00 80 0f 00 00     ................
    4c88:	00 e0 03 00 80 0f 00 00 00 e0 03 00 80 0f 00 00     ................
    4c98:	00 e0 03 00 80 0f 00 00 00 f0 03 e0 87 ff ff ff     ................
    4ca8:	ff ff 03 e0 87 ff ff ff ff ff 03 e0 87 ff ff ff     ................
    4cb8:	ff ff 03 e0 87 ff ff ff ff ff 03 e0 87 ff ff ff     ................
    4cc8:	ff ff 01 e0 87 ff ff ff ff ff 00 e0 87 ff ff ff     ................
    4cd8:	ff 7f 00 e0 87 ff ff ff ff 0f 00 e0 07 00 00 00     ................
    4ce8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cf8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d08:	00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d18:	00 00 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff     .........?......
    4d28:	ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff     .?.......?......
    4d38:	ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff ff     .?.......?......
    4d48:	ff 3f 00 00 e0 ff ff ff ff 3f 00 00 00 00 00 fc     .?.......?......
    4d58:	01 00 00 00 00 00 00 fe 03 00 00 00 00 00 00 ff     ................
    4d68:	0f 00 00 00 00 00 80 ff 1f 00 00 00 00 00 e0 ff     ................
    4d78:	3f 00 00 00 00 00 f0 ff ff 00 00 00 00 00 f8 8f     ?...............
    4d88:	ff 01 00 00 00 00 fc 07 ff 03 00 00 00 00 fe 03     ................
    4d98:	fe 0f 00 00 00 80 ff 01 fc 1f 00 00 00 80 ff 00     ................
    4da8:	f0 3f 00 00 00 80 3f 00 e0 3f 00 00 00 80 1f 00     .?....?..?......
    4db8:	c0 3f 00 00 00 80 0f 00 80 3f 00 00 00 80 07 00     .?.......?......
    4dc8:	00 3e 00 00 00 80 03 00 00 3c 00 00 00 80 00 00     .>.......<......
    4dd8:	00 38 00 00 00 80 00 00 00 30 00 00 00 00 00 00     .8.......0......
    4de8:	00 20 00 00 00 00 00 00 00 00 00 00 1b 00 00 00     . ..............
    4df8:	00 00 00 00 00 00 00 00 00 00 00 00 00 e0 03 00     ................
    4e08:	00 00 3e 00 00 e0 03 00 00 00 3e 00 00 e0 03 00     ..>.......>.....
    4e18:	00 00 3e 00 00 e0 03 00 00 00 3e 00 00 e0 03 00     ..>.......>.....
    4e28:	00 00 3e 00 00 e0 03 00 00 00 3e 00 00 e0 03 00     ..>.......>.....
    4e38:	00 00 3e 00 00 e0 03 00 00 00 3e 00 00 e0 03 00     ..>.......>.....
    4e48:	00 00 3e 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..>.......?.....
    4e58:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..?.......?.....
    4e68:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 e0 ff ff     ..?.......?.....
    4e78:	ff ff 3f 00 00 e0 ff ff ff ff 3f 00 00 00 00 00     ..?.......?.....
    4e88:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    4e98:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    4ea8:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    4eb8:	00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..>.......>.....
    4ec8:	00 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
    4ed8:	00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00     ................
    4ee8:	00 00 00 00 00 00 00 80 ff ff ff 3f 00 00 00 80     ...........?....
    4ef8:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    4f08:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    4f18:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    4f28:	0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80     ................
    4f38:	0f 00 00 00 00 00 00 80 ff ff ff 3f 00 00 00 80     ...........?....
    4f48:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    4f58:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    4f68:	0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80     ................
    4f78:	0f 00 00 00 00 00 00 80 1f 00 00 00 00 00 00 80     ................
    4f88:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 00     ...?.......?....
    4f98:	ff ff ff 3f 00 00 00 00 ff ff ff 3f 00 00 00 00     ...?.......?....
    4fa8:	fe ff ff 3f 00 00 00 00 fc ff ff 3f 00 00 00 00     ...?.......?....
    4fb8:	80 ff ff 3f 00 00 00 00 00 00 00 00 00 00 1b 00     ...?............
    4fc8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fd8:	80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00     ....?.......?...
    4fe8:	80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00     ....?.......?...
    4ff8:	80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00     ....?.......?...
    5008:	80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00     ....?.......?...
    5018:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    5028:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    5038:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    5048:	80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    5058:	80 0f 00 00 00 00 00 00 80 3f 00 00 00 00 00 00     .........?......
    5068:	80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00     ....?.......?...
    5078:	80 ff ff ff 3f 00 00 00 00 ff ff ff 3f 00 00 00     ....?.......?...
    5088:	00 ff ff ff 3f 00 00 00 00 fe ff ff 3f 00 00 00     ....?.......?...
    5098:	00 f8 ff ff 3f 00 00 00 00 00 00 00 00 00 00 00     ....?...........
    50a8:	00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00     ................
    50b8:	00 00 00 00 00 00 00 00 00 00 f8 ff ff 03 00 00     ................
    50c8:	00 00 fe ff ff 0f 00 00 00 00 ff ff ff 1f 00 00     ................
    50d8:	00 00 ff ff ff 1f 00 00 00 80 ff ff ff 3f 00 00     .............?..
    50e8:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    50f8:	00 80 3f 00 80 3f 00 00 00 80 0f 00 00 3e 00 00     ..?..?.......>..
    5108:	00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00 00     .....>.......>..
    5118:	00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00 00     .....>.......>..
    5128:	00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00 00     .....>.......>..
    5138:	00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00 00     .....>.......>..
    5148:	00 80 1f 00 00 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    5158:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    5168:	00 00 ff ff ff 1f 00 00 00 00 ff ff ff 1f 00 00     ................
    5178:	00 00 fe ff ff 0f 00 00 00 00 fc ff ff 07 00 00     ................
    5188:	00 00 e0 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    5198:	1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51a8:	00 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff ff     ................
    51b8:	03 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff ff     ................
    51c8:	03 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff ff     ................
    51d8:	03 00 80 ff ff ff ff ff 03 00 80 0f 00 00 3e 00     ..............>.
    51e8:	00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00     ......>.......>.
    51f8:	00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00     ......>.......>.
    5208:	00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00     ......>.......>.
    5218:	00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e 00     ......>.......>.
    5228:	00 00 80 0f 00 00 3e 00 00 00 80 1f 00 00 3f 00     ......>.......?.
    5238:	00 00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00     ......?.......?.
    5248:	00 00 80 ff ff ff 3f 00 00 00 00 ff ff ff 1f 00     ......?.........
    5258:	00 00 00 ff ff ff 1f 00 00 00 00 fe ff ff 0f 00     ................
    5268:	00 00 00 f8 ff ff 03 00 00 00 00 00 fe 0f 00 00     ................
    5278:	00 00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00     ................
    5288:	00 00 00 00 00 00 00 00 00 00 00 00 c0 ff 7f 00     ................
    5298:	00 00 00 00 fc ff ff 07 00 00 00 00 fe ff ff 0f     ................
    52a8:	00 00 00 00 ff ff ff 1f 00 00 00 00 ff ff ff 1f     ................
    52b8:	00 00 00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f     .......?.......?
    52c8:	00 00 00 80 ff ff ff 3f 00 00 00 80 1f 00 00 3f     .......?.......?
    52d8:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    52e8:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    52f8:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    5308:	00 00 00 80 0f 00 00 3e 00 00 00 80 0f 00 00 3e     .......>.......>
    5318:	00 00 00 80 0f 00 00 3e 00 00 00 80 ff ff ff ff     .......>........
    5328:	ff 03 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff     ................
    5338:	ff 03 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff     ................
    5348:	ff 03 00 80 ff ff ff ff ff 03 00 80 ff ff ff ff     ................
    5358:	ff 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5368:	00 00 1a 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5378:	00 00 00 00 00 00 00 00 00 00 00 00 00 e0 ff ff     ................
    5388:	3f 00 00 00 00 f8 ff ff 3f 00 00 00 00 fe ff ff     ?.......?.......
    5398:	3f 00 00 00 00 fe ff ff 3f 00 00 00 00 ff ff ff     ?.......?.......
    53a8:	3f 00 00 00 00 ff ff ff 3f 00 00 00 80 ff ff ff     ?.......?.......
    53b8:	3f 00 00 00 80 ff ff ff 3f 00 00 00 80 1f 00 00     ?.......?.......
    53c8:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    53d8:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    53e8:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    53f8:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    5408:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    5418:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    5428:	00 00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00     ................
    5438:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5448:	00 00 00 00 00 00 00 00 00 00 00 1c 00 00 00 00     ................
    5458:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 1f     ................
    5468:	00 00 00 00 00 00 fe 7f 00 3e 00 00 00 00 ff ff     .........>......
    5478:	00 3e 00 00 00 00 ff ff 00 3e 00 00 00 80 ff ff     .>.......>......
    5488:	01 3e 00 00 00 80 ff ff 01 3e 00 00 00 80 1f fc     .>.......>......
    5498:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54a8:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54b8:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54c8:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54d8:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54e8:	01 3e 00 00 00 80 0f f8 01 3e 00 00 00 80 0f f8     .>.......>......
    54f8:	03 3f 00 00 00 80 0f f8 ff 3f 00 00 00 80 0f f8     .?.......?......
    5508:	ff 3f 00 00 00 80 0f f0 ff 1f 00 00 00 80 0f f0     .?..............
    5518:	ff 1f 00 00 00 80 0f e0 ff 0f 00 00 00 00 00 80     ................
    5528:	ff 03 00 00 00 00 00 00 7c 00 00 00 00 00 00 00     ........|.......
    5538:	00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00 00     ................
    5548:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    5558:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    5568:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    5578:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    5588:	00 00 00 00 00 80 ff ff ff ff 07 00 00 80 ff ff     ................
    5598:	ff ff 1f 00 00 80 ff ff ff ff 1f 00 00 80 ff ff     ................
    55a8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 80 ff ff     ..?.......?.....
    55b8:	ff ff 3f 00 00 80 ff ff ff ff 3f 00 00 00 80 0f     ..?.......?.....
    55c8:	00 00 3f 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..?.......>.....
    55d8:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    55e8:	00 00 3e 00 00 00 80 0f 00 00 3e 00 00 00 80 0f     ..>.......>.....
    55f8:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 80 0f     ................
    5608:	00 00 00 00 00 00 80 0f 00 00 00 00 00 00 00 00     ................
    5618:	00 00 00 00 00 00 00 00 00 00 00 00 00 1b 00 00     ................
    5628:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80     ................
    5638:	ff ff ff 01 00 00 00 80 ff ff ff 07 00 00 00 80     ................
    5648:	ff ff ff 1f 00 00 00 80 ff ff ff 1f 00 00 00 80     ................
    5658:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    5668:	ff ff ff 3f 00 00 00 00 00 00 c0 3f 00 00 00 00     ...?.......?....
    5678:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    5688:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    5698:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    56a8:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 00     ...>.......>....
    56b8:	00 00 00 3e 00 00 00 00 00 00 00 3e 00 00 00 80     ...>.......>....
    56c8:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    56d8:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    56e8:	ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00 00 80     ...?.......?....
    56f8:	ff ff ff 3f 00 00 00 00 00 00 00 00 00 00 00 00     ...?............
    5708:	00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00     ................
    5718:	80 01 00 00 00 00 00 00 80 0f 00 00 00 00 00 00     ................
    5728:	80 ff 00 00 00 00 00 00 80 ff 07 00 00 00 00 00     ................
    5738:	80 ff 7f 00 00 00 00 00 80 ff ff 03 00 00 00 00     ................
    5748:	80 ff ff 1f 00 00 00 00 80 ff ff ff 01 00 00 00     ................
    5758:	00 f8 ff ff 0f 00 00 00 00 80 ff ff 3f 00 00 00     ............?...
    5768:	00 00 f8 ff 3f 00 00 00 00 00 80 ff 3f 00 00 00     ....?.......?...
    5778:	00 00 00 f8 3f 00 00 00 00 00 00 80 3f 00 00 00     ....?.......?...
    5788:	00 00 00 f0 3f 00 00 00 00 00 00 ff 3f 00 00 00     ....?.......?...
    5798:	00 00 f0 ff 3f 00 00 00 00 00 ff ff 3f 00 00 00     ....?.......?...
    57a8:	00 f0 ff ff 3f 00 00 00 00 ff ff ff 03 00 00 00     ....?...........
    57b8:	80 ff ff 7f 00 00 00 00 80 ff ff 07 00 00 00 00     ................
    57c8:	80 ff ff 00 00 00 00 00 80 ff 0f 00 00 00 00 00     ................
    57d8:	80 ff 01 00 00 00 00 00 80 3f 00 00 00 00 00 00     .........?......
    57e8:	80 03 00 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
    57f8:	00 80 00 00 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    5808:	00 80 ff 7f 00 00 00 00 00 80 ff ff 7f 00 00 00     ................
    5818:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    5828:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    5838:	00 00 00 c0 ff 3f 00 00 00 00 00 00 f0 3f 00 00     .....?.......?..
    5848:	00 00 00 80 ff 3f 00 00 00 00 00 f8 ff 3f 00 00     .....?.......?..
    5858:	00 00 80 ff ff 1f 00 00 00 00 80 ff ff 00 00 00     ................
    5868:	00 00 80 ff 07 00 00 00 00 00 80 ff 7f 00 00 00     ................
    5878:	00 00 80 ff ff 0f 00 00 00 00 00 fe ff 3f 00 00     .............?..
    5888:	00 00 00 c0 ff 3f 00 00 00 00 00 00 f8 3f 00 00     .....?.......?..
    5898:	00 00 00 00 fc 3f 00 00 00 00 f8 ff ff 3f 00 00     .....?.......?..
    58a8:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 3f 00 00     .....?.......?..
    58b8:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 03 00 00     .....?..........
    58c8:	00 80 ff ff 03 00 00 00 00 80 ff 03 00 00 00 00     ................
    58d8:	00 80 03 00 00 00 00 00 1c 00 00 00 00 00 00 00     ................
    58e8:	00 00 80 00 00 00 20 00 00 00 80 01 00 00 30 00     ...... .......0.
    58f8:	00 00 80 07 00 00 3c 00 00 00 80 0f 00 00 3e 00     ......<.......>.
    5908:	00 00 80 3f 00 80 3f 00 00 00 80 ff 00 e0 3f 00     ...?..?.......?.
    5918:	00 00 80 ff 01 f0 3f 00 00 00 80 ff 07 fc 3f 00     ......?.......?.
    5928:	00 00 00 fe 0f ff 1f 00 00 00 00 fc bf ff 07 00     ................
    5938:	00 00 00 f0 ff ff 01 00 00 00 00 c0 ff 7f 00 00     ................
    5948:	00 00 00 80 ff 1f 00 00 00 00 00 00 fe 07 00 00     ................
    5958:	00 00 00 00 ff 1f 00 00 00 00 00 80 ff 7f 00 00     ................
    5968:	00 00 00 e0 ff ff 01 00 00 00 00 f8 ff ff 03 00     ................
    5978:	00 00 00 fc 0f ff 0f 00 00 00 00 ff 07 fc 3f 00     ..............?.
    5988:	00 00 80 ff 01 f8 3f 00 00 00 80 ff 00 e0 3f 00     ......?.......?.
    5998:	00 00 80 3f 00 c0 3f 00 00 00 80 1f 00 00 3f 00     ...?..?.......?.
    59a8:	00 00 80 07 00 00 3c 00 00 00 80 03 00 00 38 00     ......<.......8.
    59b8:	00 00 80 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
    59c8:	00 1d 00 00 00 00 00 00 00 00 00 80 01 00 00 00     ................
    59d8:	00 00 00 80 0f 00 00 00 00 00 00 80 7f 00 00 00     ................
    59e8:	00 00 00 80 ff 01 00 00 00 00 00 80 ff 0f 00 00     ................
    59f8:	00 00 00 80 ff 7f 00 00 00 00 00 80 ff ff 03 00     ................
    5a08:	00 03 00 80 ff ff 1f 00 e0 03 00 00 fe ff 7f 00     ................
    5a18:	f8 03 00 00 f0 ff ff 03 ff 03 00 00 80 ff ff df     ................
    5a28:	ff 03 00 00 00 fc ff ff ff 03 00 00 00 e0 ff ff     ................
    5a38:	ff 01 00 00 00 00 ff ff 7f 00 00 00 00 00 f8 ff     ................
    5a48:	0f 00 00 00 00 00 fe ff 01 00 00 00 00 c0 ff 3f     ...............?
    5a58:	00 00 00 00 00 f8 ff 07 00 00 00 00 00 ff ff 01     ................
    5a68:	00 00 00 00 e0 ff 3f 00 00 00 00 00 fc ff 07 00     ......?.........
    5a78:	00 00 00 80 ff ff 00 00 00 00 00 80 ff 3f 00 00     .............?..
    5a88:	00 00 00 80 ff 07 00 00 00 00 00 80 ff 00 00 00     ................
    5a98:	00 00 00 80 1f 00 00 00 00 00 00 80 03 00 00 00     ................
    5aa8:	00 00 00 80 00 00 00 00 00 00 1a 00 00 00 00 00     ................
    5ab8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5ac8:	00 00 00 00 80 0f 00 00 3c 00 00 00 80 0f 00 00     ........<.......
    5ad8:	3e 00 00 00 80 0f 00 80 3f 00 00 00 80 0f 00 e0     >.......?.......
    5ae8:	3f 00 00 00 80 0f 00 f0 3f 00 00 00 80 0f 00 fc     ?.......?.......
    5af8:	3f 00 00 00 80 0f 00 fe 3f 00 00 00 80 0f 80 ff     ?.......?.......
    5b08:	3f 00 00 00 80 0f c0 ff 3f 00 00 00 80 0f f0 ff     ?.......?.......
    5b18:	3f 00 00 00 80 0f fc 7f 3e 00 00 00 80 0f fe 3f     ?.......>......?
    5b28:	3e 00 00 00 80 8f ff 0f 3e 00 00 00 80 cf ff 07     >.......>.......
    5b38:	3e 00 00 00 80 ff ff 01 3e 00 00 00 80 ff 7f 00     >.......>.......
    5b48:	3e 00 00 00 80 ff 3f 00 3e 00 00 00 80 ff 0f 00     >.....?.>.......
    5b58:	3e 00 00 00 80 ff 07 00 3e 00 00 00 80 ff 01 00     >.......>.......
    5b68:	3e 00 00 00 80 7f 00 00 3e 00 00 00 80 3f 00 00     >.......>....?..
    5b78:	3e 00 00 00 80 0f 00 00 3e 00 00 00 00 00 00 00     >.......>.......
    5b88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5b98:	00 00 00 18 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5ba8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5bb8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    5bc8:	00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 70     .......0.......p
    5bd8:	00 00 00 00 00 00 00 f8 00 00 00 00 00 00 00 fe     ................
    5be8:	01 00 00 00 00 ff ff ff ff ff 07 00 c0 ff ff ff     ................
    5bf8:	ff ff 1f 00 f0 ff ff df ff ff 3f 00 f8 ff ff 8f     ..........?.....
    5c08:	ff ff 7f 00 fc ff ff 07 ff ff ff 00 fc ff ff 03     ................
    5c18:	fe ff ff 01 fe ff ff 00 f8 ff ff 01 7e 00 00 00     ............~...
    5c28:	00 00 e0 01 1f 00 00 00 00 00 c0 03 0f 00 00 00     ................
    5c38:	00 00 80 03 07 00 00 00 00 00 80 03 07 00 00 00     ................
    5c48:	00 00 80 03 07 00 00 00 00 00 80 03 07 00 00 00     ................
    5c58:	00 00 80 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c68:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c78:	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00     ................
    5c88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c98:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5ca8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cb8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cc8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cd8:	00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
    5ce8:	ff ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff ff     ................
    5cf8:	ff ff ff ff 03 ff ff ff ff ff ff ff 03 ff ff ff     ................
    5d08:	ff ff ff ff 03 00 00 00 00 00 00 00 00 00 00 00     ................
    5d18:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d28:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d68:	00 00 00 00 00 18 00 00 00 00 00 00 00 00 00 00     ................
    5d78:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d88:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00     ................
    5d98:	00 00 00 00 80 03 07 00 00 00 00 00 80 03 07 00     ................
    5da8:	00 00 00 00 80 03 07 00 00 00 00 00 80 03 0f 00     ................
    5db8:	00 00 00 00 80 03 1f 00 00 00 00 00 c0 03 3e 00     ..............>.
    5dc8:	00 00 00 00 e0 01 fe 01 00 00 00 00 fc 01 fc ff     ................
    5dd8:	ff 01 fe ff ff 01 fc ff ff 07 ff ff ff 00 f8 ff     ................
    5de8:	ff 8f ff ff ff 00 f0 ff ff cf ff ff 7f 00 e0 ff     ................
    5df8:	ff df ff ff 3f 00 80 ff ff ff ff ff 0f 00 00 00     ....?...........
    5e08:	00 ff 03 00 00 00 00 00 00 fc 00 00 00 00 00 00     ................
    5e18:	00 78 00 00 00 00 00 00 00 30 00 00 00 00 00 00     .x.......0......
    5e28:	00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00     . ..............
    5e38:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5e48:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00     ................
    5e58:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5e68:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5e78:	00 00 3c 00 00 00 00 00 00 00 3f 00 00 00 00 00     ..<.......?.....
    5e88:	00 80 3f 00 00 00 00 00 00 c0 3f 00 00 00 00 00     ..?.......?.....
    5e98:	00 c0 07 00 00 00 00 00 00 c0 01 00 00 00 00 00     ................
    5ea8:	00 c0 01 00 00 00 00 00 00 c0 01 00 00 00 00 00     ................
    5eb8:	00 c0 03 00 00 00 00 00 00 c0 07 00 00 00 00 00     ................
    5ec8:	00 80 0f 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    5ed8:	00 00 3c 00 00 00 00 00 00 00 38 00 00 00 00 00     ..<.......8.....
    5ee8:	00 00 38 00 00 00 00 00 00 00 38 00 00 00 00 00     ..8.......8.....
    5ef8:	00 00 3c 00 00 00 00 00 00 c0 3f 00 00 00 00 00     ..<.......?.....
    5f08:	00 c0 1f 00 00 00 00 00 00 c0 0f 00 00 00 00 00     ................
    5f18:	00 c0 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5f28:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5f38:	00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 00     ................
    5f48:	00 fe ff ff ff 1f 00 00 00 fe ff ff ff 1f 00 00     ................
    5f58:	00 fe ff ff ff 1f 00 00 00 fe ff ff ff 1f 00 00     ................
    5f68:	00 0e 00 00 00 1c 00 00 00 0e 00 00 00 1c 00 00     ................
    5f78:	00 0e 00 00 00 1c 00 00 00 0e 00 00 00 1c 00 00     ................
    5f88:	00 0e 00 00 00 1c 00 00 00 fe ff ff ff 1f 00 00     ................
    5f98:	00 fe ff ff ff 1f 00 00 00 fe ff ff ff 1f 00 00     ................
    5fa8:	00 fe ff ff ff 1f 00 00 00 00 00 00 00 00 00 00     ................
    5fb8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5fc8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5fd8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5fe8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5ff8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6008:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6018:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6028:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
    6038:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
    6048:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
    6058:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
    6068:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
    6078:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
    6088:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
    6098:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
    60a8:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
    60b8:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
    60c8:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
    60d8:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
    60e8:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
    60f8:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
    6108:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
    6118:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

00006122 <__ctors_end>:
    6122:	11 24       	eor	r1, r1
    6124:	1f be       	out	0x3f, r1	; 63
    6126:	cf ef       	ldi	r28, 0xFF	; 255
    6128:	d0 e2       	ldi	r29, 0x20	; 32
    612a:	de bf       	out	0x3e, r29	; 62
    612c:	cd bf       	out	0x3d, r28	; 61

0000612e <__do_copy_data>:
    612e:	11 e0       	ldi	r17, 0x01	; 1
    6130:	a0 e0       	ldi	r26, 0x00	; 0
    6132:	b1 e0       	ldi	r27, 0x01	; 1
    6134:	ec e4       	ldi	r30, 0x4C	; 76
    6136:	f4 e9       	ldi	r31, 0x94	; 148
    6138:	00 e0       	ldi	r16, 0x00	; 0
    613a:	0b bf       	out	0x3b, r16	; 59
    613c:	02 c0       	rjmp	.+4      	; 0x6142 <__do_copy_data+0x14>
    613e:	07 90       	elpm	r0, Z+
    6140:	0d 92       	st	X+, r0
    6142:	aa 34       	cpi	r26, 0x4A	; 74
    6144:	b1 07       	cpc	r27, r17
    6146:	d9 f7       	brne	.-10     	; 0x613e <__do_copy_data+0x10>

00006148 <__do_clear_bss>:
    6148:	14 e0       	ldi	r17, 0x04	; 4
    614a:	aa e4       	ldi	r26, 0x4A	; 74
    614c:	b1 e0       	ldi	r27, 0x01	; 1
    614e:	01 c0       	rjmp	.+2      	; 0x6152 <.do_clear_bss_start>

00006150 <.do_clear_bss_loop>:
    6150:	1d 92       	st	X+, r1

00006152 <.do_clear_bss_start>:
    6152:	a9 35       	cpi	r26, 0x59	; 89
    6154:	b1 07       	cpc	r27, r17
    6156:	e1 f7       	brne	.-8      	; 0x6150 <.do_clear_bss_loop>
    6158:	96 d0       	rcall	.+300    	; 0x6286 <main>
    615a:	0c 94 24 4a 	jmp	0x9448	; 0x9448 <_exit>

0000615e <__bad_interrupt>:
    615e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006162 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{

}
    6162:	08 95       	ret

00006164 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{

}
    6164:	08 95       	ret

00006166 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    6166:	80 91 0e 01 	lds	r24, 0x010E
    616a:	90 91 0f 01 	lds	r25, 0x010F
    616e:	00 97       	sbiw	r24, 0x00	; 0
    6170:	29 f0       	breq	.+10     	; 0x617c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    6172:	01 97       	sbiw	r24, 0x01	; 1
    6174:	90 93 0f 01 	sts	0x010F, r25
    6178:	80 93 0e 01 	sts	0x010E, r24
    617c:	08 95       	ret

0000617e <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{	
    617e:	c9 01       	movw	r24, r18
	uint8_t* Data = (uint8_t*) ReportData;
	receive_packet(Data);
    6180:	0c 94 6b 3a 	jmp	0x74d6	; 0x74d6 <receive_packet>

00006184 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    6184:	cf 92       	push	r12
    6186:	df 92       	push	r13
    6188:	ef 92       	push	r14
    618a:	ff 92       	push	r15
    618c:	0f 93       	push	r16
    618e:	1f 93       	push	r17
    6190:	79 01       	movw	r14, r18
    6192:	68 01       	movw	r12, r16
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;
	uint16_t extern_switch_D = get_extern_switch_D();
    6194:	db d0       	rcall	.+438    	; 0x634c <get_extern_switch_D>
    6196:	08 2f       	mov	r16, r24
    6198:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t extern_switch_F = get_extern_switch_F();
    619a:	db d0       	rcall	.+438    	; 0x6352 <get_extern_switch_F>

	uint16_t switch_map = 0x1F & extern_switch_D;
	switch_map |= (extern_switch_F & 0x0F) << 5;
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	8f 70       	andi	r24, 0x0F	; 15
    61a0:	90 70       	andi	r25, 0x00	; 0
    61a2:	55 e0       	ldi	r21, 0x05	; 5
    61a4:	88 0f       	add	r24, r24
    61a6:	99 1f       	adc	r25, r25
    61a8:	5a 95       	dec	r21
    61aa:	e1 f7       	brne	.-8      	; 0x61a4 <CALLBACK_HID_Device_CreateHIDReport+0x20>
    61ac:	98 01       	movw	r18, r16
    61ae:	20 74       	andi	r18, 0x40	; 64
    61b0:	30 70       	andi	r19, 0x00	; 0
    61b2:	43 e0       	ldi	r20, 0x03	; 3
    61b4:	22 0f       	add	r18, r18
    61b6:	33 1f       	adc	r19, r19
    61b8:	4a 95       	dec	r20
    61ba:	e1 f7       	brne	.-8      	; 0x61b4 <CALLBACK_HID_Device_CreateHIDReport+0x30>
    61bc:	82 2b       	or	r24, r18
    61be:	93 2b       	or	r25, r19
{
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;
	uint16_t extern_switch_D = get_extern_switch_D();
	uint16_t extern_switch_F = get_extern_switch_F();

	uint16_t switch_map = 0x1F & extern_switch_D;
    61c0:	0f 71       	andi	r16, 0x1F	; 31
    61c2:	10 70       	andi	r17, 0x00	; 0
	switch_map |= (extern_switch_F & 0x0F) << 5;
	switch_map |= (extern_switch_D & (1 << 6)) << 3;

	JoystickReport->Button = switch_map;
    61c4:	80 2b       	or	r24, r16
    61c6:	91 2b       	or	r25, r17
    61c8:	f7 01       	movw	r30, r14
    61ca:	91 83       	std	Z+1, r25	; 0x01
    61cc:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_JoystickReport_Data_t);
    61ce:	82 e0       	ldi	r24, 0x02	; 2
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	f6 01       	movw	r30, r12
    61d4:	91 83       	std	Z+1, r25	; 0x01
    61d6:	80 83       	st	Z, r24
	return false;
}
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	1f 91       	pop	r17
    61dc:	0f 91       	pop	r16
    61de:	ff 90       	pop	r15
    61e0:	ef 90       	pop	r14
    61e2:	df 90       	pop	r13
    61e4:	cf 90       	pop	r12
    61e6:	08 95       	ret

000061e8 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
    61e8:	80 e0       	ldi	r24, 0x00	; 0
    61ea:	91 e0       	ldi	r25, 0x01	; 1
    61ec:	0c 94 44 40 	jmp	0x8088	; 0x8088 <HID_Device_ProcessControlRequest>

000061f0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
    61f0:	80 e0       	ldi	r24, 0x00	; 0
    61f2:	91 e0       	ldi	r25, 0x01	; 1
    61f4:	0e 94 23 40 	call	0x8046	; 0x8046 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    61f8:	e2 ee       	ldi	r30, 0xE2	; 226
    61fa:	f0 e0       	ldi	r31, 0x00	; 0
    61fc:	80 81       	ld	r24, Z
    61fe:	84 60       	ori	r24, 0x04	; 4
    6200:	80 83       	st	Z, r24

	USB_Device_EnableSOFEvents();

}
    6202:	08 95       	ret

00006204 <SetupUSB>:

void SetupUSB(void)
{
	#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    6204:	84 b7       	in	r24, 0x34	; 52
    6206:	87 7f       	andi	r24, 0xF7	; 247
    6208:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    620a:	88 e1       	ldi	r24, 0x18	; 24
    620c:	0f b6       	in	r0, 0x3f	; 63
    620e:	f8 94       	cli
    6210:	80 93 60 00 	sts	0x0060, r24
    6214:	10 92 60 00 	sts	0x0060, r1
    6218:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
    621a:	80 e0       	ldi	r24, 0x00	; 0
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	20 e8       	ldi	r18, 0x80	; 128
    6220:	0f b6       	in	r0, 0x3f	; 63
    6222:	f8 94       	cli
    6224:	20 93 61 00 	sts	0x0061, r18
    6228:	80 93 61 00 	sts	0x0061, r24
    622c:	0f be       	out	0x3f, r0	; 63
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	USB_Init();
    622e:	0c 94 e3 3c 	jmp	0x79c6	; 0x79c6 <USB_Init>

00006232 <collect_delta>:
	USB_USBTask();
	return state;
}


int collect_delta(int state) {
    6232:	ef 92       	push	r14
    6234:	ff 92       	push	r15
    6236:	0f 93       	push	r16
    6238:	1f 93       	push	r17
    623a:	f8 2e       	mov	r15, r24
    623c:	e9 2e       	mov	r14, r25
	position += os_enc_delta();
    623e:	00 91 a9 03 	lds	r16, 0x03A9
    6242:	10 91 aa 03 	lds	r17, 0x03AA
    6246:	b2 d0       	rcall	.+356    	; 0x63ac <os_enc_delta>
    6248:	99 27       	eor	r25, r25
    624a:	87 fd       	sbrc	r24, 7
    624c:	90 95       	com	r25
    624e:	80 0f       	add	r24, r16
    6250:	91 1f       	adc	r25, r17
    6252:	90 93 aa 03 	sts	0x03AA, r25
    6256:	80 93 a9 03 	sts	0x03A9, r24
	return state;
}
    625a:	8f 2d       	mov	r24, r15
    625c:	9e 2d       	mov	r25, r14
    625e:	1f 91       	pop	r17
    6260:	0f 91       	pop	r16
    6262:	ff 90       	pop	r15
    6264:	ef 90       	pop	r14
    6266:	08 95       	ret

00006268 <send_usb>:
    for(;;){}
}


int send_usb(int state)
{
    6268:	0f 93       	push	r16
    626a:	1f 93       	push	r17
    626c:	18 2f       	mov	r17, r24
    626e:	09 2f       	mov	r16, r25
	HID_Device_USBTask(&Joystick_HID_Interface);
    6270:	80 e0       	ldi	r24, 0x00	; 0
    6272:	91 e0       	ldi	r25, 0x01	; 1
    6274:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <HID_Device_USBTask>
	USB_USBTask();
    6278:	0e 94 3f 3f 	call	0x7e7e	; 0x7e7e <USB_USBTask>
	return state;
}
    627c:	81 2f       	mov	r24, r17
    627e:	90 2f       	mov	r25, r16
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	08 95       	ret

00006286 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    os_init();
    6286:	59 d0       	rcall	.+178    	; 0x633a <os_init>
	SetupUSB();
    6288:	bd df       	rcall	.-134    	; 0x6204 <SetupUSB>

	//WILL CHANGE//
	init_display_controller();
    628a:	0e 94 17 3a 	call	0x742e	; 0x742e <init_display_controller>
	init_display_laptimes();
    628e:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <init_display_laptimes>


    os_add_task( collect_delta,   500, 1);
    6292:	89 e1       	ldi	r24, 0x19	; 25
    6294:	91 e3       	ldi	r25, 0x31	; 49
    6296:	44 ef       	ldi	r20, 0xF4	; 244
    6298:	51 e0       	ldi	r21, 0x01	; 1
    629a:	60 e0       	ldi	r22, 0x00	; 0
    629c:	70 e0       	ldi	r23, 0x00	; 0
    629e:	21 e0       	ldi	r18, 0x01	; 1
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	0c d2       	rcall	.+1048   	; 0x66bc <os_add_task>
	os_add_task( send_usb, 2, 1);
    62a4:	84 e3       	ldi	r24, 0x34	; 52
    62a6:	91 e3       	ldi	r25, 0x31	; 49
    62a8:	42 e0       	ldi	r20, 0x02	; 2
    62aa:	50 e0       	ldi	r21, 0x00	; 0
    62ac:	60 e0       	ldi	r22, 0x00	; 0
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	21 e0       	ldi	r18, 0x01	; 1
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	03 d2       	rcall	.+1030   	; 0x66bc <os_add_task>


    sei();
    62b6:	78 94       	sei
    62b8:	ff cf       	rjmp	.-2      	; 0x62b8 <main+0x32>

000062ba <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    62ba:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    62bc:	93 30       	cpi	r25, 0x03	; 3
    62be:	b1 f0       	breq	.+44     	; 0x62ec <CALLBACK_USB_GetDescriptor+0x32>
    62c0:	94 30       	cpi	r25, 0x04	; 4
    62c2:	28 f4       	brcc	.+10     	; 0x62ce <CALLBACK_USB_GetDescriptor+0x14>
    62c4:	91 30       	cpi	r25, 0x01	; 1
    62c6:	41 f0       	breq	.+16     	; 0x62d8 <CALLBACK_USB_GetDescriptor+0x1e>
    62c8:	92 30       	cpi	r25, 0x02	; 2
    62ca:	79 f5       	brne	.+94     	; 0x632a <CALLBACK_USB_GetDescriptor+0x70>
    62cc:	0a c0       	rjmp	.+20     	; 0x62e2 <CALLBACK_USB_GetDescriptor+0x28>
    62ce:	91 32       	cpi	r25, 0x21	; 33
    62d0:	11 f1       	breq	.+68     	; 0x6316 <CALLBACK_USB_GetDescriptor+0x5c>
    62d2:	92 32       	cpi	r25, 0x22	; 34
    62d4:	51 f5       	brne	.+84     	; 0x632a <CALLBACK_USB_GetDescriptor+0x70>
    62d6:	24 c0       	rjmp	.+72     	; 0x6320 <CALLBACK_USB_GetDescriptor+0x66>
    62d8:	ef eb       	ldi	r30, 0xBF	; 191
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	22 e1       	ldi	r18, 0x12	; 18
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	28 c0       	rjmp	.+80     	; 0x6332 <CALLBACK_USB_GetDescriptor+0x78>
    62e2:	e1 ed       	ldi	r30, 0xD1	; 209
    62e4:	f0 e0       	ldi	r31, 0x00	; 0
    62e6:	22 e2       	ldi	r18, 0x22	; 34
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	23 c0       	rjmp	.+70     	; 0x6332 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    62ec:	81 30       	cpi	r24, 0x01	; 1
    62ee:	49 f0       	breq	.+18     	; 0x6302 <CALLBACK_USB_GetDescriptor+0x48>
    62f0:	81 30       	cpi	r24, 0x01	; 1
    62f2:	18 f0       	brcs	.+6      	; 0x62fa <CALLBACK_USB_GetDescriptor+0x40>
    62f4:	82 30       	cpi	r24, 0x02	; 2
    62f6:	c9 f4       	brne	.+50     	; 0x632a <CALLBACK_USB_GetDescriptor+0x70>
    62f8:	0a c0       	rjmp	.+20     	; 0x630e <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    62fa:	e3 ef       	ldi	r30, 0xF3	; 243
    62fc:	f0 e0       	ldi	r31, 0x00	; 0
    62fe:	84 91       	lpm	r24, Z+
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    6302:	e7 ef       	ldi	r30, 0xF7	; 247
    6304:	f0 e0       	ldi	r31, 0x00	; 0
    6306:	84 91       	lpm	r24, Z+
    6308:	28 2f       	mov	r18, r24
    630a:	30 e0       	ldi	r19, 0x00	; 0
    630c:	12 c0       	rjmp	.+36     	; 0x6332 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    630e:	e3 e1       	ldi	r30, 0x13	; 19
    6310:	f1 e0       	ldi	r31, 0x01	; 1
    6312:	84 91       	lpm	r24, Z+
    6314:	f9 cf       	rjmp	.-14     	; 0x6308 <CALLBACK_USB_GetDescriptor+0x4e>
    6316:	e3 ee       	ldi	r30, 0xE3	; 227
    6318:	f0 e0       	ldi	r31, 0x00	; 0
    631a:	29 e0       	ldi	r18, 0x09	; 9
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	09 c0       	rjmp	.+18     	; 0x6332 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    6320:	e8 e9       	ldi	r30, 0x98	; 152
    6322:	f0 e0       	ldi	r31, 0x00	; 0
    6324:	27 e2       	ldi	r18, 0x27	; 39
    6326:	30 e0       	ldi	r19, 0x00	; 0
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <CALLBACK_USB_GetDescriptor+0x78>
    632a:	e0 e0       	ldi	r30, 0x00	; 0
    632c:	f0 e0       	ldi	r31, 0x00	; 0
    632e:	20 e0       	ldi	r18, 0x00	; 0
    6330:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
    6332:	ed 93       	st	X+, r30
    6334:	fc 93       	st	X, r31
	return Size;
}
    6336:	c9 01       	movw	r24, r18
    6338:	08 95       	ret

0000633a <os_init>:
#include "rios.h"
#include "ruota.h"

void os_init(void) {
    /* 8MHz clock, no prescaling (DS, p. 48) */
    CLKPR = (1 << CLKPCE);
    633a:	e1 e6       	ldi	r30, 0x61	; 97
    633c:	f0 e0       	ldi	r31, 0x00	; 0
    633e:	80 e8       	ldi	r24, 0x80	; 128
    6340:	80 83       	st	Z, r24
    CLKPR = 0;
    6342:	10 82       	st	Z, r1

    DDRB  |=  _BV(PB7);  	 /* LED as output */
    6344:	27 9a       	sbi	0x04, 7	; 4

    init_debug_uart1();
    init_lcd();
    6346:	6d d3       	rcall	.+1754   	; 0x6a22 <init_lcd>
    os_init_scheduler();
    6348:	ad d1       	rcall	.+858    	; 0x66a4 <os_init_scheduler>
    os_init_ruota();
}
    634a:	bb c0       	rjmp	.+374    	; 0x64c2 <os_init_ruota>

0000634c <get_extern_switch_D>:
int print_switches(int state);
void init_external_switches(void);

uint8_t get_extern_switch_D(void)
{
   return extern_switch_state_D;
    634c:	80 91 ae 03 	lds	r24, 0x03AE
}
    6350:	08 95       	ret

00006352 <get_extern_switch_F>:

uint8_t get_extern_switch_F(void)
{
   return extern_switch_state_F;
    6352:	80 91 b0 03 	lds	r24, 0x03B0
}
    6356:	08 95       	ret

00006358 <init_external_switches>:

void init_external_switches(void)
{
   /* Init external switches */
   /* Port D */
   DDRD &= ~(_BV(DDD6) | _BV(DDD4) | _BV(DDD3) | _BV(DDD2) | _BV(DDD1) | _BV(DDD0));
    6358:	8a b1       	in	r24, 0x0a	; 10
    635a:	80 7a       	andi	r24, 0xA0	; 160
    635c:	8a b9       	out	0x0a, r24	; 10
   PORTD |= _BV(PORTD6) |_BV(PORTD4) | _BV(PORTD3) | _BV(PORTD2) | _BV(PORTD1) | _BV(PORTD0);
    635e:	8b b1       	in	r24, 0x0b	; 11
    6360:	8f 65       	ori	r24, 0x5F	; 95
    6362:	8b b9       	out	0x0b, r24	; 11

   /* Port F */
   DDRF &= ~(_BV(DDF3) | _BV(DDF2) | _BV(DDF1) | _BV(DDF0));
    6364:	80 b3       	in	r24, 0x10	; 16
    6366:	80 7f       	andi	r24, 0xF0	; 240
    6368:	80 bb       	out	0x10, r24	; 16
   PORTF |= _BV(PORTF3) | _BV(PORTF2) | _BV(PORTF1) | _BV(PORTF0);
    636a:	81 b3       	in	r24, 0x11	; 17
    636c:	8f 60       	ori	r24, 0x0F	; 15
    636e:	81 bb       	out	0x11, r24	; 17
}
    6370:	08 95       	ret

00006372 <scan_encoder>:


}


int scan_encoder(int state) {
    6372:	48 2f       	mov	r20, r24
     static int8_t last;
     int8_t new, diff;
     uint8_t wheel;

     cli();
    6374:	f8 94       	cli
     wheel = PINE;
    6376:	8c b1       	in	r24, 0x0c	; 12
     new = 0;
     if( wheel  & _BV(ROTB) ) new = 3;
    6378:	85 fd       	sbrc	r24, 5
    637a:	02 c0       	rjmp	.+4      	; 0x6380 <scan_encoder+0xe>
    637c:	30 e0       	ldi	r19, 0x00	; 0
    637e:	01 c0       	rjmp	.+2      	; 0x6382 <scan_encoder+0x10>
    6380:	33 e0       	ldi	r19, 0x03	; 3
     if( wheel  & _BV(ROTA) )
    6382:	84 ff       	sbrs	r24, 4
    6384:	02 c0       	rjmp	.+4      	; 0x638a <scan_encoder+0x18>
	 new ^= 1;		        	/* convert gray to binary */
    6386:	81 e0       	ldi	r24, 0x01	; 1
    6388:	38 27       	eor	r19, r24
     diff = last - new;			/* difference last - new */
    638a:	20 91 53 01 	lds	r18, 0x0153
    638e:	23 1b       	sub	r18, r19
     if( diff & 1 ){			/* bit 0 = value (1) */
    6390:	20 ff       	sbrs	r18, 0
    6392:	09 c0       	rjmp	.+18     	; 0x63a6 <scan_encoder+0x34>
	     last = new;		       	/* store new as next last */
    6394:	30 93 53 01 	sts	0x0153, r19
	     delta += (diff & 2) - 1;	/* bit 1 = direction (+/-) */
    6398:	80 91 af 03 	lds	r24, 0x03AF
    639c:	81 50       	subi	r24, 0x01	; 1
    639e:	22 70       	andi	r18, 0x02	; 2
    63a0:	82 0f       	add	r24, r18
    63a2:	80 93 af 03 	sts	0x03AF, r24
     }
     sei();
    63a6:	78 94       	sei
     
     return state;
}
    63a8:	84 2f       	mov	r24, r20
    63aa:	08 95       	ret

000063ac <os_enc_delta>:
   -> call frequently enough to avoid overflow of delta
*/
int8_t os_enc_delta() {
    int8_t val;

    cli();
    63ac:	f8 94       	cli
    val = delta;
    63ae:	80 91 af 03 	lds	r24, 0x03AF
    delta &= 1;
    63b2:	90 91 af 03 	lds	r25, 0x03AF
    63b6:	91 70       	andi	r25, 0x01	; 1
    63b8:	90 93 af 03 	sts	0x03AF, r25
    sei();
    63bc:	78 94       	sei

    return val >> 1;
}
    63be:	85 95       	asr	r24
    63c0:	08 95       	ret

000063c2 <scan_switches>:
      display_string_xy(printstr, 50, y);
}



int scan_switches(int state) {
    63c2:	ac 01       	movw	r20, r24
  static uint8_t ct0, ct1, rpt;
  uint8_t i;
 
  cli();
    63c4:	f8 94       	cli

  /* 
     Overlay port E for central button of switch wheel and Port B
     for SD card detection switch:
  */ 
  i = switch_state ^ ~( (PINC|_BV(SWC)|_BV(OS_CD))	\
    63c6:	30 91 ad 03 	lds	r19, 0x03AD
    63ca:	86 b1       	in	r24, 0x06	; 6
    63cc:	2c b1       	in	r18, 0x0c	; 12
    63ce:	93 b1       	in	r25, 0x03	; 3
    63d0:	2f 67       	ori	r18, 0x7F	; 127
    63d2:	80 6c       	ori	r24, 0xC0	; 192
    63d4:	28 23       	and	r18, r24
    63d6:	9f 6b       	ori	r25, 0xBF	; 191
    63d8:	29 23       	and	r18, r25
    63da:	20 95       	com	r18
    63dc:	23 27       	eor	r18, r19
                   & (PINE|~_BV(SWC)) \
                   & (PINB|~_BV(OS_CD)));  /* switch has changed */
 // printByte("i: ", i, 20);
  ct0 = ~( ct0 & i ); 
    63de:	80 91 52 01 	lds	r24, 0x0152
    63e2:	82 23       	and	r24, r18
    63e4:	80 95       	com	r24
    63e6:	80 93 52 01 	sts	0x0152, r24
  /* reset or count ct0 */
  ct1 = ct0 ^ (ct1 & i);                   /* reset or count ct1 */
    63ea:	90 91 51 01 	lds	r25, 0x0151
    63ee:	92 23       	and	r25, r18
    63f0:	98 27       	eor	r25, r24
    63f2:	90 93 51 01 	sts	0x0151, r25
 // printByte("ct1: ", ct1, 60);   
  i &= ct0 & ct1;                          /* count until roll over ? */
    63f6:	82 23       	and	r24, r18
    63f8:	89 23       	and	r24, r25
//  printByte("i: ", i, 80);   
  switch_state ^= i;                       /* then toggle debounced state */
    63fa:	90 91 ad 03 	lds	r25, 0x03AD
    63fe:	98 27       	eor	r25, r24
    6400:	90 93 ad 03 	sts	0x03AD, r25
  //  printByte("switch state: ", switch_state, 100);   
  switch_press |= switch_state & i;        /* 0->1: key press detect */
    6404:	20 91 ab 03 	lds	r18, 0x03AB
    6408:	90 91 ad 03 	lds	r25, 0x03AD
    640c:	89 23       	and	r24, r25
    640e:	82 2b       	or	r24, r18
    6410:	80 93 ab 03 	sts	0x03AB, r24
 
  if( (switch_state & ALL_SWITCHES) == 0 )     /* check repeat function */
    6414:	80 91 ad 03 	lds	r24, 0x03AD
    6418:	8c 7f       	andi	r24, 0xFC	; 252
    641a:	19 f4       	brne	.+6      	; 0x6422 <scan_switches+0x60>
     rpt = REPEAT_START;                 /* start delay */
    641c:	8c e3       	ldi	r24, 0x3C	; 60
    641e:	80 93 50 01 	sts	0x0150, r24
  if( --rpt == 0 ){
    6422:	80 91 50 01 	lds	r24, 0x0150
    6426:	81 50       	subi	r24, 0x01	; 1
    6428:	80 93 50 01 	sts	0x0150, r24
    642c:	88 23       	and	r24, r24
    642e:	59 f4       	brne	.+22     	; 0x6446 <scan_switches+0x84>
    rpt = REPEAT_NEXT;                   /* repeat delay */
    6430:	8a e0       	ldi	r24, 0x0A	; 10
    6432:	80 93 50 01 	sts	0x0150, r24
    switch_rpt |= switch_state & ALL_SWITCHES;
    6436:	90 91 ac 03 	lds	r25, 0x03AC
    643a:	80 91 ad 03 	lds	r24, 0x03AD
    643e:	8c 7f       	andi	r24, 0xFC	; 252
    6440:	89 2b       	or	r24, r25
    6442:	80 93 ac 03 	sts	0x03AC, r24
   /* EXTERNAL SWITCHES PORTD */

   static uint8_t ct2, ct3;
   uint8_t state_changed_D;
   
   state_changed_D = extern_switch_state_D ^ ~(PIND);
    6446:	80 91 ae 03 	lds	r24, 0x03AE
    644a:	29 b1       	in	r18, 0x09	; 9
    644c:	20 95       	com	r18
    644e:	28 27       	eor	r18, r24
   ct2 = ~(ct2 & state_changed_D);
    6450:	80 91 4f 01 	lds	r24, 0x014F
    6454:	82 23       	and	r24, r18
    6456:	80 95       	com	r24
    6458:	80 93 4f 01 	sts	0x014F, r24
   ct3 = ct2 ^ (ct3 & state_changed_D);
    645c:	90 91 4e 01 	lds	r25, 0x014E
    6460:	92 23       	and	r25, r18
    6462:	98 27       	eor	r25, r24
    6464:	90 93 4e 01 	sts	0x014E, r25
   state_changed_D &= ct2 & ct3;
    6468:	82 23       	and	r24, r18
   extern_switch_state_D ^= state_changed_D;
    646a:	20 91 ae 03 	lds	r18, 0x03AE
    646e:	89 23       	and	r24, r25
    6470:	82 27       	eor	r24, r18
    6472:	80 93 ae 03 	sts	0x03AE, r24
   /* EXTERNAL SWITCHES PORTF */

   static uint8_t ct4, ct5;
   uint8_t state_changed_F;
   
   state_changed_F = extern_switch_state_F ^ ~(PINF);
    6476:	80 91 b0 03 	lds	r24, 0x03B0
    647a:	2f b1       	in	r18, 0x0f	; 15
    647c:	20 95       	com	r18
    647e:	28 27       	eor	r18, r24
   ct4 = ~(ct4 & state_changed_F);
    6480:	80 91 4d 01 	lds	r24, 0x014D
    6484:	82 23       	and	r24, r18
    6486:	80 95       	com	r24
    6488:	80 93 4d 01 	sts	0x014D, r24
   ct5 = ct4 ^ (ct5 & state_changed_F);
    648c:	90 91 4c 01 	lds	r25, 0x014C
    6490:	92 23       	and	r25, r18
    6492:	98 27       	eor	r25, r24
    6494:	90 93 4c 01 	sts	0x014C, r25
   state_changed_F &= ct4 & ct5;
    6498:	82 23       	and	r24, r18
   extern_switch_state_F ^= state_changed_F;
    649a:	20 91 b0 03 	lds	r18, 0x03B0
    649e:	89 23       	and	r24, r25
    64a0:	82 27       	eor	r24, r18
    64a2:	80 93 b0 03 	sts	0x03B0, r24
   
  sei();
    64a6:	78 94       	sei
  
  return state;
}
    64a8:	ca 01       	movw	r24, r20
    64aa:	08 95       	ret

000064ac <get_switch_press>:
/*
   Check if a key has been pressed
   Each pressed key is reported only once.
*/
uint8_t get_switch_press( uint8_t switch_mask ) {
  cli();                         /* read and clear atomic! */
    64ac:	f8 94       	cli
  switch_mask &= switch_press;         /* read key(s) */
    64ae:	90 91 ab 03 	lds	r25, 0x03AB
    64b2:	89 23       	and	r24, r25
  switch_press ^= switch_mask;         /* clear key(s) */
    64b4:	90 91 ab 03 	lds	r25, 0x03AB
    64b8:	98 27       	eor	r25, r24
    64ba:	90 93 ab 03 	sts	0x03AB, r25
  sei();
    64be:	78 94       	sei
  return switch_mask;
}
    64c0:	08 95       	ret

000064c2 <os_init_ruota>:
}

void os_init_ruota(void) {

    /* Configure I/O Ports */
	DDRE &= ~_BV(ROTA) & ~_BV(ROTB);  /* Rot. Encoder inputs */
    64c2:	8d b1       	in	r24, 0x0d	; 13
    64c4:	8f 7c       	andi	r24, 0xCF	; 207
    64c6:	8d b9       	out	0x0d, r24	; 13
	PORTE |= _BV(ROTA) | _BV(ROTB);   /* Rot. Encoder pull-ups */
    64c8:	8e b1       	in	r24, 0x0e	; 14
    64ca:	80 63       	ori	r24, 0x30	; 48
    64cc:	8e b9       	out	0x0e, r24	; 14

	DDRE &= ~_BV(SWC);   /* Central button */
    64ce:	6f 98       	cbi	0x0d, 7	; 13
	PORTE |= _BV(SWC);
    64d0:	77 9a       	sbi	0x0e, 7	; 14
	
	DDRC &= ~COMPASS_SWITCHES;  /* configure compass buttons for input */
    64d2:	87 b1       	in	r24, 0x07	; 7
    64d4:	83 7c       	andi	r24, 0xC3	; 195
    64d6:	87 b9       	out	0x07, r24	; 7
	PORTC |= COMPASS_SWITCHES;  /* and turn on pull up resistors */
    64d8:	88 b1       	in	r24, 0x08	; 8
    64da:	8c 63       	ori	r24, 0x3C	; 60
    64dc:	88 b9       	out	0x08, r24	; 8
 
	DDRB &= ~_BV(OS_CD);   /* SD Card detection */
    64de:	26 98       	cbi	0x04, 6	; 4
	PORTB |= _BV(OS_CD);
    64e0:	2e 9a       	sbi	0x05, 6	; 5


   init_external_switches();
    64e2:	3a df       	rcall	.-396    	; 0x6358 <init_external_switches>




	/* Schedule encoder scan evry 2 ms */
	os_add_task( scan_encoder,  2, 0);
    64e4:	89 eb       	ldi	r24, 0xB9	; 185
    64e6:	91 e3       	ldi	r25, 0x31	; 49
    64e8:	42 e0       	ldi	r20, 0x02	; 2
    64ea:	50 e0       	ldi	r21, 0x00	; 0
    64ec:	60 e0       	ldi	r22, 0x00	; 0
    64ee:	70 e0       	ldi	r23, 0x00	; 0
    64f0:	20 e0       	ldi	r18, 0x00	; 0
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	e3 d0       	rcall	.+454    	; 0x66bc <os_add_task>
	/* Schedule button scan at 10 ms */
	os_add_task( scan_switches, 10, 0);
    64f6:	81 ee       	ldi	r24, 0xE1	; 225
    64f8:	91 e3       	ldi	r25, 0x31	; 49
    64fa:	4a e0       	ldi	r20, 0x0A	; 10
    64fc:	50 e0       	ldi	r21, 0x00	; 0
    64fe:	60 e0       	ldi	r22, 0x00	; 0
    6500:	70 e0       	ldi	r23, 0x00	; 0
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	30 e0       	ldi	r19, 0x00	; 0

}
    6506:	da c0       	rjmp	.+436    	; 0x66bc <os_add_task>

00006508 <__vector_23>:
uint8_t runningTasks[MAX_TASKS+1] = {255}; /* Track running tasks, [0] always idleTask */
const uint32_t idleTask = 255;             /* 0 highest priority, 255 lowest */
uint8_t currentTask = 0;                   /* Index of highest priority task in runningTasks */

unsigned schedule_time = 0;
ISR(TIMER0_OVF_vect) {
    6508:	1f 92       	push	r1
    650a:	0f 92       	push	r0
    650c:	0f b6       	in	r0, 0x3f	; 63
    650e:	0f 92       	push	r0
    6510:	0b b6       	in	r0, 0x3b	; 59
    6512:	0f 92       	push	r0
    6514:	11 24       	eor	r1, r1
    6516:	9f 92       	push	r9
    6518:	af 92       	push	r10
    651a:	bf 92       	push	r11
    651c:	cf 92       	push	r12
    651e:	df 92       	push	r13
    6520:	ef 92       	push	r14
    6522:	ff 92       	push	r15
    6524:	0f 93       	push	r16
    6526:	1f 93       	push	r17
    6528:	2f 93       	push	r18
    652a:	3f 93       	push	r19
    652c:	4f 93       	push	r20
    652e:	5f 93       	push	r21
    6530:	6f 93       	push	r22
    6532:	7f 93       	push	r23
    6534:	8f 93       	push	r24
    6536:	9f 93       	push	r25
    6538:	af 93       	push	r26
    653a:	bf 93       	push	r27
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	ef 93       	push	r30
    6542:	ff 93       	push	r31
    6544:	bb 24       	eor	r11, r11
   uint8_t i;

   for (i=0; i <= tasksNum; ++i) { /* Heart of scheduler code */
      if (  (tasks[i].elapsedTime >= tasks[i].period_ms) /* Task ready */
    6546:	8d e0       	ldi	r24, 0x0D	; 13
    6548:	c8 2e       	mov	r12, r24
    654a:	d1 2c       	mov	r13, r1
          && (!tasks[i].running)             /* Task not already running (no self-preemption) */
         ) {
   
         cli();
         tasks[i].elapsedTime = 0;      /* Reset time since last tick */
         tasks[i].running = 1;          /* Mark as running */
    654c:	99 24       	eor	r9, r9
    654e:	93 94       	inc	r9
   
         tasks[i].state = tasks[i].TaskFct(tasks[i].state); /* Execute tick */
            
         cli();
         tasks[i].running = 0;                 /* Mark as not running */
         runningTasks[currentTask] = idleTask; /* Remove from runningTasks */
    6550:	aa 24       	eor	r10, r10
    6552:	aa 94       	dec	r10
    6554:	7e c0       	rjmp	.+252    	; 0x6652 <__vector_23+0x14a>
unsigned schedule_time = 0;
ISR(TIMER0_OVF_vect) {
   uint8_t i;

   for (i=0; i <= tasksNum; ++i) { /* Heart of scheduler code */
      if (  (tasks[i].elapsedTime >= tasks[i].period_ms) /* Task ready */
    6556:	ec 9c       	mul	r14, r12
    6558:	e0 01       	movw	r28, r0
    655a:	ed 9c       	mul	r14, r13
    655c:	d0 0d       	add	r29, r0
    655e:	fc 9c       	mul	r15, r12
    6560:	d0 0d       	add	r29, r0
    6562:	11 24       	eor	r1, r1
    6564:	cf 54       	subi	r28, 0x4F	; 79
    6566:	dc 4f       	sbci	r29, 0xFC	; 252
    6568:	2d 81       	ldd	r18, Y+5	; 0x05
    656a:	3e 81       	ldd	r19, Y+6	; 0x06
    656c:	4f 81       	ldd	r20, Y+7	; 0x07
    656e:	58 85       	ldd	r21, Y+8	; 0x08
    6570:	89 81       	ldd	r24, Y+1	; 0x01
    6572:	9a 81       	ldd	r25, Y+2	; 0x02
    6574:	ab 81       	ldd	r26, Y+3	; 0x03
    6576:	bc 81       	ldd	r27, Y+4	; 0x04
    6578:	28 17       	cp	r18, r24
    657a:	39 07       	cpc	r19, r25
    657c:	4a 07       	cpc	r20, r26
    657e:	5b 07       	cpc	r21, r27
    6580:	08 f4       	brcc	.+2      	; 0x6584 <__vector_23+0x7c>
    6582:	52 c0       	rjmp	.+164    	; 0x6628 <__vector_23+0x120>
    6584:	90 91 54 01 	lds	r25, 0x0154
    6588:	e9 2f       	mov	r30, r25
    658a:	f0 e0       	ldi	r31, 0x00	; 0
    658c:	ef 5e       	subi	r30, 0xEF	; 239
    658e:	fe 4f       	sbci	r31, 0xFE	; 254
    6590:	80 81       	ld	r24, Z
    6592:	b8 16       	cp	r11, r24
    6594:	08 f0       	brcs	.+2      	; 0x6598 <__vector_23+0x90>
    6596:	48 c0       	rjmp	.+144    	; 0x6628 <__vector_23+0x120>
    6598:	88 81       	ld	r24, Y
    659a:	88 23       	and	r24, r24
    659c:	09 f0       	breq	.+2      	; 0x65a0 <__vector_23+0x98>
    659e:	44 c0       	rjmp	.+136    	; 0x6628 <__vector_23+0x120>
          && (runningTasks[currentTask] > i) /* Task priority > current task priority */
          && (!tasks[i].running)             /* Task not already running (no self-preemption) */
         ) {
   
         cli();
    65a0:	f8 94       	cli
         tasks[i].elapsedTime = 0;      /* Reset time since last tick */
    65a2:	ec 9c       	mul	r14, r12
    65a4:	f0 01       	movw	r30, r0
    65a6:	ed 9c       	mul	r14, r13
    65a8:	f0 0d       	add	r31, r0
    65aa:	fc 9c       	mul	r15, r12
    65ac:	f0 0d       	add	r31, r0
    65ae:	11 24       	eor	r1, r1
    65b0:	ef 54       	subi	r30, 0x4F	; 79
    65b2:	fc 4f       	sbci	r31, 0xFC	; 252
    65b4:	15 82       	std	Z+5, r1	; 0x05
    65b6:	16 82       	std	Z+6, r1	; 0x06
    65b8:	17 82       	std	Z+7, r1	; 0x07
    65ba:	10 86       	std	Z+8, r1	; 0x08
         tasks[i].running = 1;          /* Mark as running */
    65bc:	90 82       	st	Z, r9
         currentTask += 1;
    65be:	e9 2f       	mov	r30, r25
    65c0:	ef 5f       	subi	r30, 0xFF	; 255
    65c2:	e0 93 54 01 	sts	0x0154, r30
         runningTasks[currentTask] = i; /* Add to runningTasks */
    65c6:	f0 e0       	ldi	r31, 0x00	; 0
    65c8:	ef 5e       	subi	r30, 0xEF	; 239
    65ca:	fe 4f       	sbci	r31, 0xFE	; 254
    65cc:	b0 82       	st	Z, r11
         sei();
    65ce:	78 94       	sei
   
         tasks[i].state = tasks[i].TaskFct(tasks[i].state); /* Execute tick */
    65d0:	ec 9c       	mul	r14, r12
    65d2:	80 01       	movw	r16, r0
    65d4:	ed 9c       	mul	r14, r13
    65d6:	10 0d       	add	r17, r0
    65d8:	fc 9c       	mul	r15, r12
    65da:	10 0d       	add	r17, r0
    65dc:	11 24       	eor	r1, r1
    65de:	0f 54       	subi	r16, 0x4F	; 79
    65e0:	1c 4f       	sbci	r17, 0xFC	; 252
    65e2:	d8 01       	movw	r26, r16
    65e4:	19 96       	adiw	r26, 0x09	; 9
    65e6:	ed 91       	ld	r30, X+
    65e8:	fc 91       	ld	r31, X
    65ea:	1a 97       	sbiw	r26, 0x0a	; 10
    65ec:	1b 96       	adiw	r26, 0x0b	; 11
    65ee:	8d 91       	ld	r24, X+
    65f0:	9c 91       	ld	r25, X
    65f2:	1c 97       	sbiw	r26, 0x0c	; 12
    65f4:	09 95       	icall
    65f6:	f8 01       	movw	r30, r16
    65f8:	94 87       	std	Z+12, r25	; 0x0c
    65fa:	83 87       	std	Z+11, r24	; 0x0b
            
         cli();
    65fc:	f8 94       	cli
         tasks[i].running = 0;                 /* Mark as not running */
    65fe:	ec 9c       	mul	r14, r12
    6600:	f0 01       	movw	r30, r0
    6602:	ed 9c       	mul	r14, r13
    6604:	f0 0d       	add	r31, r0
    6606:	fc 9c       	mul	r15, r12
    6608:	f0 0d       	add	r31, r0
    660a:	11 24       	eor	r1, r1
    660c:	ef 54       	subi	r30, 0x4F	; 79
    660e:	fc 4f       	sbci	r31, 0xFC	; 252
    6610:	10 82       	st	Z, r1
         runningTasks[currentTask] = idleTask; /* Remove from runningTasks */
    6612:	80 91 54 01 	lds	r24, 0x0154
    6616:	e8 2f       	mov	r30, r24
    6618:	f0 e0       	ldi	r31, 0x00	; 0
    661a:	ef 5e       	subi	r30, 0xEF	; 239
    661c:	fe 4f       	sbci	r31, 0xFE	; 254
    661e:	a0 82       	st	Z, r10
         currentTask -= 1;
    6620:	81 50       	subi	r24, 0x01	; 1
    6622:	80 93 54 01 	sts	0x0154, r24
         sei();
    6626:	78 94       	sei
   
      }
      tasks[i].elapsedTime += 1;
    6628:	ec 9c       	mul	r14, r12
    662a:	f0 01       	movw	r30, r0
    662c:	ed 9c       	mul	r14, r13
    662e:	f0 0d       	add	r31, r0
    6630:	fc 9c       	mul	r15, r12
    6632:	f0 0d       	add	r31, r0
    6634:	11 24       	eor	r1, r1
    6636:	ef 54       	subi	r30, 0x4F	; 79
    6638:	fc 4f       	sbci	r31, 0xFC	; 252
    663a:	85 81       	ldd	r24, Z+5	; 0x05
    663c:	96 81       	ldd	r25, Z+6	; 0x06
    663e:	a7 81       	ldd	r26, Z+7	; 0x07
    6640:	b0 85       	ldd	r27, Z+8	; 0x08
    6642:	01 96       	adiw	r24, 0x01	; 1
    6644:	a1 1d       	adc	r26, r1
    6646:	b1 1d       	adc	r27, r1
    6648:	85 83       	std	Z+5, r24	; 0x05
    664a:	96 83       	std	Z+6, r25	; 0x06
    664c:	a7 83       	std	Z+7, r26	; 0x07
    664e:	b0 87       	std	Z+8, r27	; 0x08

unsigned schedule_time = 0;
ISR(TIMER0_OVF_vect) {
   uint8_t i;

   for (i=0; i <= tasksNum; ++i) { /* Heart of scheduler code */
    6650:	b3 94       	inc	r11
    6652:	eb 2c       	mov	r14, r11
    6654:	ff 24       	eor	r15, r15
    6656:	80 91 10 01 	lds	r24, 0x0110
    665a:	99 27       	eor	r25, r25
    665c:	87 fd       	sbrc	r24, 7
    665e:	90 95       	com	r25
    6660:	8e 15       	cp	r24, r14
    6662:	9f 05       	cpc	r25, r15
    6664:	0c f0       	brlt	.+2      	; 0x6668 <__vector_23+0x160>
    6666:	77 cf       	rjmp	.-274    	; 0x6556 <__vector_23+0x4e>
      }
      tasks[i].elapsedTime += 1;
   }

   
}
    6668:	ff 91       	pop	r31
    666a:	ef 91       	pop	r30
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	bf 91       	pop	r27
    6672:	af 91       	pop	r26
    6674:	9f 91       	pop	r25
    6676:	8f 91       	pop	r24
    6678:	7f 91       	pop	r23
    667a:	6f 91       	pop	r22
    667c:	5f 91       	pop	r21
    667e:	4f 91       	pop	r20
    6680:	3f 91       	pop	r19
    6682:	2f 91       	pop	r18
    6684:	1f 91       	pop	r17
    6686:	0f 91       	pop	r16
    6688:	ff 90       	pop	r15
    668a:	ef 90       	pop	r14
    668c:	df 90       	pop	r13
    668e:	cf 90       	pop	r12
    6690:	bf 90       	pop	r11
    6692:	af 90       	pop	r10
    6694:	9f 90       	pop	r9
    6696:	0f 90       	pop	r0
    6698:	0b be       	out	0x3b, r0	; 59
    669a:	0f 90       	pop	r0
    669c:	0f be       	out	0x3f, r0	; 63
    669e:	0f 90       	pop	r0
    66a0:	1f 90       	pop	r1
    66a2:	18 95       	reti

000066a4 <os_init_scheduler>:

/* Use PWM mode to also control LED brightness from Timer 0 */
void os_init_scheduler() {

    /* Configure 8 bit Timer 0 for ISR  */
	TCCR0A = _BV(COM0A1)    /* Clear OCA0A on Compare match, set on TOP */
    66a4:	83 e8       	ldi	r24, 0x83	; 131
    66a6:	84 bd       	out	0x24, r24	; 36
           | _BV(WGM01)		/* fast PWM mode */
           | _BV(WGM00);

    TCCR0B |= _BV(CS00)     
    66a8:	85 b5       	in	r24, 0x25	; 37
    66aa:	83 60       	ori	r24, 0x03	; 3
    66ac:	85 bd       	out	0x25, r24	; 37
            | _BV(CS01);   /* F_CPU/64, DS p.112 */


    /* Interrupts at 488.3 Hz: FCPU/(510*N) with N=64, DS p.105 */  

    TIMSK0 = _BV(TOIE0); /* enable overflow interrupt for T0, DS p.113  */
    66ae:	81 e0       	ldi	r24, 0x01	; 1
    66b0:	80 93 6e 00 	sts	0x006E, r24
    TCNT0 = 0;
    66b4:	16 bc       	out	0x26, r1	; 38
    OCR0A = 255;  /* LED full brightness */
    66b6:	8f ef       	ldi	r24, 0xFF	; 255
    66b8:	87 bd       	out	0x27, r24	; 39
}
    66ba:	08 95       	ret

000066bc <os_add_task>:

#endif	/* OS_LED_BRIGHTNESS */



int os_add_task(int (*fnc)(int), uint32_t period_ms, int initState) {
    66bc:	ef 92       	push	r14
    66be:	ff 92       	push	r15
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	7c 01       	movw	r14, r24
    66ca:	89 01       	movw	r16, r18
   int t;

   t = tasksNum + 1;
    66cc:	80 91 10 01 	lds	r24, 0x0110
    66d0:	c8 2f       	mov	r28, r24
    66d2:	dd 27       	eor	r29, r29
    66d4:	c7 fd       	sbrc	r28, 7
    66d6:	d0 95       	com	r29
    66d8:	21 96       	adiw	r28, 0x01	; 1
 
   if (t >= MAX_TASKS) {
    66da:	ca 30       	cpi	r28, 0x0A	; 10
    66dc:	d1 05       	cpc	r29, r1
    66de:	1c f0       	brlt	.+6      	; 0x66e6 <os_add_task+0x2a>
    66e0:	cf ef       	ldi	r28, 0xFF	; 255
    66e2:	df ef       	ldi	r29, 0xFF	; 255
    66e4:	2c c0       	rjmp	.+88     	; 0x673e <os_add_task+0x82>
	   t = -1;
   } else {

   #ifdef  OS_LED_BRIGHTNESS
	  tasks[t].period_ms = 488.3/1000.0 * period_ms + 0.5;
    66e6:	cb 01       	movw	r24, r22
    66e8:	ba 01       	movw	r22, r20
    66ea:	0e 94 87 42 	call	0x850e	; 0x850e <__floatunsisf>
    66ee:	25 e7       	ldi	r18, 0x75	; 117
    66f0:	32 e0       	ldi	r19, 0x02	; 2
    66f2:	4a ef       	ldi	r20, 0xFA	; 250
    66f4:	5e e3       	ldi	r21, 0x3E	; 62
    66f6:	0e 94 15 43 	call	0x862a	; 0x862a <__mulsf3>
    66fa:	20 e0       	ldi	r18, 0x00	; 0
    66fc:	30 e0       	ldi	r19, 0x00	; 0
    66fe:	40 e0       	ldi	r20, 0x00	; 0
    6700:	5f e3       	ldi	r21, 0x3F	; 63
    6702:	0e 94 8f 41 	call	0x831e	; 0x831e <__addsf3>
    6706:	0e 94 5b 42 	call	0x84b6	; 0x84b6 <__fixunssfsi>
    670a:	2d e0       	ldi	r18, 0x0D	; 13
    670c:	30 e0       	ldi	r19, 0x00	; 0
    670e:	c2 9f       	mul	r28, r18
    6710:	f0 01       	movw	r30, r0
    6712:	c3 9f       	mul	r28, r19
    6714:	f0 0d       	add	r31, r0
    6716:	d2 9f       	mul	r29, r18
    6718:	f0 0d       	add	r31, r0
    671a:	11 24       	eor	r1, r1
    671c:	ef 54       	subi	r30, 0x4F	; 79
    671e:	fc 4f       	sbci	r31, 0xFC	; 252
    6720:	61 83       	std	Z+1, r22	; 0x01
    6722:	72 83       	std	Z+2, r23	; 0x02
    6724:	83 83       	std	Z+3, r24	; 0x03
    6726:	94 83       	std	Z+4, r25	; 0x04
   #else
	  tasks[t].period_ms = period_ms;
   #endif	/* OS_LED_BRIGHTNESS */

	  tasks[t].elapsedTime = tasks[t].period_ms;
    6728:	65 83       	std	Z+5, r22	; 0x05
    672a:	76 83       	std	Z+6, r23	; 0x06
    672c:	87 83       	std	Z+7, r24	; 0x07
    672e:	90 87       	std	Z+8, r25	; 0x08
	  tasks[t].running = 0;
    6730:	10 82       	st	Z, r1
	  tasks[t].TaskFct = fnc;
    6732:	f2 86       	std	Z+10, r15	; 0x0a
    6734:	e1 86       	std	Z+9, r14	; 0x09
	  tasks[t].state = initState;
    6736:	14 87       	std	Z+12, r17	; 0x0c
    6738:	03 87       	std	Z+11, r16	; 0x0b
	  tasksNum = t; /* New task fully initialized */
    673a:	c0 93 10 01 	sts	0x0110, r28
   }
   
   return t;
}
    673e:	ce 01       	movw	r24, r28
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	1f 91       	pop	r17
    6746:	0f 91       	pop	r16
    6748:	ff 90       	pop	r15
    674a:	ef 90       	pop	r14
    674c:	08 95       	ret

0000674e <set_orientation>:

void set_orientation(orientation o)
{
    674e:	28 2f       	mov	r18, r24
    display.orient = o;
    6750:	80 93 37 04 	sts	0x0437, r24
    write_cmd(MEMORY_ACCESS_CONTROL);
    6754:	86 e3       	ldi	r24, 0x36	; 54
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	80 93 00 40 	sts	0x4000, r24
    if (o==North) { 
    675c:	22 23       	and	r18, r18
    675e:	89 f4       	brne	.+34     	; 0x6782 <set_orientation+0x34>
        display.width = LCDWIDTH;
    6760:	80 ef       	ldi	r24, 0xF0	; 240
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	90 93 34 04 	sts	0x0434, r25
    6768:	80 93 33 04 	sts	0x0433, r24
        display.height = LCDHEIGHT;
    676c:	80 e4       	ldi	r24, 0x40	; 64
    676e:	91 e0       	ldi	r25, 0x01	; 1
    6770:	90 93 36 04 	sts	0x0436, r25
    6774:	80 93 35 04 	sts	0x0435, r24
        write_data(0x48);
    6778:	88 e4       	ldi	r24, 0x48	; 72
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	80 93 00 41 	sts	0x4100, r24
    6780:	38 c0       	rjmp	.+112    	; 0x67f2 <set_orientation+0xa4>
    }
    else if (o==West) {
    6782:	21 30       	cpi	r18, 0x01	; 1
    6784:	89 f4       	brne	.+34     	; 0x67a8 <set_orientation+0x5a>
        display.width = LCDHEIGHT;
    6786:	80 e4       	ldi	r24, 0x40	; 64
    6788:	91 e0       	ldi	r25, 0x01	; 1
    678a:	90 93 34 04 	sts	0x0434, r25
    678e:	80 93 33 04 	sts	0x0433, r24
        display.height = LCDWIDTH;
    6792:	80 ef       	ldi	r24, 0xF0	; 240
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	90 93 36 04 	sts	0x0436, r25
    679a:	80 93 35 04 	sts	0x0435, r24
        write_data(0xE8);
    679e:	88 ee       	ldi	r24, 0xE8	; 232
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	80 93 00 41 	sts	0x4100, r24
    67a6:	25 c0       	rjmp	.+74     	; 0x67f2 <set_orientation+0xa4>
    }
    else if (o==South) {
    67a8:	22 30       	cpi	r18, 0x02	; 2
    67aa:	89 f4       	brne	.+34     	; 0x67ce <set_orientation+0x80>
        display.width = LCDWIDTH;
    67ac:	80 ef       	ldi	r24, 0xF0	; 240
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	90 93 34 04 	sts	0x0434, r25
    67b4:	80 93 33 04 	sts	0x0433, r24
        display.height = LCDHEIGHT;
    67b8:	80 e4       	ldi	r24, 0x40	; 64
    67ba:	91 e0       	ldi	r25, 0x01	; 1
    67bc:	90 93 36 04 	sts	0x0436, r25
    67c0:	80 93 35 04 	sts	0x0435, r24
        write_data(0x88);
    67c4:	88 e8       	ldi	r24, 0x88	; 136
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	80 93 00 41 	sts	0x4100, r24
    67cc:	12 c0       	rjmp	.+36     	; 0x67f2 <set_orientation+0xa4>
    }
    else if (o==East) {
    67ce:	23 30       	cpi	r18, 0x03	; 3
    67d0:	81 f4       	brne	.+32     	; 0x67f2 <set_orientation+0xa4>
        display.width = LCDHEIGHT;
    67d2:	80 e4       	ldi	r24, 0x40	; 64
    67d4:	91 e0       	ldi	r25, 0x01	; 1
    67d6:	90 93 34 04 	sts	0x0434, r25
    67da:	80 93 33 04 	sts	0x0433, r24
        display.height = LCDWIDTH;
    67de:	80 ef       	ldi	r24, 0xF0	; 240
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	90 93 36 04 	sts	0x0436, r25
    67e6:	80 93 35 04 	sts	0x0435, r24
        write_data(0x28);
    67ea:	88 e2       	ldi	r24, 0x28	; 40
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	80 93 00 41 	sts	0x4100, r24
    }
    write_cmd(COLUMN_ADDRESS_SET);
    67f2:	8a e2       	ldi	r24, 0x2A	; 42
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	80 93 00 40 	sts	0x4000, r24
    write_data16(0);
    67fa:	20 e0       	ldi	r18, 0x00	; 0
    67fc:	30 e0       	ldi	r19, 0x00	; 0
    67fe:	30 93 00 41 	sts	0x4100, r19
    6802:	20 93 00 41 	sts	0x4100, r18
    write_data16(display.width-1);
    6806:	80 91 33 04 	lds	r24, 0x0433
    680a:	90 91 34 04 	lds	r25, 0x0434
    680e:	01 97       	sbiw	r24, 0x01	; 1
    6810:	90 93 00 41 	sts	0x4100, r25
    6814:	80 93 00 41 	sts	0x4100, r24
    write_cmd(PAGE_ADDRESS_SET);
    6818:	8b e2       	ldi	r24, 0x2B	; 43
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	80 93 00 40 	sts	0x4000, r24
    write_data16(0);
    6820:	30 93 00 41 	sts	0x4100, r19
    6824:	20 93 00 41 	sts	0x4100, r18
    write_data16(display.height-1);
    6828:	80 91 35 04 	lds	r24, 0x0435
    682c:	90 91 36 04 	lds	r25, 0x0436
    6830:	01 97       	sbiw	r24, 0x01	; 1
    6832:	90 93 00 41 	sts	0x4100, r25
    6836:	80 93 00 41 	sts	0x4100, r24
}
    683a:	08 95       	ret

0000683c <fill_rectangle>:
    write_data(diva);
    write_data(rtna);
}

void fill_rectangle(rectangle r, uint16_t col)
{
    683c:	0f 93       	push	r16
    683e:	1f 93       	push	r17
    6840:	df 93       	push	r29
    6842:	cf 93       	push	r28
    6844:	cd b7       	in	r28, 0x3d	; 61
    6846:	de b7       	in	r29, 0x3e	; 62
    6848:	28 97       	sbiw	r28, 0x08	; 8
    684a:	0f b6       	in	r0, 0x3f	; 63
    684c:	f8 94       	cli
    684e:	de bf       	out	0x3e, r29	; 62
    6850:	0f be       	out	0x3f, r0	; 63
    6852:	cd bf       	out	0x3d, r28	; 61
    6854:	29 83       	std	Y+1, r18	; 0x01
    6856:	3a 83       	std	Y+2, r19	; 0x02
    6858:	4b 83       	std	Y+3, r20	; 0x03
    685a:	5c 83       	std	Y+4, r21	; 0x04
    685c:	6d 83       	std	Y+5, r22	; 0x05
    685e:	7e 83       	std	Y+6, r23	; 0x06
    6860:	8f 83       	std	Y+7, r24	; 0x07
    6862:	98 87       	std	Y+8, r25	; 0x08
    6864:	69 81       	ldd	r22, Y+1	; 0x01
    6866:	7a 81       	ldd	r23, Y+2	; 0x02
    6868:	2b 81       	ldd	r18, Y+3	; 0x03
    686a:	3c 81       	ldd	r19, Y+4	; 0x04
    686c:	ed 81       	ldd	r30, Y+5	; 0x05
    686e:	fe 81       	ldd	r31, Y+6	; 0x06
    6870:	4f 81       	ldd	r20, Y+7	; 0x07
    6872:	58 85       	ldd	r21, Y+8	; 0x08
    write_cmd(COLUMN_ADDRESS_SET);
    6874:	8a e2       	ldi	r24, 0x2A	; 42
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	80 93 00 40 	sts	0x4000, r24
    write_data16(r.left);
    687c:	70 93 00 41 	sts	0x4100, r23
    6880:	60 93 00 41 	sts	0x4100, r22
    write_data16(r.right);
    6884:	30 93 00 41 	sts	0x4100, r19
    6888:	20 93 00 41 	sts	0x4100, r18
    write_cmd(PAGE_ADDRESS_SET);
    688c:	8b e2       	ldi	r24, 0x2B	; 43
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	80 93 00 40 	sts	0x4000, r24
    write_data16(r.top);
    6894:	f0 93 00 41 	sts	0x4100, r31
    6898:	e0 93 00 41 	sts	0x4100, r30
    write_data16(r.bottom);
    689c:	50 93 00 41 	sts	0x4100, r21
    68a0:	40 93 00 41 	sts	0x4100, r20
    write_cmd(MEMORY_WRITE);
    68a4:	8c e2       	ldi	r24, 0x2C	; 44
    68a6:	90 e0       	ldi	r25, 0x00	; 0
    68a8:	80 93 00 40 	sts	0x4000, r24
/*  uint16_t x, y;
    for(x=r.left; x<=r.right; x++)
        for(y=r.top; y<=r.bottom; y++)
            write_data16(col);
*/
    uint16_t wpixels = r.right - r.left + 1;
    68ac:	2f 5f       	subi	r18, 0xFF	; 255
    68ae:	3f 4f       	sbci	r19, 0xFF	; 255
    68b0:	26 1b       	sub	r18, r22
    68b2:	37 0b       	sbc	r19, r23
    uint16_t hpixels = r.bottom - r.top + 1;
    68b4:	4f 5f       	subi	r20, 0xFF	; 255
    68b6:	5f 4f       	sbci	r21, 0xFF	; 255
    68b8:	4e 1b       	sub	r20, r30
    68ba:	5f 0b       	sbc	r21, r31
    uint8_t mod8, div8;
    uint16_t odm8, odd8;
    if (hpixels > wpixels) {
    68bc:	24 17       	cp	r18, r20
    68be:	35 07       	cpc	r19, r21
    68c0:	c8 f4       	brcc	.+50     	; 0x68f4 <fill_rectangle+0xb8>
        mod8 = hpixels & 0x07;
        div8 = hpixels >> 3;
        odm8 = wpixels*mod8;
    68c2:	84 2f       	mov	r24, r20
    68c4:	87 70       	andi	r24, 0x07	; 7
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	82 9f       	mul	r24, r18
    68ca:	b0 01       	movw	r22, r0
    68cc:	83 9f       	mul	r24, r19
    68ce:	70 0d       	add	r23, r0
    68d0:	92 9f       	mul	r25, r18
    68d2:	70 0d       	add	r23, r0
    68d4:	11 24       	eor	r1, r1
        odd8 = wpixels*div8;
    68d6:	f3 e0       	ldi	r31, 0x03	; 3
    68d8:	56 95       	lsr	r21
    68da:	47 95       	ror	r20
    68dc:	fa 95       	dec	r31
    68de:	e1 f7       	brne	.-8      	; 0x68d8 <fill_rectangle+0x9c>
    68e0:	84 2f       	mov	r24, r20
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	82 9f       	mul	r24, r18
    68e6:	f0 01       	movw	r30, r0
    68e8:	83 9f       	mul	r24, r19
    68ea:	f0 0d       	add	r31, r0
    68ec:	92 9f       	mul	r25, r18
    68ee:	f0 0d       	add	r31, r0
    68f0:	11 24       	eor	r1, r1
    68f2:	18 c0       	rjmp	.+48     	; 0x6924 <fill_rectangle+0xe8>
    } else {
        mod8 = wpixels & 0x07;
        div8 = wpixels >> 3;
        odm8 = hpixels*mod8;
    68f4:	82 2f       	mov	r24, r18
    68f6:	87 70       	andi	r24, 0x07	; 7
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	84 9f       	mul	r24, r20
    68fc:	b0 01       	movw	r22, r0
    68fe:	85 9f       	mul	r24, r21
    6900:	70 0d       	add	r23, r0
    6902:	94 9f       	mul	r25, r20
    6904:	70 0d       	add	r23, r0
    6906:	11 24       	eor	r1, r1
        odd8 = hpixels*div8;
    6908:	e3 e0       	ldi	r30, 0x03	; 3
    690a:	36 95       	lsr	r19
    690c:	27 95       	ror	r18
    690e:	ea 95       	dec	r30
    6910:	e1 f7       	brne	.-8      	; 0x690a <fill_rectangle+0xce>
    6912:	82 2f       	mov	r24, r18
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	84 9f       	mul	r24, r20
    6918:	f0 01       	movw	r30, r0
    691a:	85 9f       	mul	r24, r21
    691c:	f0 0d       	add	r31, r0
    691e:	94 9f       	mul	r25, r20
    6920:	f0 0d       	add	r31, r0
    6922:	11 24       	eor	r1, r1
    }
    uint8_t pix1 = odm8 & 0x07;
    6924:	86 2f       	mov	r24, r22
    6926:	87 70       	andi	r24, 0x07	; 7
    6928:	05 c0       	rjmp	.+10     	; 0x6934 <fill_rectangle+0xf8>
    while(pix1--)
        write_data16(col);
    692a:	10 93 00 41 	sts	0x4100, r17
    692e:	00 93 00 41 	sts	0x4100, r16
    6932:	81 50       	subi	r24, 0x01	; 1
        div8 = wpixels >> 3;
        odm8 = hpixels*mod8;
        odd8 = hpixels*div8;
    }
    uint8_t pix1 = odm8 & 0x07;
    while(pix1--)
    6934:	88 23       	and	r24, r24
    6936:	c9 f7       	brne	.-14     	; 0x692a <fill_rectangle+0xee>
        write_data16(col);

    uint16_t pix8 = odd8 + (odm8 >> 3);
    6938:	cb 01       	movw	r24, r22
    693a:	23 e0       	ldi	r18, 0x03	; 3
    693c:	96 95       	lsr	r25
    693e:	87 95       	ror	r24
    6940:	2a 95       	dec	r18
    6942:	e1 f7       	brne	.-8      	; 0x693c <fill_rectangle+0x100>
    6944:	8e 0f       	add	r24, r30
    6946:	9f 1f       	adc	r25, r31
    6948:	21 c0       	rjmp	.+66     	; 0x698c <fill_rectangle+0x150>
    while(pix8--) {
        write_data16(col);
    694a:	10 93 00 41 	sts	0x4100, r17
    694e:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    6952:	10 93 00 41 	sts	0x4100, r17
    6956:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    695a:	10 93 00 41 	sts	0x4100, r17
    695e:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    6962:	10 93 00 41 	sts	0x4100, r17
    6966:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    696a:	10 93 00 41 	sts	0x4100, r17
    696e:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    6972:	10 93 00 41 	sts	0x4100, r17
    6976:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    697a:	10 93 00 41 	sts	0x4100, r17
    697e:	00 93 00 41 	sts	0x4100, r16
        write_data16(col);
    6982:	10 93 00 41 	sts	0x4100, r17
    6986:	00 93 00 41 	sts	0x4100, r16
    698a:	01 97       	sbiw	r24, 0x01	; 1
    uint8_t pix1 = odm8 & 0x07;
    while(pix1--)
        write_data16(col);

    uint16_t pix8 = odd8 + (odm8 >> 3);
    while(pix8--) {
    698c:	00 97       	sbiw	r24, 0x00	; 0
    698e:	e9 f6       	brne	.-70     	; 0x694a <fill_rectangle+0x10e>
        write_data16(col);
        write_data16(col);
        write_data16(col);
        write_data16(col);
    }
}
    6990:	28 96       	adiw	r28, 0x08	; 8
    6992:	0f b6       	in	r0, 0x3f	; 63
    6994:	f8 94       	cli
    6996:	de bf       	out	0x3e, r29	; 62
    6998:	0f be       	out	0x3f, r0	; 63
    699a:	cd bf       	out	0x3d, r28	; 61
    699c:	cf 91       	pop	r28
    699e:	df 91       	pop	r29
    69a0:	1f 91       	pop	r17
    69a2:	0f 91       	pop	r16
    69a4:	08 95       	ret

000069a6 <clear_screen>:
        for(y=r.top; y<=r.bottom; y++)
            write_data16(*col++);
}

void clear_screen()
{
    69a6:	0f 93       	push	r16
    69a8:	1f 93       	push	r17
    69aa:	df 93       	push	r29
    69ac:	cf 93       	push	r28
    69ae:	cd b7       	in	r28, 0x3d	; 61
    69b0:	de b7       	in	r29, 0x3e	; 62
    69b2:	28 97       	sbiw	r28, 0x08	; 8
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	f8 94       	cli
    69b8:	de bf       	out	0x3e, r29	; 62
    69ba:	0f be       	out	0x3f, r0	; 63
    69bc:	cd bf       	out	0x3d, r28	; 61
    display.x = 0;
    69be:	10 92 39 04 	sts	0x0439, r1
    69c2:	10 92 38 04 	sts	0x0438, r1
    display.y = 0;
    69c6:	10 92 3b 04 	sts	0x043B, r1
    69ca:	10 92 3a 04 	sts	0x043A, r1
    rectangle r = {0, display.width-1, 0, display.height-1};
    69ce:	20 91 33 04 	lds	r18, 0x0433
    69d2:	30 91 34 04 	lds	r19, 0x0434
    69d6:	21 50       	subi	r18, 0x01	; 1
    69d8:	30 40       	sbci	r19, 0x00	; 0
    69da:	80 91 35 04 	lds	r24, 0x0435
    69de:	90 91 36 04 	lds	r25, 0x0436
    69e2:	01 97       	sbiw	r24, 0x01	; 1
    69e4:	1a 82       	std	Y+2, r1	; 0x02
    69e6:	19 82       	std	Y+1, r1	; 0x01
    69e8:	42 2f       	mov	r20, r18
    69ea:	3c 83       	std	Y+4, r19	; 0x04
    69ec:	2b 83       	std	Y+3, r18	; 0x03
    69ee:	1e 82       	std	Y+6, r1	; 0x06
    69f0:	1d 82       	std	Y+5, r1	; 0x05
    69f2:	98 87       	std	Y+8, r25	; 0x08
    69f4:	8f 83       	std	Y+7, r24	; 0x07
    fill_rectangle(r, display.background);
    69f6:	00 91 3e 04 	lds	r16, 0x043E
    69fa:	10 91 3f 04 	lds	r17, 0x043F
    69fe:	29 81       	ldd	r18, Y+1	; 0x01
    6a00:	3a 81       	ldd	r19, Y+2	; 0x02
    6a02:	5c 81       	ldd	r21, Y+4	; 0x04
    6a04:	6d 81       	ldd	r22, Y+5	; 0x05
    6a06:	7e 81       	ldd	r23, Y+6	; 0x06
    6a08:	98 85       	ldd	r25, Y+8	; 0x08
    6a0a:	18 df       	rcall	.-464    	; 0x683c <fill_rectangle>
}
    6a0c:	28 96       	adiw	r28, 0x08	; 8
    6a0e:	0f b6       	in	r0, 0x3f	; 63
    6a10:	f8 94       	cli
    6a12:	de bf       	out	0x3e, r29	; 62
    6a14:	0f be       	out	0x3f, r0	; 63
    6a16:	cd bf       	out	0x3d, r28	; 61
    6a18:	cf 91       	pop	r28
    6a1a:	df 91       	pop	r29
    6a1c:	1f 91       	pop	r17
    6a1e:	0f 91       	pop	r16
    6a20:	08 95       	ret

00006a22 <init_lcd>:
lcd display;

void init_lcd()
{
    /* Enable extended memory interface with 10 bit addressing */
    XMCRB = _BV(XMM2) | _BV(XMM1);
    6a22:	86 e0       	ldi	r24, 0x06	; 6
    6a24:	80 93 75 00 	sts	0x0075, r24
    XMCRA = _BV(SRE);
    6a28:	80 e8       	ldi	r24, 0x80	; 128
    6a2a:	80 93 74 00 	sts	0x0074, r24
    DDRC |= _BV(RESET);
    6a2e:	3f 9a       	sbi	0x07, 7	; 7
    DDRB |= _BV(BLC);
    6a30:	24 9a       	sbi	0x04, 4	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6a32:	80 ed       	ldi	r24, 0xD0	; 208
    6a34:	97 e0       	ldi	r25, 0x07	; 7
    6a36:	01 97       	sbiw	r24, 0x01	; 1
    6a38:	f1 f7       	brne	.-4      	; 0x6a36 <init_lcd+0x14>
    _delay_ms(1);
    PORTC &= ~_BV(RESET);
    6a3a:	47 98       	cbi	0x08, 7	; 8
    6a3c:	80 e4       	ldi	r24, 0x40	; 64
    6a3e:	9c e9       	ldi	r25, 0x9C	; 156
    6a40:	01 97       	sbiw	r24, 0x01	; 1
    6a42:	f1 f7       	brne	.-4      	; 0x6a40 <init_lcd+0x1e>
    _delay_ms(20);
    PORTC |= _BV(RESET);
    6a44:	47 9a       	sbi	0x08, 7	; 8
    6a46:	80 eb       	ldi	r24, 0xB0	; 176
    6a48:	94 e0       	ldi	r25, 0x04	; 4
    6a4a:	28 ec       	ldi	r18, 0xC8	; 200
    6a4c:	30 e0       	ldi	r19, 0x00	; 0
    6a4e:	f9 01       	movw	r30, r18
    6a50:	31 97       	sbiw	r30, 0x01	; 1
    6a52:	f1 f7       	brne	.-4      	; 0x6a50 <init_lcd+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a56:	d9 f7       	brne	.-10     	; 0x6a4e <init_lcd+0x2c>
    _delay_ms(120);
    write_cmd(DISPLAY_OFF);
    6a58:	88 e2       	ldi	r24, 0x28	; 40
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	80 93 00 40 	sts	0x4000, r24
    write_cmd(SLEEP_OUT);
    6a60:	81 e1       	ldi	r24, 0x11	; 17
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	80 93 00 40 	sts	0x4000, r24
    6a68:	88 e5       	ldi	r24, 0x58	; 88
    6a6a:	92 e0       	ldi	r25, 0x02	; 2
    6a6c:	28 ec       	ldi	r18, 0xC8	; 200
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	f9 01       	movw	r30, r18
    6a72:	31 97       	sbiw	r30, 0x01	; 1
    6a74:	f1 f7       	brne	.-4      	; 0x6a72 <init_lcd+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a78:	d9 f7       	brne	.-10     	; 0x6a70 <init_lcd+0x4e>
    _delay_ms(60);
    write_cmd_data(INTERNAL_IC_SETTING,          0x01);
    6a7a:	41 e0       	ldi	r20, 0x01	; 1
    6a7c:	50 e0       	ldi	r21, 0x00	; 0
    6a7e:	8b ec       	ldi	r24, 0xCB	; 203
    6a80:	90 e0       	ldi	r25, 0x00	; 0
    6a82:	80 93 00 40 	sts	0x4000, r24
    6a86:	40 93 00 41 	sts	0x4100, r20
    write_cmd(POWER_CONTROL_1);
    6a8a:	80 ec       	ldi	r24, 0xC0	; 192
    6a8c:	90 e0       	ldi	r25, 0x00	; 0
    6a8e:	80 93 00 40 	sts	0x4000, r24
        write_data16(0x2608);
    6a92:	88 e0       	ldi	r24, 0x08	; 8
    6a94:	96 e2       	ldi	r25, 0x26	; 38
    6a96:	90 93 00 41 	sts	0x4100, r25
    6a9a:	80 93 00 41 	sts	0x4100, r24
    write_cmd_data(POWER_CONTROL_2,              0x10);
    6a9e:	20 e1       	ldi	r18, 0x10	; 16
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	81 ec       	ldi	r24, 0xC1	; 193
    6aa4:	90 e0       	ldi	r25, 0x00	; 0
    6aa6:	80 93 00 40 	sts	0x4000, r24
    6aaa:	20 93 00 41 	sts	0x4100, r18
    write_cmd(VCOM_CONTROL_1);
    6aae:	85 ec       	ldi	r24, 0xC5	; 197
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	80 93 00 40 	sts	0x4000, r24
        write_data16(0x353E);
    6ab6:	8e e3       	ldi	r24, 0x3E	; 62
    6ab8:	95 e3       	ldi	r25, 0x35	; 53
    6aba:	90 93 00 41 	sts	0x4100, r25
    6abe:	80 93 00 41 	sts	0x4100, r24
    write_cmd_data(VCOM_CONTROL_2, 0xB5);
    6ac2:	25 eb       	ldi	r18, 0xB5	; 181
    6ac4:	30 e0       	ldi	r19, 0x00	; 0
    6ac6:	87 ec       	ldi	r24, 0xC7	; 199
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	80 93 00 40 	sts	0x4000, r24
    6ace:	20 93 00 41 	sts	0x4100, r18
    write_cmd_data(INTERFACE_CONTROL, 0x01);
    6ad2:	86 ef       	ldi	r24, 0xF6	; 246
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	80 93 00 40 	sts	0x4000, r24
    6ada:	40 93 00 41 	sts	0x4100, r20
        write_data16(0x0000);
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	90 93 00 41 	sts	0x4100, r25
    6ae6:	80 93 00 41 	sts	0x4100, r24
    write_cmd_data(PIXEL_FORMAT_SET, 0x55);     /* 16bit/pixel */
    6aea:	25 e5       	ldi	r18, 0x55	; 85
    6aec:	30 e0       	ldi	r19, 0x00	; 0
    6aee:	8a e3       	ldi	r24, 0x3A	; 58
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	80 93 00 40 	sts	0x4000, r24
    6af6:	20 93 00 41 	sts	0x4100, r18
    set_orientation(West);
    6afa:	81 e0       	ldi	r24, 0x01	; 1
    6afc:	28 de       	rcall	.-944    	; 0x674e <set_orientation>
    clear_screen();
    6afe:	53 df       	rcall	.-346    	; 0x69a6 <clear_screen>
    display.x = 0;
    6b00:	10 92 39 04 	sts	0x0439, r1
    6b04:	10 92 38 04 	sts	0x0438, r1
    display.y = 0;
    6b08:	10 92 3b 04 	sts	0x043B, r1
    6b0c:	10 92 3a 04 	sts	0x043A, r1
    display.background = BLACK;
    6b10:	10 92 3f 04 	sts	0x043F, r1
    6b14:	10 92 3e 04 	sts	0x043E, r1
    display.foreground = WHITE;
    6b18:	8f ef       	ldi	r24, 0xFF	; 255
    6b1a:	9f ef       	ldi	r25, 0xFF	; 255
    6b1c:	90 93 3d 04 	sts	0x043D, r25
    6b20:	80 93 3c 04 	sts	0x043C, r24
    write_cmd(DISPLAY_ON);
    6b24:	89 e2       	ldi	r24, 0x29	; 41
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	80 93 00 40 	sts	0x4000, r24
    6b2c:	84 ef       	ldi	r24, 0xF4	; 244
    6b2e:	91 e0       	ldi	r25, 0x01	; 1
    6b30:	28 ec       	ldi	r18, 0xC8	; 200
    6b32:	30 e0       	ldi	r19, 0x00	; 0
    6b34:	f9 01       	movw	r30, r18
    6b36:	31 97       	sbiw	r30, 0x01	; 1
    6b38:	f1 f7       	brne	.-4      	; 0x6b36 <init_lcd+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b3c:	d9 f7       	brne	.-10     	; 0x6b34 <init_lcd+0x112>
    _delay_ms(50);
    write_cmd_data(TEARING_EFFECT_LINE_ON, 0x00);
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	25 e3       	ldi	r18, 0x35	; 53
    6b44:	30 e0       	ldi	r19, 0x00	; 0
    6b46:	20 93 00 40 	sts	0x4000, r18
    6b4a:	80 93 00 41 	sts	0x4100, r24
    EICRB |= _BV(ISC61);
    6b4e:	80 91 6a 00 	lds	r24, 0x006A
    6b52:	80 62       	ori	r24, 0x20	; 32
    6b54:	80 93 6a 00 	sts	0x006A, r24
    PORTB |= _BV(BLC);
    6b58:	2c 9a       	sbi	0x05, 4	; 5
}
    6b5a:	08 95       	ret

00006b5c <display_char_font_col>:
{
    display_char_font_col(c, font, x, y, display.foreground);
}

int display_char_font_col(char c, uint8_t font, uint16_t x, uint16_t y, uint16_t col)
{
    6b5c:	8f 92       	push	r8
    6b5e:	9f 92       	push	r9
    6b60:	af 92       	push	r10
    6b62:	bf 92       	push	r11
    6b64:	cf 92       	push	r12
    6b66:	df 92       	push	r13
    6b68:	ef 92       	push	r14
    6b6a:	ff 92       	push	r15
    6b6c:	0f 93       	push	r16
    6b6e:	1f 93       	push	r17
    6b70:	cf 93       	push	r28
    6b72:	df 93       	push	r29
    6b74:	48 01       	movw	r8, r16
    if (c < 32 || c > 127) return ERR_CHAR_OUT_OF_RANGE;
    6b76:	78 2f       	mov	r23, r24
    6b78:	70 52       	subi	r23, 0x20	; 32
    6b7a:	70 36       	cpi	r23, 0x60	; 96
    6b7c:	18 f0       	brcs	.+6      	; 0x6b84 <display_char_font_col+0x28>
    6b7e:	22 e0       	ldi	r18, 0x02	; 2
    6b80:	30 e0       	ldi	r19, 0x00	; 0
    6b82:	ba c0       	rjmp	.+372    	; 0x6cf8 <display_char_font_col+0x19c>
    uint8_t characterIndex = c - 32;




    switch (font)
    6b84:	66 23       	and	r22, r22
    6b86:	31 f0       	breq	.+12     	; 0x6b94 <display_char_font_col+0x38>
    6b88:	61 30       	cpi	r22, 0x01	; 1
    6b8a:	09 f4       	brne	.+2      	; 0x6b8e <display_char_font_col+0x32>
    6b8c:	5a c0       	rjmp	.+180    	; 0x6c42 <display_char_font_col+0xe6>
    6b8e:	21 e0       	ldi	r18, 0x01	; 1
    6b90:	30 e0       	ldi	r19, 0x00	; 0
    6b92:	b2 c0       	rjmp	.+356    	; 0x6cf8 <display_char_font_col+0x19c>
    {
        case FONT_UNISPACE_14 :
            {
                write_cmd(PAGE_ADDRESS_SET);
    6b94:	8b e2       	ldi	r24, 0x2B	; 43
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	80 93 00 40 	sts	0x4000, r24
                write_data16(y);
    6b9c:	30 93 00 41 	sts	0x4100, r19
    6ba0:	20 93 00 41 	sts	0x4100, r18
                write_data16(y + 14);
    6ba4:	22 5f       	subi	r18, 0xF2	; 242
    6ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba8:	30 93 00 41 	sts	0x4100, r19
    6bac:	20 93 00 41 	sts	0x4100, r18

                int horizontalSize = 7;
                int verticalSize = 14;

                // Pointer to start of character data (+ 1 since the first byte is ignored) 
                PGM_P fdata = Unispace7x14 + bytesPerChar * characterIndex + 1;
    6bb0:	8f e0       	ldi	r24, 0x0F	; 15
    6bb2:	78 9f       	mul	r23, r24
    6bb4:	f0 01       	movw	r30, r0
    6bb6:	11 24       	eor	r1, r1
    6bb8:	e7 5d       	subi	r30, 0xD7	; 215
    6bba:	fc 4f       	sbci	r31, 0xFC	; 252

                int writePos;
                for (writePos = x; writePos < (x + 7); writePos++)
    6bbc:	ea 01       	movw	r28, r20
    6bbe:	67 e0       	ldi	r22, 0x07	; 7
    6bc0:	e6 2e       	mov	r14, r22
    6bc2:	f1 2c       	mov	r15, r1
    6bc4:	e4 0e       	add	r14, r20
    6bc6:	f5 1e       	adc	r15, r21
                {

                    write_cmd(COLUMN_ADDRESS_SET);
    6bc8:	5a e2       	ldi	r21, 0x2A	; 42
    6bca:	a5 2e       	mov	r10, r21
    6bcc:	b1 2c       	mov	r11, r1
                    write_data16(writePos);
                    write_data16(writePos);
                    write_cmd(MEMORY_WRITE);
    6bce:	4c e2       	ldi	r20, 0x2C	; 44
    6bd0:	c4 2e       	mov	r12, r20
    6bd2:	d1 2c       	mov	r13, r1
    6bd4:	32 c0       	rjmp	.+100    	; 0x6c3a <display_char_font_col+0xde>

                int writePos;
                for (writePos = x; writePos < (x + 7); writePos++)
                {

                    write_cmd(COLUMN_ADDRESS_SET);
    6bd6:	a0 92 00 40 	sts	0x4000, r10
                    write_data16(writePos);
    6bda:	d0 93 00 41 	sts	0x4100, r29
    6bde:	c0 93 00 41 	sts	0x4100, r28
                    write_data16(writePos);
    6be2:	d0 93 00 41 	sts	0x4100, r29
    6be6:	c0 93 00 41 	sts	0x4100, r28
                    write_cmd(MEMORY_WRITE);
    6bea:	c0 92 00 40 	sts	0x4000, r12

                    //contains column of bytes where when read right to left reads top to bottom (ignore 2 most significant bits)
                    uint16_t reorderedColumnBytes = pgm_read_byte(fdata++);
    6bee:	84 91       	lpm	r24, Z+
    6bf0:	08 2f       	mov	r16, r24
    6bf2:	10 e0       	ldi	r17, 0x00	; 0
                    reorderedColumnBytes |= (pgm_read_byte(fdata++) << 8);
    6bf4:	31 96       	adiw	r30, 0x01	; 1
    6bf6:	84 91       	lpm	r24, Z+
    6bf8:	31 97       	sbiw	r30, 0x01	; 1
    6bfa:	78 2f       	mov	r23, r24
    6bfc:	60 e0       	ldi	r22, 0x00	; 0
    6bfe:	06 2b       	or	r16, r22
    6c00:	17 2b       	or	r17, r23
    6c02:	a0 e0       	ldi	r26, 0x00	; 0
    6c04:	b0 e0       	ldi	r27, 0x00	; 0
    6c06:	41 e0       	ldi	r20, 0x01	; 1
    6c08:	50 e0       	ldi	r21, 0x00	; 0
                    //now print this column
                    int ct;
                    uint16_t mask = 0x0001;
                    for (ct=0; ct<14; ct++)
                    {
                        write_data16((reorderedColumnBytes & mask) ? col : display.background);
    6c0a:	ca 01       	movw	r24, r20
    6c0c:	80 23       	and	r24, r16
    6c0e:	91 23       	and	r25, r17
    6c10:	89 2b       	or	r24, r25
    6c12:	11 f0       	breq	.+4      	; 0x6c18 <display_char_font_col+0xbc>
    6c14:	94 01       	movw	r18, r8
    6c16:	04 c0       	rjmp	.+8      	; 0x6c20 <display_char_font_col+0xc4>
    6c18:	20 91 3e 04 	lds	r18, 0x043E
    6c1c:	30 91 3f 04 	lds	r19, 0x043F
    6c20:	30 93 00 41 	sts	0x4100, r19
    6c24:	20 93 00 41 	sts	0x4100, r18
                    reorderedColumnBytes |= (pgm_read_byte(fdata++) << 8);

                    //now print this column
                    int ct;
                    uint16_t mask = 0x0001;
                    for (ct=0; ct<14; ct++)
    6c28:	11 96       	adiw	r26, 0x01	; 1
    6c2a:	ae 30       	cpi	r26, 0x0E	; 14
    6c2c:	b1 05       	cpc	r27, r1
    6c2e:	19 f0       	breq	.+6      	; 0x6c36 <display_char_font_col+0xda>
                    {
                        write_data16((reorderedColumnBytes & mask) ? col : display.background);
                        mask <<= 1;
    6c30:	44 0f       	add	r20, r20
    6c32:	55 1f       	adc	r21, r21
    6c34:	ea cf       	rjmp	.-44     	; 0x6c0a <display_char_font_col+0xae>
    6c36:	32 96       	adiw	r30, 0x02	; 2

                // Pointer to start of character data (+ 1 since the first byte is ignored) 
                PGM_P fdata = Unispace7x14 + bytesPerChar * characterIndex + 1;

                int writePos;
                for (writePos = x; writePos < (x + 7); writePos++)
    6c38:	21 96       	adiw	r28, 0x01	; 1
    6c3a:	ce 15       	cp	r28, r14
    6c3c:	df 05       	cpc	r29, r15
    6c3e:	58 f2       	brcs	.-106    	; 0x6bd6 <display_char_font_col+0x7a>
    6c40:	59 c0       	rjmp	.+178    	; 0x6cf4 <display_char_font_col+0x198>
                uint8_t bytesPerColumn = 8;

                uint8_t horizontalSize = 29;
                uint8_t verticalSize = 58;

                write_cmd(PAGE_ADDRESS_SET);
    6c42:	8b e2       	ldi	r24, 0x2B	; 43
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	80 93 00 40 	sts	0x4000, r24
                write_data16(y);
    6c4a:	30 93 00 41 	sts	0x4100, r19
    6c4e:	20 93 00 41 	sts	0x4100, r18
                write_data16(y + verticalSize);
    6c52:	26 5c       	subi	r18, 0xC6	; 198
    6c54:	3f 4f       	sbci	r19, 0xFF	; 255
    6c56:	30 93 00 41 	sts	0x4100, r19
    6c5a:	20 93 00 41 	sts	0x4100, r18

                // Pointer to start of character data (+ 1 since the first byte is ignored) 
                PGM_P fdata = Unispace29x58 + bytesPerChar * characterIndex + 1;
    6c5e:	89 ee       	ldi	r24, 0xE9	; 233
    6c60:	78 9f       	mul	r23, r24
    6c62:	80 01       	movw	r16, r0
    6c64:	11 24       	eor	r1, r1
    6c66:	07 53       	subi	r16, 0x37	; 55
    6c68:	17 4f       	sbci	r17, 0xF7	; 247
    6c6a:	da 01       	movw	r26, r20

                uint16_t writePos;
                for (writePos = x; writePos < (x + horizontalSize); writePos++)
    6c6c:	2d e1       	ldi	r18, 0x1D	; 29
    6c6e:	e2 2e       	mov	r14, r18
    6c70:	f1 2c       	mov	r15, r1
    6c72:	e4 0e       	add	r14, r20
    6c74:	f5 1e       	adc	r15, r21
                {

                    write_cmd(COLUMN_ADDRESS_SET);
    6c76:	9a e2       	ldi	r25, 0x2A	; 42
    6c78:	a9 2e       	mov	r10, r25
    6c7a:	b1 2c       	mov	r11, r1
                    write_data16(writePos);
                    write_data16(writePos);
                    write_cmd(MEMORY_WRITE);
    6c7c:	8c e2       	ldi	r24, 0x2C	; 44
    6c7e:	c8 2e       	mov	r12, r24
    6c80:	d1 2c       	mov	r13, r1
    6c82:	35 c0       	rjmp	.+106    	; 0x6cee <display_char_font_col+0x192>

                uint16_t writePos;
                for (writePos = x; writePos < (x + horizontalSize); writePos++)
                {

                    write_cmd(COLUMN_ADDRESS_SET);
    6c84:	a0 92 00 40 	sts	0x4000, r10
                    write_data16(writePos);
    6c88:	b0 93 00 41 	sts	0x4100, r27
    6c8c:	a0 93 00 41 	sts	0x4100, r26
                    write_data16(writePos);
    6c90:	b0 93 00 41 	sts	0x4100, r27
    6c94:	a0 93 00 41 	sts	0x4100, r26
                    write_cmd(MEMORY_WRITE);
    6c98:	c0 92 00 40 	sts	0x4000, r12
    6c9c:	e8 01       	movw	r28, r16
    6c9e:	60 e0       	ldi	r22, 0x00	; 0
    6ca0:	70 e0       	ldi	r23, 0x00	; 0
    6ca2:	fe 01       	movw	r30, r28
                    int ct0;
                    for (ct0 = 0; ct0 < bytesPerColumn; ct0++)
                    {
                        
                        //contains column of bytes where when read right to left reads top to bottom
                        uint8_t columnBytes = pgm_read_byte(fdata++);
    6ca4:	21 96       	adiw	r28, 0x01	; 1
    6ca6:	f4 91       	lpm	r31, Z+
    6ca8:	e1 e0       	ldi	r30, 0x01	; 1
    6caa:	40 e0       	ldi	r20, 0x00	; 0
    6cac:	50 e0       	ldi	r21, 0x00	; 0
                        //now print this column
                        int ct;
                        uint8_t mask = 0x01;
                        for (ct=0; ct<8; ct++)
                        {
                            if ((ct0 * 8 + ct) < verticalSize)
    6cae:	ca 01       	movw	r24, r20
    6cb0:	86 0f       	add	r24, r22
    6cb2:	97 1f       	adc	r25, r23
    6cb4:	ca 97       	sbiw	r24, 0x3a	; 58
    6cb6:	74 f4       	brge	.+28     	; 0x6cd4 <display_char_font_col+0x178>
                            {
                                write_data16((columnBytes & mask) ? col : display.background);
    6cb8:	8e 2f       	mov	r24, r30
    6cba:	8f 23       	and	r24, r31
    6cbc:	11 f0       	breq	.+4      	; 0x6cc2 <display_char_font_col+0x166>
    6cbe:	94 01       	movw	r18, r8
    6cc0:	04 c0       	rjmp	.+8      	; 0x6cca <display_char_font_col+0x16e>
    6cc2:	20 91 3e 04 	lds	r18, 0x043E
    6cc6:	30 91 3f 04 	lds	r19, 0x043F
    6cca:	30 93 00 41 	sts	0x4100, r19
    6cce:	20 93 00 41 	sts	0x4100, r18
                                mask <<= 1;
    6cd2:	ee 0f       	add	r30, r30
                        uint8_t columnBytes = pgm_read_byte(fdata++);

                        //now print this column
                        int ct;
                        uint8_t mask = 0x01;
                        for (ct=0; ct<8; ct++)
    6cd4:	4f 5f       	subi	r20, 0xFF	; 255
    6cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd8:	48 30       	cpi	r20, 0x08	; 8
    6cda:	51 05       	cpc	r21, r1
    6cdc:	41 f7       	brne	.-48     	; 0x6cae <display_char_font_col+0x152>
    6cde:	68 5f       	subi	r22, 0xF8	; 248
    6ce0:	7f 4f       	sbci	r23, 0xFF	; 255
                    write_data16(writePos);
                    write_cmd(MEMORY_WRITE);


                    int ct0;
                    for (ct0 = 0; ct0 < bytesPerColumn; ct0++)
    6ce2:	60 34       	cpi	r22, 0x40	; 64
    6ce4:	71 05       	cpc	r23, r1
    6ce6:	e9 f6       	brne	.-70     	; 0x6ca2 <display_char_font_col+0x146>
    6ce8:	08 5f       	subi	r16, 0xF8	; 248
    6cea:	1f 4f       	sbci	r17, 0xFF	; 255

                // Pointer to start of character data (+ 1 since the first byte is ignored) 
                PGM_P fdata = Unispace29x58 + bytesPerChar * characterIndex + 1;

                uint16_t writePos;
                for (writePos = x; writePos < (x + horizontalSize); writePos++)
    6cec:	11 96       	adiw	r26, 0x01	; 1
    6cee:	ae 15       	cp	r26, r14
    6cf0:	bf 05       	cpc	r27, r15
    6cf2:	40 f2       	brcs	.-112    	; 0x6c84 <display_char_font_col+0x128>
    6cf4:	20 e0       	ldi	r18, 0x00	; 0
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
        
        default :
            return ERR_NO_SUCH_FONT;
    }
    return FONT_WRITE_SUCCESS;
}
    6cf8:	c9 01       	movw	r24, r18
    6cfa:	df 91       	pop	r29
    6cfc:	cf 91       	pop	r28
    6cfe:	1f 91       	pop	r17
    6d00:	0f 91       	pop	r16
    6d02:	ff 90       	pop	r15
    6d04:	ef 90       	pop	r14
    6d06:	df 90       	pop	r13
    6d08:	cf 90       	pop	r12
    6d0a:	bf 90       	pop	r11
    6d0c:	af 90       	pop	r10
    6d0e:	9f 90       	pop	r9
    6d10:	8f 90       	pop	r8
    6d12:	08 95       	ret

00006d14 <display_char_font>:
            return ERR_NO_SUCH_FONT;
    }
}

int display_char_font(char c, uint8_t font, uint16_t x, uint16_t y)
{
    6d14:	0f 93       	push	r16
    6d16:	1f 93       	push	r17
    display_char_font_col(c, font, x, y, display.foreground);
    6d18:	00 91 3c 04 	lds	r16, 0x043C
    6d1c:	10 91 3d 04 	lds	r17, 0x043D
    6d20:	1d df       	rcall	.-454    	; 0x6b5c <display_char_font_col>
}
    6d22:	1f 91       	pop	r17
    6d24:	0f 91       	pop	r16
    6d26:	08 95       	ret

00006d28 <display_string_font>:
		}
	}
}

int display_string_font(char *str, uint8_t font, uint16_t x, uint16_t y)
{
    6d28:	cf 92       	push	r12
    6d2a:	df 92       	push	r13
    6d2c:	ef 92       	push	r14
    6d2e:	ff 92       	push	r15
    6d30:	0f 93       	push	r16
    6d32:	1f 93       	push	r17
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	6c 01       	movw	r12, r24
    6d3a:	7a 01       	movw	r14, r20
    6d3c:	e9 01       	movw	r28, r18
    switch (font)
    6d3e:	66 23       	and	r22, r22
    6d40:	19 f0       	breq	.+6      	; 0x6d48 <display_string_font+0x20>
    6d42:	61 30       	cpi	r22, 0x01	; 1
    6d44:	41 f5       	brne	.+80     	; 0x6d96 <display_string_font+0x6e>
    6d46:	03 c0       	rjmp	.+6      	; 0x6d4e <display_string_font+0x26>
    6d48:	10 e0       	ldi	r17, 0x00	; 0
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font(str[i], font, x + (7 * i), y);
    6d4a:	07 e0       	ldi	r16, 0x07	; 7
    6d4c:	1e c0       	rjmp	.+60     	; 0x6d8a <display_string_font+0x62>
	}
}

int display_string_font(char *str, uint8_t font, uint16_t x, uint16_t y)
{
    switch (font)
    6d4e:	10 e0       	ldi	r17, 0x00	; 0
        case FONT_UNISPACE_36 :
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font(str[i], font, x + (30 * i), y);
    6d50:	0e e1       	ldi	r16, 0x1E	; 30
    6d52:	09 c0       	rjmp	.+18     	; 0x6d66 <display_string_font+0x3e>
    6d54:	10 9f       	mul	r17, r16
    6d56:	a0 01       	movw	r20, r0
    6d58:	11 24       	eor	r1, r1
    6d5a:	4e 0d       	add	r20, r14
    6d5c:	5f 1d       	adc	r21, r15
    6d5e:	61 e0       	ldi	r22, 0x01	; 1
    6d60:	9e 01       	movw	r18, r28
    6d62:	d8 df       	rcall	.-80     	; 0x6d14 <display_char_font>
    switch (font)
    {
        case FONT_UNISPACE_36 :
            {
                uint8_t i;
                for(i=0; str[i]; i++)
    6d64:	1f 5f       	subi	r17, 0xFF	; 255
    6d66:	f6 01       	movw	r30, r12
    6d68:	e1 0f       	add	r30, r17
    6d6a:	f1 1d       	adc	r31, r1
    6d6c:	80 81       	ld	r24, Z
    6d6e:	88 23       	and	r24, r24
    6d70:	89 f7       	brne	.-30     	; 0x6d54 <display_string_font+0x2c>
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	11 c0       	rjmp	.+34     	; 0x6d9a <display_string_font+0x72>
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font(str[i], font, x + (7 * i), y);
    6d78:	10 9f       	mul	r17, r16
    6d7a:	a0 01       	movw	r20, r0
    6d7c:	11 24       	eor	r1, r1
    6d7e:	4e 0d       	add	r20, r14
    6d80:	5f 1d       	adc	r21, r15
    6d82:	60 e0       	ldi	r22, 0x00	; 0
    6d84:	9e 01       	movw	r18, r28
    6d86:	c6 df       	rcall	.-116    	; 0x6d14 <display_char_font>
            }
            return FONT_WRITE_SUCCESS;
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
    6d88:	1f 5f       	subi	r17, 0xFF	; 255
    6d8a:	f6 01       	movw	r30, r12
    6d8c:	e1 0f       	add	r30, r17
    6d8e:	f1 1d       	adc	r31, r1
    6d90:	80 81       	ld	r24, Z
    6d92:	88 23       	and	r24, r24
    6d94:	89 f7       	brne	.-30     	; 0x6d78 <display_string_font+0x50>
    6d96:	21 e0       	ldi	r18, 0x01	; 1
    6d98:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
        default : 
            return ERR_NO_SUCH_FONT;
    }
}
    6d9a:	c9 01       	movw	r24, r18
    6d9c:	df 91       	pop	r29
    6d9e:	cf 91       	pop	r28
    6da0:	1f 91       	pop	r17
    6da2:	0f 91       	pop	r16
    6da4:	ff 90       	pop	r15
    6da6:	ef 90       	pop	r14
    6da8:	df 90       	pop	r13
    6daa:	cf 90       	pop	r12
    6dac:	08 95       	ret

00006dae <display_string_font_col>:

int display_string_font_col(char *str, uint8_t font, uint16_t x, uint16_t y, uint16_t col)
{
    6dae:	8f 92       	push	r8
    6db0:	9f 92       	push	r9
    6db2:	af 92       	push	r10
    6db4:	bf 92       	push	r11
    6db6:	cf 92       	push	r12
    6db8:	df 92       	push	r13
    6dba:	ef 92       	push	r14
    6dbc:	ff 92       	push	r15
    6dbe:	0f 93       	push	r16
    6dc0:	1f 93       	push	r17
    6dc2:	cf 93       	push	r28
    6dc4:	df 93       	push	r29
    6dc6:	4c 01       	movw	r8, r24
    6dc8:	5a 01       	movw	r10, r20
    6dca:	69 01       	movw	r12, r18
    6dcc:	e8 01       	movw	r28, r16
    switch (font)
    6dce:	66 23       	and	r22, r22
    6dd0:	19 f0       	breq	.+6      	; 0x6dd8 <display_string_font_col+0x2a>
    6dd2:	61 30       	cpi	r22, 0x01	; 1
    6dd4:	61 f5       	brne	.+88     	; 0x6e2e <display_string_font_col+0x80>
    6dd6:	04 c0       	rjmp	.+8      	; 0x6de0 <display_string_font_col+0x32>
    6dd8:	ff 24       	eor	r15, r15
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font_col(str[i], font, x + (7 * i), y, col);
    6dda:	e7 e0       	ldi	r30, 0x07	; 7
    6ddc:	ee 2e       	mov	r14, r30
    6dde:	21 c0       	rjmp	.+66     	; 0x6e22 <display_string_font_col+0x74>
    }
}

int display_string_font_col(char *str, uint8_t font, uint16_t x, uint16_t y, uint16_t col)
{
    switch (font)
    6de0:	ff 24       	eor	r15, r15
        case FONT_UNISPACE_36 :
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font_col(str[i], font, x + (30 * i), y, col);
    6de2:	7e e1       	ldi	r23, 0x1E	; 30
    6de4:	e7 2e       	mov	r14, r23
    6de6:	0a c0       	rjmp	.+20     	; 0x6dfc <display_string_font_col+0x4e>
    6de8:	fe 9c       	mul	r15, r14
    6dea:	a0 01       	movw	r20, r0
    6dec:	11 24       	eor	r1, r1
    6dee:	4a 0d       	add	r20, r10
    6df0:	5b 1d       	adc	r21, r11
    6df2:	61 e0       	ldi	r22, 0x01	; 1
    6df4:	96 01       	movw	r18, r12
    6df6:	8e 01       	movw	r16, r28
    6df8:	b1 de       	rcall	.-670    	; 0x6b5c <display_char_font_col>
    switch (font)
    {
        case FONT_UNISPACE_36 :
            {
                uint8_t i;
                for(i=0; str[i]; i++)
    6dfa:	f3 94       	inc	r15
    6dfc:	f4 01       	movw	r30, r8
    6dfe:	ef 0d       	add	r30, r15
    6e00:	f1 1d       	adc	r31, r1
    6e02:	80 81       	ld	r24, Z
    6e04:	88 23       	and	r24, r24
    6e06:	81 f7       	brne	.-32     	; 0x6de8 <display_string_font_col+0x3a>
    6e08:	20 e0       	ldi	r18, 0x00	; 0
    6e0a:	30 e0       	ldi	r19, 0x00	; 0
    6e0c:	12 c0       	rjmp	.+36     	; 0x6e32 <display_string_font_col+0x84>
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
                {
                    display_char_font_col(str[i], font, x + (7 * i), y, col);
    6e0e:	fe 9c       	mul	r15, r14
    6e10:	a0 01       	movw	r20, r0
    6e12:	11 24       	eor	r1, r1
    6e14:	4a 0d       	add	r20, r10
    6e16:	5b 1d       	adc	r21, r11
    6e18:	60 e0       	ldi	r22, 0x00	; 0
    6e1a:	96 01       	movw	r18, r12
    6e1c:	8e 01       	movw	r16, r28
    6e1e:	9e de       	rcall	.-708    	; 0x6b5c <display_char_font_col>
            }
            return FONT_WRITE_SUCCESS;
        case FONT_UNISPACE_14 : 
            {
                uint8_t i;
                for(i=0; str[i]; i++)
    6e20:	f3 94       	inc	r15
    6e22:	f4 01       	movw	r30, r8
    6e24:	ef 0d       	add	r30, r15
    6e26:	f1 1d       	adc	r31, r1
    6e28:	80 81       	ld	r24, Z
    6e2a:	88 23       	and	r24, r24
    6e2c:	81 f7       	brne	.-32     	; 0x6e0e <display_string_font_col+0x60>
    6e2e:	21 e0       	ldi	r18, 0x01	; 1
    6e30:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
        default : 
            return ERR_NO_SUCH_FONT;
    }
}
    6e32:	c9 01       	movw	r24, r18
    6e34:	df 91       	pop	r29
    6e36:	cf 91       	pop	r28
    6e38:	1f 91       	pop	r17
    6e3a:	0f 91       	pop	r16
    6e3c:	ff 90       	pop	r15
    6e3e:	ef 90       	pop	r14
    6e40:	df 90       	pop	r13
    6e42:	cf 90       	pop	r12
    6e44:	bf 90       	pop	r11
    6e46:	af 90       	pop	r10
    6e48:	9f 90       	pop	r9
    6e4a:	8f 90       	pop	r8
    6e4c:	08 95       	ret

00006e4e <milli_to_string>:
        }
    }
}

char* milli_to_string(uint32_t time)
{
    6e4e:	2f 92       	push	r2
    6e50:	3f 92       	push	r3
    6e52:	4f 92       	push	r4
    6e54:	5f 92       	push	r5
    6e56:	6f 92       	push	r6
    6e58:	7f 92       	push	r7
    6e5a:	8f 92       	push	r8
    6e5c:	9f 92       	push	r9
    6e5e:	af 92       	push	r10
    6e60:	bf 92       	push	r11
    6e62:	cf 92       	push	r12
    6e64:	df 92       	push	r13
    6e66:	ef 92       	push	r14
    6e68:	ff 92       	push	r15
    6e6a:	0f 93       	push	r16
    6e6c:	1f 93       	push	r17
    6e6e:	5b 01       	movw	r10, r22
    6e70:	6c 01       	movw	r12, r24
    uint16_t minute = time / 60000;
    6e72:	20 e6       	ldi	r18, 0x60	; 96
    6e74:	3a ee       	ldi	r19, 0xEA	; 234
    6e76:	40 e0       	ldi	r20, 0x00	; 0
    6e78:	50 e0       	ldi	r21, 0x00	; 0
    6e7a:	0e 94 97 43 	call	0x872e	; 0x872e <__udivmodsi4>
    6e7e:	29 01       	movw	r4, r18
    6e80:	3a 01       	movw	r6, r20
    time = time - 60000 * minute;
    6e82:	b9 01       	movw	r22, r18
    6e84:	80 e0       	ldi	r24, 0x00	; 0
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	20 ea       	ldi	r18, 0xA0	; 160
    6e8a:	35 e1       	ldi	r19, 0x15	; 21
    6e8c:	4f ef       	ldi	r20, 0xFF	; 255
    6e8e:	5f ef       	ldi	r21, 0xFF	; 255
    6e90:	0e 94 78 43 	call	0x86f0	; 0x86f0 <__mulsi3>
    6e94:	7b 01       	movw	r14, r22
    6e96:	8c 01       	movw	r16, r24
    6e98:	ea 0c       	add	r14, r10
    6e9a:	fb 1c       	adc	r15, r11
    6e9c:	0c 1d       	adc	r16, r12
    6e9e:	1d 1d       	adc	r17, r13

    uint16_t seconds = time / 1000;
    6ea0:	c8 01       	movw	r24, r16
    6ea2:	b7 01       	movw	r22, r14
    6ea4:	28 ee       	ldi	r18, 0xE8	; 232
    6ea6:	33 e0       	ldi	r19, 0x03	; 3
    6ea8:	40 e0       	ldi	r20, 0x00	; 0
    6eaa:	50 e0       	ldi	r21, 0x00	; 0
    6eac:	0e 94 97 43 	call	0x872e	; 0x872e <__udivmodsi4>
    6eb0:	49 01       	movw	r8, r18
    6eb2:	5a 01       	movw	r10, r20
    6eb4:	19 01       	movw	r2, r18
    time = time - 1000 * seconds;

    uint16_t milliseconds = time / 10;

    char* str = malloc(16);
    6eb6:	80 e1       	ldi	r24, 0x10	; 16
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
    6eba:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <malloc>
    6ebe:	5c 01       	movw	r10, r24
    sprintf(str, "%01u:%02u.%02u", minute, seconds, milliseconds);
    6ec0:	2d b7       	in	r18, 0x3d	; 61
    6ec2:	3e b7       	in	r19, 0x3e	; 62
    6ec4:	2a 50       	subi	r18, 0x0A	; 10
    6ec6:	30 40       	sbci	r19, 0x00	; 0
    6ec8:	0f b6       	in	r0, 0x3f	; 63
    6eca:	f8 94       	cli
    6ecc:	3e bf       	out	0x3e, r19	; 62
    6ece:	0f be       	out	0x3f, r0	; 63
    6ed0:	2d bf       	out	0x3d, r18	; 61
    6ed2:	cd b6       	in	r12, 0x3d	; 61
    6ed4:	de b6       	in	r13, 0x3e	; 62
    6ed6:	08 94       	sec
    6ed8:	c1 1c       	adc	r12, r1
    6eda:	d1 1c       	adc	r13, r1
    6edc:	ed b7       	in	r30, 0x3d	; 61
    6ede:	fe b7       	in	r31, 0x3e	; 62
    6ee0:	81 83       	std	Z+1, r24	; 0x01
    6ee2:	f6 01       	movw	r30, r12
    6ee4:	b1 82       	std	Z+1, r11	; 0x01
    6ee6:	80 e2       	ldi	r24, 0x20	; 32
    6ee8:	91 e0       	ldi	r25, 0x01	; 1
    6eea:	93 83       	std	Z+3, r25	; 0x03
    6eec:	82 83       	std	Z+2, r24	; 0x02
    6eee:	55 82       	std	Z+5, r5	; 0x05
    6ef0:	44 82       	std	Z+4, r4	; 0x04
    6ef2:	97 82       	std	Z+7, r9	; 0x07
    6ef4:	86 82       	std	Z+6, r8	; 0x06
    6ef6:	88 ee       	ldi	r24, 0xE8	; 232
    6ef8:	93 e0       	ldi	r25, 0x03	; 3
    6efa:	9c 01       	movw	r18, r24
    6efc:	22 9e       	mul	r2, r18
    6efe:	c0 01       	movw	r24, r0
    6f00:	23 9e       	mul	r2, r19
    6f02:	90 0d       	add	r25, r0
    6f04:	32 9e       	mul	r3, r18
    6f06:	90 0d       	add	r25, r0
    6f08:	11 24       	eor	r1, r1
    6f0a:	a0 e0       	ldi	r26, 0x00	; 0
    6f0c:	b0 e0       	ldi	r27, 0x00	; 0
    6f0e:	e8 1a       	sub	r14, r24
    6f10:	f9 0a       	sbc	r15, r25
    6f12:	0a 0b       	sbc	r16, r26
    6f14:	1b 0b       	sbc	r17, r27
    6f16:	c8 01       	movw	r24, r16
    6f18:	b7 01       	movw	r22, r14
    6f1a:	2a e0       	ldi	r18, 0x0A	; 10
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	40 e0       	ldi	r20, 0x00	; 0
    6f20:	50 e0       	ldi	r21, 0x00	; 0
    6f22:	0e 94 97 43 	call	0x872e	; 0x872e <__udivmodsi4>
    6f26:	f6 01       	movw	r30, r12
    6f28:	31 87       	std	Z+9, r19	; 0x09
    6f2a:	20 87       	std	Z+8, r18	; 0x08
    6f2c:	0e 94 02 45 	call	0x8a04	; 0x8a04 <sprintf>
    6f30:	2d b7       	in	r18, 0x3d	; 61
    6f32:	3e b7       	in	r19, 0x3e	; 62
    6f34:	26 5f       	subi	r18, 0xF6	; 246
    6f36:	3f 4f       	sbci	r19, 0xFF	; 255
    6f38:	0f b6       	in	r0, 0x3f	; 63
    6f3a:	f8 94       	cli
    6f3c:	3e bf       	out	0x3e, r19	; 62
    6f3e:	0f be       	out	0x3f, r0	; 63
    6f40:	2d bf       	out	0x3d, r18	; 61
    return str;
    6f42:	c5 01       	movw	r24, r10
    6f44:	1f 91       	pop	r17
    6f46:	0f 91       	pop	r16
    6f48:	ff 90       	pop	r15
    6f4a:	ef 90       	pop	r14
    6f4c:	df 90       	pop	r13
    6f4e:	cf 90       	pop	r12
    6f50:	bf 90       	pop	r11
    6f52:	af 90       	pop	r10
    6f54:	9f 90       	pop	r9
    6f56:	8f 90       	pop	r8
    6f58:	7f 90       	pop	r7
    6f5a:	6f 90       	pop	r6
    6f5c:	5f 90       	pop	r5
    6f5e:	4f 90       	pop	r4
    6f60:	3f 90       	pop	r3
    6f62:	2f 90       	pop	r2
    6f64:	08 95       	ret

00006f66 <delta_string>:
    prev_delta = delta;
    free(new_delta_string);
}

char* delta_string(int16_t delta)
{
    6f66:	ef 92       	push	r14
    6f68:	ff 92       	push	r15
    6f6a:	0f 93       	push	r16
    6f6c:	1f 93       	push	r17
    6f6e:	cf 93       	push	r28
    6f70:	df 93       	push	r29
    6f72:	7c 01       	movw	r14, r24
    //if (delta > 9999)
    //    return "+99.99";
   // if (delta < -9999)
     //   return "-99.99";

    char* str = malloc(10);
    6f74:	8a e0       	ldi	r24, 0x0A	; 10
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <malloc>
    6f7c:	ec 01       	movw	r28, r24
    float deltaF = (float) delta / 100.f;

    dtostrf(deltaF, 6, 2, str);
    6f7e:	b7 01       	movw	r22, r14
    6f80:	88 27       	eor	r24, r24
    6f82:	77 fd       	sbrc	r23, 7
    6f84:	80 95       	com	r24
    6f86:	98 2f       	mov	r25, r24
    6f88:	0e 94 89 42 	call	0x8512	; 0x8512 <__floatsisf>
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	30 e0       	ldi	r19, 0x00	; 0
    6f90:	48 ec       	ldi	r20, 0xC8	; 200
    6f92:	52 e4       	ldi	r21, 0x42	; 66
    6f94:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <__divsf3>
    6f98:	46 e0       	ldi	r20, 0x06	; 6
    6f9a:	22 e0       	ldi	r18, 0x02	; 2
    6f9c:	8e 01       	movw	r16, r28
    6f9e:	0e 94 b9 43 	call	0x8772	; 0x8772 <dtostrf>

    if (!(SIGN_MASK & delta))
    6fa2:	f7 fc       	sbrc	r15, 7
    6fa4:	08 c0       	rjmp	.+16     	; 0x6fb6 <delta_string+0x50>
    {
        if (str[1] == ' ')
    6fa6:	89 81       	ldd	r24, Y+1	; 0x01
    6fa8:	80 32       	cpi	r24, 0x20	; 32
    6faa:	19 f4       	brne	.+6      	; 0x6fb2 <delta_string+0x4c>
            str[1] = PLUS;
    6fac:	8b e2       	ldi	r24, 0x2B	; 43
    6fae:	89 83       	std	Y+1, r24	; 0x01
    6fb0:	02 c0       	rjmp	.+4      	; 0x6fb6 <delta_string+0x50>
        else 
            str[0] = PLUS;
    6fb2:	8b e2       	ldi	r24, 0x2B	; 43
    6fb4:	88 83       	st	Y, r24
    }
    return str;
}
    6fb6:	ce 01       	movw	r24, r28
    6fb8:	df 91       	pop	r29
    6fba:	cf 91       	pop	r28
    6fbc:	1f 91       	pop	r17
    6fbe:	0f 91       	pop	r16
    6fc0:	ff 90       	pop	r15
    6fc2:	ef 90       	pop	r14
    6fc4:	08 95       	ret

00006fc6 <draw_delta>:
            
    }
}

void draw_delta(int16_t delta)
{
    6fc6:	6f 92       	push	r6
    6fc8:	7f 92       	push	r7
    6fca:	8f 92       	push	r8
    6fcc:	9f 92       	push	r9
    6fce:	af 92       	push	r10
    6fd0:	bf 92       	push	r11
    6fd2:	cf 92       	push	r12
    6fd4:	df 92       	push	r13
    6fd6:	ef 92       	push	r14
    6fd8:	ff 92       	push	r15
    6fda:	0f 93       	push	r16
    6fdc:	1f 93       	push	r17
    6fde:	cf 93       	push	r28
    6fe0:	df 93       	push	r29
    6fe2:	7c 01       	movw	r14, r24
    static char prev_delta_string[10];
    static int16_t prev_delta;

    //force delta to be in range
    if (delta > 9999)
    6fe4:	80 e1       	ldi	r24, 0x10	; 16
    6fe6:	e8 16       	cp	r14, r24
    6fe8:	87 e2       	ldi	r24, 0x27	; 39
    6fea:	f8 06       	cpc	r15, r24
    6fec:	2c f0       	brlt	.+10     	; 0x6ff8 <draw_delta+0x32>
    6fee:	4f e0       	ldi	r20, 0x0F	; 15
    6ff0:	e4 2e       	mov	r14, r20
    6ff2:	47 e2       	ldi	r20, 0x27	; 39
    6ff4:	f4 2e       	mov	r15, r20
    6ff6:	09 c0       	rjmp	.+18     	; 0x700a <draw_delta+0x44>
        delta = 9999;
    if (delta < -9999)
    6ff8:	91 ef       	ldi	r25, 0xF1	; 241
    6ffa:	e9 16       	cp	r14, r25
    6ffc:	98 ed       	ldi	r25, 0xD8	; 216
    6ffe:	f9 06       	cpc	r15, r25
    7000:	24 f4       	brge	.+8      	; 0x700a <draw_delta+0x44>
    7002:	31 ef       	ldi	r19, 0xF1	; 241
    7004:	e3 2e       	mov	r14, r19
    7006:	38 ed       	ldi	r19, 0xD8	; 216
    7008:	f3 2e       	mov	r15, r19
        delta = -9999;

    uint8_t new_delta_length;    
    char* new_delta_string;
    char* prevPointer = prev_delta_string;
    new_delta_string = delta_string(delta);
    700a:	c7 01       	movw	r24, r14
    700c:	ac df       	rcall	.-168    	; 0x6f66 <delta_string>
    700e:	78 2e       	mov	r7, r24
    7010:	69 2e       	mov	r6, r25


    uint16_t colour;
    if (SIGN_MASK & delta)
    7012:	f7 fc       	sbrc	r15, 7
    7014:	04 c0       	rjmp	.+8      	; 0x701e <draw_delta+0x58>
    7016:	81 2c       	mov	r8, r1
    7018:	28 ef       	ldi	r18, 0xF8	; 248
    701a:	92 2e       	mov	r9, r18
    701c:	04 c0       	rjmp	.+8      	; 0x7026 <draw_delta+0x60>
    701e:	90 ee       	ldi	r25, 0xE0	; 224
    7020:	89 2e       	mov	r8, r25
    7022:	97 e0       	ldi	r25, 0x07	; 7
    7024:	99 2e       	mov	r9, r25


    int x = 130;
    int y = 170;

    if ((SIGN_MASK & prev_delta) != (SIGN_MASK & delta))
    7026:	80 91 57 01 	lds	r24, 0x0157
    702a:	90 91 58 01 	lds	r25, 0x0158
    702e:	8e 25       	eor	r24, r14
    7030:	9f 25       	eor	r25, r15
    7032:	97 ff       	sbrs	r25, 7
    7034:	0a c0       	rjmp	.+20     	; 0x704a <draw_delta+0x84>
    {
        //Then we need to redraw completely as signs have changed so diff colour
        display_string_font_col(new_delta_string, FONT_UNISPACE_36, x, 170, colour);
    7036:	87 2d       	mov	r24, r7
    7038:	96 2d       	mov	r25, r6
    703a:	61 e0       	ldi	r22, 0x01	; 1
    703c:	42 e8       	ldi	r20, 0x82	; 130
    703e:	50 e0       	ldi	r21, 0x00	; 0
    7040:	2a ea       	ldi	r18, 0xAA	; 170
    7042:	30 e0       	ldi	r19, 0x00	; 0
    7044:	84 01       	movw	r16, r8
    7046:	b3 de       	rcall	.-666    	; 0x6dae <display_string_font_col>
    7048:	22 c0       	rjmp	.+68     	; 0x708e <draw_delta+0xc8>
    704a:	87 2d       	mov	r24, r7
    704c:	96 2d       	mov	r25, r6
    704e:	9c 01       	movw	r18, r24
    7050:	59 01       	movw	r10, r18
    7052:	c9 e5       	ldi	r28, 0x59	; 89
    7054:	d1 e0       	ldi	r29, 0x01	; 1
    7056:	82 e8       	ldi	r24, 0x82	; 130
    7058:	c8 2e       	mov	r12, r24
    705a:	d1 2c       	mov	r13, r1
    } else {
        //otherwise we iterate over each char and only draw those that differ
        int ct;
        for (ct = 0; ct < 6; ct++, prevPointer++)
        {
            if (new_delta_string[ct] != *prevPointer)
    705c:	f5 01       	movw	r30, r10
    705e:	90 81       	ld	r25, Z
    7060:	88 81       	ld	r24, Y
    7062:	98 17       	cp	r25, r24
    7064:	39 f0       	breq	.+14     	; 0x7074 <draw_delta+0xae>
            {
                //draw char
                display_char_font_col(new_delta_string[ct], FONT_UNISPACE_36, x + (30 * ct), y, colour);
    7066:	89 2f       	mov	r24, r25
    7068:	61 e0       	ldi	r22, 0x01	; 1
    706a:	a6 01       	movw	r20, r12
    706c:	2a ea       	ldi	r18, 0xAA	; 170
    706e:	30 e0       	ldi	r19, 0x00	; 0
    7070:	84 01       	movw	r16, r8
    7072:	74 dd       	rcall	.-1304   	; 0x6b5c <display_char_font_col>
    7074:	08 94       	sec
    7076:	a1 1c       	adc	r10, r1
    7078:	b1 1c       	adc	r11, r1
    707a:	8e e1       	ldi	r24, 0x1E	; 30
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	c8 0e       	add	r12, r24
    7080:	d9 1e       	adc	r13, r25
        //Then we need to redraw completely as signs have changed so diff colour
        display_string_font_col(new_delta_string, FONT_UNISPACE_36, x, 170, colour);
    } else {
        //otherwise we iterate over each char and only draw those that differ
        int ct;
        for (ct = 0; ct < 6; ct++, prevPointer++)
    7082:	91 e0       	ldi	r25, 0x01	; 1
    7084:	ce 35       	cpi	r28, 0x5E	; 94
    7086:	d9 07       	cpc	r29, r25
    7088:	11 f0       	breq	.+4      	; 0x708e <draw_delta+0xc8>
    708a:	21 96       	adiw	r28, 0x01	; 1
    708c:	e7 cf       	rjmp	.-50     	; 0x705c <draw_delta+0x96>
                display_char_font_col(new_delta_string[ct], FONT_UNISPACE_36, x + (30 * ct), y, colour);
            }       
        }
    }

    strcpy(prev_delta_string, new_delta_string);
    708e:	89 e5       	ldi	r24, 0x59	; 89
    7090:	91 e0       	ldi	r25, 0x01	; 1
    7092:	67 2d       	mov	r22, r7
    7094:	76 2d       	mov	r23, r6
    7096:	0e 94 fb 44 	call	0x89f6	; 0x89f6 <strcpy>
    prev_delta = delta;
    709a:	f0 92 58 01 	sts	0x0158, r15
    709e:	e0 92 57 01 	sts	0x0157, r14
    free(new_delta_string);
    70a2:	87 2d       	mov	r24, r7
    70a4:	96 2d       	mov	r25, r6
    70a6:	0e 94 86 44 	call	0x890c	; 0x890c <free>
}
    70aa:	df 91       	pop	r29
    70ac:	cf 91       	pop	r28
    70ae:	1f 91       	pop	r17
    70b0:	0f 91       	pop	r16
    70b2:	ff 90       	pop	r15
    70b4:	ef 90       	pop	r14
    70b6:	df 90       	pop	r13
    70b8:	cf 90       	pop	r12
    70ba:	bf 90       	pop	r11
    70bc:	af 90       	pop	r10
    70be:	9f 90       	pop	r9
    70c0:	8f 90       	pop	r8
    70c2:	7f 90       	pop	r7
    70c4:	6f 90       	pop	r6
    70c6:	08 95       	ret

000070c8 <draw_laptime>:
    prev_length = new_length;
}


void draw_laptime(char* best_string, int prev_length, int new_length, char* str, int y, uint32_t milli)
{
    70c8:	6f 92       	push	r6
    70ca:	7f 92       	push	r7
    70cc:	8f 92       	push	r8
    70ce:	9f 92       	push	r9
    70d0:	af 92       	push	r10
    70d2:	bf 92       	push	r11
    70d4:	cf 92       	push	r12
    70d6:	df 92       	push	r13
    70d8:	ef 92       	push	r14
    70da:	ff 92       	push	r15
    70dc:	0f 93       	push	r16
    70de:	1f 93       	push	r17
    70e0:	df 93       	push	r29
    70e2:	cf 93       	push	r28
    70e4:	cd b7       	in	r28, 0x3d	; 61
    70e6:	de b7       	in	r29, 0x3e	; 62
    70e8:	28 97       	sbiw	r28, 0x08	; 8
    70ea:	0f b6       	in	r0, 0x3f	; 63
    70ec:	f8 94       	cli
    70ee:	de bf       	out	0x3e, r29	; 62
    70f0:	0f be       	out	0x3f, r0	; 63
    70f2:	cd bf       	out	0x3d, r28	; 61
    70f4:	7c 01       	movw	r14, r24
    70f6:	4a 01       	movw	r8, r20
    70f8:	39 01       	movw	r6, r18
    70fa:	58 01       	movw	r10, r16
    //store a copy of the current best laptime to ensure no character writes occur unnecessarily
    int x;
    char* prevPointer = best_string;

    if (prev_length == 8 && new_length == 7)
    70fc:	68 30       	cpi	r22, 0x08	; 8
    70fe:	71 05       	cpc	r23, r1
    7100:	f9 f4       	brne	.+62     	; 0x7140 <draw_laptime+0x78>
    7102:	47 30       	cpi	r20, 0x07	; 7
    7104:	51 05       	cpc	r21, r1
    7106:	e1 f4       	brne	.+56     	; 0x7140 <draw_laptime+0x78>
    //clear first char as wouldn't be overwritten
    {
        rectangle rect;
        rect.top = y;
    7108:	60 2f       	mov	r22, r16
    710a:	1e 83       	std	Y+6, r17	; 0x06
    710c:	0d 83       	std	Y+5, r16	; 0x05
        rect.bottom = y + 58;
    710e:	c8 01       	movw	r24, r16
    7110:	ca 96       	adiw	r24, 0x3a	; 58
    7112:	98 87       	std	Y+8, r25	; 0x08
    7114:	8f 83       	std	Y+7, r24	; 0x07
        rect.left = 70;
    7116:	46 e4       	ldi	r20, 0x46	; 70
    7118:	50 e0       	ldi	r21, 0x00	; 0
    711a:	24 2f       	mov	r18, r20
    711c:	5a 83       	std	Y+2, r21	; 0x02
    711e:	49 83       	std	Y+1, r20	; 0x01
        rect.right = 99;
    7120:	e3 e6       	ldi	r30, 0x63	; 99
    7122:	f0 e0       	ldi	r31, 0x00	; 0
    7124:	4e 2f       	mov	r20, r30
    7126:	fc 83       	std	Y+4, r31	; 0x04
    7128:	eb 83       	std	Y+3, r30	; 0x03
        fill_rectangle(rect, BLACK);
    712a:	3a 81       	ldd	r19, Y+2	; 0x02
    712c:	5c 81       	ldd	r21, Y+4	; 0x04
    712e:	7e 81       	ldd	r23, Y+6	; 0x06
    7130:	98 85       	ldd	r25, Y+8	; 0x08
    7132:	00 e0       	ldi	r16, 0x00	; 0
    7134:	10 e0       	ldi	r17, 0x00	; 0
    7136:	82 db       	rcall	.-2300   	; 0x683c <fill_rectangle>
        //ensure we start with an offset
        prevPointer++;
    7138:	08 94       	sec
    713a:	e1 1c       	adc	r14, r1
    713c:	f1 1c       	adc	r15, r1
    713e:	07 c0       	rjmp	.+14     	; 0x714e <draw_laptime+0x86>
    }

    if (new_length == 7)
        x = 100;
    if (new_length == 8)
    7140:	98 e0       	ldi	r25, 0x08	; 8
    7142:	89 16       	cp	r8, r25
    7144:	91 04       	cpc	r9, r1
    7146:	19 f4       	brne	.+6      	; 0x714e <draw_laptime+0x86>
    7148:	46 e4       	ldi	r20, 0x46	; 70
    714a:	50 e0       	ldi	r21, 0x00	; 0
    714c:	02 c0       	rjmp	.+4      	; 0x7152 <draw_laptime+0x8a>
    714e:	44 e6       	ldi	r20, 0x64	; 100
    7150:	50 e0       	ldi	r21, 0x00	; 0
    7152:	6a 01       	movw	r12, r20
    7154:	00 e0       	ldi	r16, 0x00	; 0
    7156:	10 e0       	ldi	r17, 0x00	; 0
    7158:	16 c0       	rjmp	.+44     	; 0x7186 <draw_laptime+0xbe>

    //now scan chars and if different set new char
    int ct;
    for (ct = 0; ct < new_length; ct++, prevPointer++)
    {
        if (str[ct] != *prevPointer)
    715a:	f3 01       	movw	r30, r6
    715c:	e0 0f       	add	r30, r16
    715e:	f1 1f       	adc	r31, r17
    7160:	e0 81       	ld	r30, Z
    7162:	d7 01       	movw	r26, r14
    7164:	8c 91       	ld	r24, X
    7166:	e8 17       	cp	r30, r24
    7168:	29 f0       	breq	.+10     	; 0x7174 <draw_laptime+0xac>
        {
            //draw char
            display_char_font(str[ct], FONT_UNISPACE_36, x + (30 * ct), y);
    716a:	8e 2f       	mov	r24, r30
    716c:	61 e0       	ldi	r22, 0x01	; 1
    716e:	a6 01       	movw	r20, r12
    7170:	95 01       	movw	r18, r10
    7172:	d0 dd       	rcall	.-1120   	; 0x6d14 <display_char_font>
    if (new_length == 8)
        x = 70;

    //now scan chars and if different set new char
    int ct;
    for (ct = 0; ct < new_length; ct++, prevPointer++)
    7174:	0f 5f       	subi	r16, 0xFF	; 255
    7176:	1f 4f       	sbci	r17, 0xFF	; 255
    7178:	08 94       	sec
    717a:	e1 1c       	adc	r14, r1
    717c:	f1 1c       	adc	r15, r1
    717e:	8e e1       	ldi	r24, 0x1E	; 30
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	c8 0e       	add	r12, r24
    7184:	d9 1e       	adc	r13, r25
    7186:	08 15       	cp	r16, r8
    7188:	19 05       	cpc	r17, r9
    718a:	3c f3       	brlt	.-50     	; 0x715a <draw_laptime+0x92>
            //draw char
            display_char_font(str[ct], FONT_UNISPACE_36, x + (30 * ct), y);
        }
            
    }
}
    718c:	28 96       	adiw	r28, 0x08	; 8
    718e:	0f b6       	in	r0, 0x3f	; 63
    7190:	f8 94       	cli
    7192:	de bf       	out	0x3e, r29	; 62
    7194:	0f be       	out	0x3f, r0	; 63
    7196:	cd bf       	out	0x3d, r28	; 61
    7198:	cf 91       	pop	r28
    719a:	df 91       	pop	r29
    719c:	1f 91       	pop	r17
    719e:	0f 91       	pop	r16
    71a0:	ff 90       	pop	r15
    71a2:	ef 90       	pop	r14
    71a4:	df 90       	pop	r13
    71a6:	cf 90       	pop	r12
    71a8:	bf 90       	pop	r11
    71aa:	af 90       	pop	r10
    71ac:	9f 90       	pop	r9
    71ae:	8f 90       	pop	r8
    71b0:	7f 90       	pop	r7
    71b2:	6f 90       	pop	r6
    71b4:	08 95       	ret

000071b6 <draw_laptime_current>:
    strcpy(best_string, str);
    prev_length = new_length;
}

void draw_laptime_current(char* str, uint32_t milli)
{
    71b6:	bf 92       	push	r11
    71b8:	cf 92       	push	r12
    71ba:	df 92       	push	r13
    71bc:	ef 92       	push	r14
    71be:	ff 92       	push	r15
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	ec 01       	movw	r28, r24
    71ca:	6a 01       	movw	r12, r20
    71cc:	7b 01       	movw	r14, r22
    static char current_string[10];
    static int prev_length;
    uint8_t new_length = (milli < TEN_MINUTES) ? 7 : 8;
    71ce:	40 3c       	cpi	r20, 0xC0	; 192
    71d0:	87 e2       	ldi	r24, 0x27	; 39
    71d2:	58 07       	cpc	r21, r24
    71d4:	89 e0       	ldi	r24, 0x09	; 9
    71d6:	68 07       	cpc	r22, r24
    71d8:	80 e0       	ldi	r24, 0x00	; 0
    71da:	78 07       	cpc	r23, r24
    71dc:	18 f0       	brcs	.+6      	; 0x71e4 <draw_laptime_current+0x2e>
    71de:	68 e0       	ldi	r22, 0x08	; 8
    71e0:	b6 2e       	mov	r11, r22
    71e2:	02 c0       	rjmp	.+4      	; 0x71e8 <draw_laptime_current+0x32>
    71e4:	57 e0       	ldi	r21, 0x07	; 7
    71e6:	b5 2e       	mov	r11, r21

    draw_laptime(current_string, prev_length, new_length, str, 90, milli);
    71e8:	60 91 63 01 	lds	r22, 0x0163
    71ec:	70 91 64 01 	lds	r23, 0x0164
    71f0:	85 e6       	ldi	r24, 0x65	; 101
    71f2:	91 e0       	ldi	r25, 0x01	; 1
    71f4:	4b 2d       	mov	r20, r11
    71f6:	50 e0       	ldi	r21, 0x00	; 0
    71f8:	9e 01       	movw	r18, r28
    71fa:	0a e5       	ldi	r16, 0x5A	; 90
    71fc:	10 e0       	ldi	r17, 0x00	; 0
    71fe:	64 df       	rcall	.-312    	; 0x70c8 <draw_laptime>

    strcpy(current_string, str);
    7200:	85 e6       	ldi	r24, 0x65	; 101
    7202:	91 e0       	ldi	r25, 0x01	; 1
    7204:	be 01       	movw	r22, r28
    7206:	0e 94 fb 44 	call	0x89f6	; 0x89f6 <strcpy>
    prev_length = new_length;
    720a:	b0 92 63 01 	sts	0x0163, r11
    720e:	10 92 64 01 	sts	0x0164, r1
}
    7212:	df 91       	pop	r29
    7214:	cf 91       	pop	r28
    7216:	1f 91       	pop	r17
    7218:	0f 91       	pop	r16
    721a:	ff 90       	pop	r15
    721c:	ef 90       	pop	r14
    721e:	df 90       	pop	r13
    7220:	cf 90       	pop	r12
    7222:	bf 90       	pop	r11
    7224:	08 95       	ret

00007226 <draw_laptime_best>:
    draw_laptime_current("0:00.00", 0);
    draw_delta(0);
}

void draw_laptime_best(char* str, uint32_t milli)
{
    7226:	bf 92       	push	r11
    7228:	cf 92       	push	r12
    722a:	df 92       	push	r13
    722c:	ef 92       	push	r14
    722e:	ff 92       	push	r15
    7230:	0f 93       	push	r16
    7232:	1f 93       	push	r17
    7234:	cf 93       	push	r28
    7236:	df 93       	push	r29
    7238:	ec 01       	movw	r28, r24
    723a:	6a 01       	movw	r12, r20
    723c:	7b 01       	movw	r14, r22
    static char best_string[10];
    static int prev_length;
    uint8_t new_length = (milli < TEN_MINUTES) ? 7 : 8;
    723e:	40 3c       	cpi	r20, 0xC0	; 192
    7240:	87 e2       	ldi	r24, 0x27	; 39
    7242:	58 07       	cpc	r21, r24
    7244:	89 e0       	ldi	r24, 0x09	; 9
    7246:	68 07       	cpc	r22, r24
    7248:	80 e0       	ldi	r24, 0x00	; 0
    724a:	78 07       	cpc	r23, r24
    724c:	18 f0       	brcs	.+6      	; 0x7254 <draw_laptime_best+0x2e>
    724e:	e8 e0       	ldi	r30, 0x08	; 8
    7250:	be 2e       	mov	r11, r30
    7252:	02 c0       	rjmp	.+4      	; 0x7258 <draw_laptime_best+0x32>
    7254:	77 e0       	ldi	r23, 0x07	; 7
    7256:	b7 2e       	mov	r11, r23

    draw_laptime(best_string, prev_length, new_length, str, 15, milli);
    7258:	60 91 6f 01 	lds	r22, 0x016F
    725c:	70 91 70 01 	lds	r23, 0x0170
    7260:	81 e7       	ldi	r24, 0x71	; 113
    7262:	91 e0       	ldi	r25, 0x01	; 1
    7264:	4b 2d       	mov	r20, r11
    7266:	50 e0       	ldi	r21, 0x00	; 0
    7268:	9e 01       	movw	r18, r28
    726a:	0f e0       	ldi	r16, 0x0F	; 15
    726c:	10 e0       	ldi	r17, 0x00	; 0
    726e:	2c df       	rcall	.-424    	; 0x70c8 <draw_laptime>

    strcpy(best_string, str);
    7270:	81 e7       	ldi	r24, 0x71	; 113
    7272:	91 e0       	ldi	r25, 0x01	; 1
    7274:	be 01       	movw	r22, r28
    7276:	0e 94 fb 44 	call	0x89f6	; 0x89f6 <strcpy>
    prev_length = new_length;
    727a:	b0 92 6f 01 	sts	0x016F, r11
    727e:	10 92 70 01 	sts	0x0170, r1
}
    7282:	df 91       	pop	r29
    7284:	cf 91       	pop	r28
    7286:	1f 91       	pop	r17
    7288:	0f 91       	pop	r16
    728a:	ff 90       	pop	r15
    728c:	ef 90       	pop	r14
    728e:	df 90       	pop	r13
    7290:	cf 90       	pop	r12
    7292:	bf 90       	pop	r11
    7294:	08 95       	ret

00007296 <clear_display_laptimes>:
    display_string_font("Current", FONT_UNISPACE_14, 10, 125);
    clear_display_laptimes();
}

void clear_display_laptimes(void)
{
    7296:	0f 93       	push	r16
    7298:	1f 93       	push	r17
    draw_laptime_best("0:00.00", 0);
    729a:	0f e2       	ldi	r16, 0x2F	; 47
    729c:	11 e0       	ldi	r17, 0x01	; 1
    729e:	c8 01       	movw	r24, r16
    72a0:	40 e0       	ldi	r20, 0x00	; 0
    72a2:	50 e0       	ldi	r21, 0x00	; 0
    72a4:	60 e0       	ldi	r22, 0x00	; 0
    72a6:	70 e0       	ldi	r23, 0x00	; 0
    72a8:	be df       	rcall	.-132    	; 0x7226 <draw_laptime_best>
    draw_laptime_current("0:00.00", 0);
    72aa:	c8 01       	movw	r24, r16
    72ac:	40 e0       	ldi	r20, 0x00	; 0
    72ae:	50 e0       	ldi	r21, 0x00	; 0
    72b0:	60 e0       	ldi	r22, 0x00	; 0
    72b2:	70 e0       	ldi	r23, 0x00	; 0
    72b4:	80 df       	rcall	.-256    	; 0x71b6 <draw_laptime_current>
    draw_delta(0);
    72b6:	80 e0       	ldi	r24, 0x00	; 0
    72b8:	90 e0       	ldi	r25, 0x00	; 0
    72ba:	85 de       	rcall	.-758    	; 0x6fc6 <draw_delta>
}
    72bc:	1f 91       	pop	r17
    72be:	0f 91       	pop	r16
    72c0:	08 95       	ret

000072c2 <display_laptimes>:
    }
    return str;
}

void display_laptimes(void)
{
    72c2:	cf 92       	push	r12
    72c4:	df 92       	push	r13
    72c6:	ef 92       	push	r14
    72c8:	ff 92       	push	r15
    72ca:	0f 93       	push	r16
    72cc:	1f 93       	push	r17
    if (current_game == ASSETTO_CORSA)
    72ce:	80 91 45 04 	lds	r24, 0x0445
    72d2:	88 23       	and	r24, r24
    72d4:	09 f0       	breq	.+2      	; 0x72d8 <display_laptimes+0x16>
    72d6:	58 c0       	rjmp	.+176    	; 0x7388 <display_laptimes+0xc6>
    {
        //Now display assetto corsa laptimes
        if (ac_data_initialised)
    72d8:	80 91 44 04 	lds	r24, 0x0444
    72dc:	88 23       	and	r24, r24
    72de:	09 f4       	brne	.+2      	; 0x72e2 <display_laptimes+0x20>
    72e0:	53 c0       	rjmp	.+166    	; 0x7388 <display_laptimes+0xc6>
        {
            //If ac running..
            if (acData->status == AC_LIVE)
    72e2:	e0 91 40 04 	lds	r30, 0x0440
    72e6:	f0 91 41 04 	lds	r31, 0x0441
    72ea:	81 81       	ldd	r24, Z+1	; 0x01
    72ec:	82 30       	cpi	r24, 0x02	; 2
    72ee:	09 f0       	breq	.+2      	; 0x72f2 <display_laptimes+0x30>
    72f0:	4a c0       	rjmp	.+148    	; 0x7386 <display_laptimes+0xc4>
            {

                //Display best
                char* str;
                uint32_t bestTime = acData->lapTimes.bestTime;
    72f2:	c3 a0       	ldd	r12, Z+35	; 0x23
    72f4:	d4 a0       	ldd	r13, Z+36	; 0x24
    72f6:	e5 a0       	ldd	r14, Z+37	; 0x25
    72f8:	f6 a0       	ldd	r15, Z+38	; 0x26
                if (bestTime < MAX_MINUTES_101)
    72fa:	80 e8       	ldi	r24, 0x80	; 128
    72fc:	c8 16       	cp	r12, r24
    72fe:	8d e8       	ldi	r24, 0x8D	; 141
    7300:	d8 06       	cpc	r13, r24
    7302:	8b e5       	ldi	r24, 0x5B	; 91
    7304:	e8 06       	cpc	r14, r24
    7306:	80 e0       	ldi	r24, 0x00	; 0
    7308:	f8 06       	cpc	r15, r24
    730a:	58 f4       	brcc	.+22     	; 0x7322 <display_laptimes+0x60>
                {
                    str = milli_to_string(bestTime);
    730c:	c7 01       	movw	r24, r14
    730e:	b6 01       	movw	r22, r12
    7310:	9e dd       	rcall	.-1220   	; 0x6e4e <milli_to_string>
    7312:	8c 01       	movw	r16, r24
                    draw_laptime_best(str, bestTime);
    7314:	b7 01       	movw	r22, r14
    7316:	a6 01       	movw	r20, r12
    7318:	86 df       	rcall	.-244    	; 0x7226 <draw_laptime_best>
                    free(str);
    731a:	c8 01       	movw	r24, r16
    731c:	0e 94 86 44 	call	0x890c	; 0x890c <free>
    7320:	07 c0       	rjmp	.+14     	; 0x7330 <display_laptimes+0x6e>
               } else 
                    draw_laptime_best("0:00.00", 0);
    7322:	8f e2       	ldi	r24, 0x2F	; 47
    7324:	91 e0       	ldi	r25, 0x01	; 1
    7326:	40 e0       	ldi	r20, 0x00	; 0
    7328:	50 e0       	ldi	r21, 0x00	; 0
    732a:	60 e0       	ldi	r22, 0x00	; 0
    732c:	70 e0       	ldi	r23, 0x00	; 0
    732e:	7b df       	rcall	.-266    	; 0x7226 <draw_laptime_best>

                //Display current
                uint32_t currentTime = acData->lapTimes.currentTime;
    7330:	e0 91 40 04 	lds	r30, 0x0440
    7334:	f0 91 41 04 	lds	r31, 0x0441
    7338:	c3 8c       	ldd	r12, Z+27	; 0x1b
    733a:	d4 8c       	ldd	r13, Z+28	; 0x1c
    733c:	e5 8c       	ldd	r14, Z+29	; 0x1d
    733e:	f6 8c       	ldd	r15, Z+30	; 0x1e
                if (currentTime < MAX_MINUTES_101)
    7340:	80 e8       	ldi	r24, 0x80	; 128
    7342:	c8 16       	cp	r12, r24
    7344:	8d e8       	ldi	r24, 0x8D	; 141
    7346:	d8 06       	cpc	r13, r24
    7348:	8b e5       	ldi	r24, 0x5B	; 91
    734a:	e8 06       	cpc	r14, r24
    734c:	80 e0       	ldi	r24, 0x00	; 0
    734e:	f8 06       	cpc	r15, r24
    7350:	58 f4       	brcc	.+22     	; 0x7368 <display_laptimes+0xa6>
                {
                    str = milli_to_string(currentTime);
    7352:	c7 01       	movw	r24, r14
    7354:	b6 01       	movw	r22, r12
    7356:	7b dd       	rcall	.-1290   	; 0x6e4e <milli_to_string>
    7358:	8c 01       	movw	r16, r24
                    draw_laptime_current(str, currentTime);
    735a:	b7 01       	movw	r22, r14
    735c:	a6 01       	movw	r20, r12
    735e:	2b df       	rcall	.-426    	; 0x71b6 <draw_laptime_current>
                    free(str);
    7360:	c8 01       	movw	r24, r16
    7362:	0e 94 86 44 	call	0x890c	; 0x890c <free>
    7366:	07 c0       	rjmp	.+14     	; 0x7376 <display_laptimes+0xb4>
                } else 
                    draw_laptime_current("0:00.00", 0);
    7368:	8f e2       	ldi	r24, 0x2F	; 47
    736a:	91 e0       	ldi	r25, 0x01	; 1
    736c:	40 e0       	ldi	r20, 0x00	; 0
    736e:	50 e0       	ldi	r21, 0x00	; 0
    7370:	60 e0       	ldi	r22, 0x00	; 0
    7372:	70 e0       	ldi	r23, 0x00	; 0
    7374:	20 df       	rcall	.-448    	; 0x71b6 <draw_laptime_current>

                //Display delta
                draw_delta(acData->lapTimes.delta);
    7376:	e0 91 40 04 	lds	r30, 0x0440
    737a:	f0 91 41 04 	lds	r31, 0x0441
    737e:	87 a1       	ldd	r24, Z+39	; 0x27
    7380:	90 a5       	ldd	r25, Z+40	; 0x28
    7382:	21 de       	rcall	.-958    	; 0x6fc6 <draw_delta>
    7384:	01 c0       	rjmp	.+2      	; 0x7388 <display_laptimes+0xc6>
            } else {
                //Clear display
                clear_display_laptimes();
    7386:	87 df       	rcall	.-242    	; 0x7296 <clear_display_laptimes>
            }
        }
    }
}
    7388:	1f 91       	pop	r17
    738a:	0f 91       	pop	r16
    738c:	ff 90       	pop	r15
    738e:	ef 90       	pop	r14
    7390:	df 90       	pop	r13
    7392:	cf 90       	pop	r12
    7394:	08 95       	ret

00007396 <refresh_display>:
    }
}

int refresh_display(int state)
{
    switch(display_mode)
    7396:	80 91 42 04 	lds	r24, 0x0442
    739a:	88 23       	and	r24, r24
    739c:	09 f4       	brne	.+2      	; 0x73a0 <refresh_display+0xa>
    {
        case DISPLAY_MODE_LAPTIMES : 
            display_laptimes();
    739e:	91 cf       	rjmp	.-222    	; 0x72c2 <display_laptimes>
        case DISPLAY_MODE_TYRE_TEMPERATURES :
            break;
        default:
            break;
    }
}
    73a0:	08 95       	ret

000073a2 <init_display_laptimes>:

void init_display_laptimes(void)
{
    73a2:	0f 93       	push	r16
    73a4:	1f 93       	push	r17
    73a6:	df 93       	push	r29
    73a8:	cf 93       	push	r28
    73aa:	cd b7       	in	r28, 0x3d	; 61
    73ac:	de b7       	in	r29, 0x3e	; 62
    73ae:	28 97       	sbiw	r28, 0x08	; 8
    73b0:	0f b6       	in	r0, 0x3f	; 63
    73b2:	f8 94       	cli
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	0f be       	out	0x3f, r0	; 63
    73b8:	cd bf       	out	0x3d, r28	; 61
    rectangle rect;
    rect.left = 10;
    73ba:	8a e0       	ldi	r24, 0x0A	; 10
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	28 2f       	mov	r18, r24
    73c0:	9a 83       	std	Y+2, r25	; 0x02
    73c2:	89 83       	std	Y+1, r24	; 0x01
    rect.right = 310;
    73c4:	86 e3       	ldi	r24, 0x36	; 54
    73c6:	91 e0       	ldi	r25, 0x01	; 1
    73c8:	48 2f       	mov	r20, r24
    73ca:	9c 83       	std	Y+4, r25	; 0x04
    73cc:	8b 83       	std	Y+3, r24	; 0x03
    rect.top = 158;
    73ce:	8e e9       	ldi	r24, 0x9E	; 158
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	68 2f       	mov	r22, r24
    73d4:	9e 83       	std	Y+6, r25	; 0x06
    73d6:	8d 83       	std	Y+5, r24	; 0x05
    rect.bottom = 162;
    73d8:	82 ea       	ldi	r24, 0xA2	; 162
    73da:	90 e0       	ldi	r25, 0x00	; 0
    73dc:	98 87       	std	Y+8, r25	; 0x08
    73de:	8f 83       	std	Y+7, r24	; 0x07
    fill_rectangle(rect, WHITE);
    73e0:	3a 81       	ldd	r19, Y+2	; 0x02
    73e2:	5c 81       	ldd	r21, Y+4	; 0x04
    73e4:	7e 81       	ldd	r23, Y+6	; 0x06
    73e6:	98 85       	ldd	r25, Y+8	; 0x08
    73e8:	0f ef       	ldi	r16, 0xFF	; 255
    73ea:	1f ef       	ldi	r17, 0xFF	; 255
    73ec:	27 da       	rcall	.-2994   	; 0x683c <fill_rectangle>

    display_string_font("Best", FONT_UNISPACE_14, 10, 53);
    73ee:	87 e3       	ldi	r24, 0x37	; 55
    73f0:	91 e0       	ldi	r25, 0x01	; 1
    73f2:	60 e0       	ldi	r22, 0x00	; 0
    73f4:	4a e0       	ldi	r20, 0x0A	; 10
    73f6:	50 e0       	ldi	r21, 0x00	; 0
    73f8:	25 e3       	ldi	r18, 0x35	; 53
    73fa:	30 e0       	ldi	r19, 0x00	; 0
    73fc:	95 dc       	rcall	.-1750   	; 0x6d28 <display_string_font>
    display_string_font("Current", FONT_UNISPACE_14, 10, 125);
    73fe:	8c e3       	ldi	r24, 0x3C	; 60
    7400:	91 e0       	ldi	r25, 0x01	; 1
    7402:	60 e0       	ldi	r22, 0x00	; 0
    7404:	4a e0       	ldi	r20, 0x0A	; 10
    7406:	50 e0       	ldi	r21, 0x00	; 0
    7408:	2d e7       	ldi	r18, 0x7D	; 125
    740a:	30 e0       	ldi	r19, 0x00	; 0
    740c:	8d dc       	rcall	.-1766   	; 0x6d28 <display_string_font>
    clear_display_laptimes();
    740e:	43 df       	rcall	.-378    	; 0x7296 <clear_display_laptimes>
}
    7410:	28 96       	adiw	r28, 0x08	; 8
    7412:	0f b6       	in	r0, 0x3f	; 63
    7414:	f8 94       	cli
    7416:	de bf       	out	0x3e, r29	; 62
    7418:	0f be       	out	0x3f, r0	; 63
    741a:	cd bf       	out	0x3d, r28	; 61
    741c:	cf 91       	pop	r28
    741e:	df 91       	pop	r29
    7420:	1f 91       	pop	r17
    7422:	0f 91       	pop	r16
    7424:	08 95       	ret

00007426 <collect_switch_presses>:
    os_add_task(collect_switch_presses, 80, 1);
}

int collect_switch_presses(int state)
{
    if (get_switch_press(_BV(SWW)))
    7426:	80 e2       	ldi	r24, 0x20	; 32
    7428:	41 d8       	rcall	.-3966   	; 0x64ac <get_switch_press>
    {
        
    }
    
    if (get_switch_press(_BV(SWE)))
    742a:	88 e0       	ldi	r24, 0x08	; 8
    {
        
    }
}
    742c:	3f c8       	rjmp	.-3970   	; 0x64ac <get_switch_press>

0000742e <init_display_controller>:
}

void init_display_controller(void)
{
    //we will change this..
    acData = malloc(sizeof(ACData));
    742e:	8e e2       	ldi	r24, 0x2E	; 46
    7430:	90 e0       	ldi	r25, 0x00	; 0
    7432:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <malloc>
    7436:	80 93 40 04 	sts	0x0440, r24
    743a:	90 93 41 04 	sts	0x0441, r25
    acTyreData = malloc(sizeof(ACTyreData));
    743e:	85 e2       	ldi	r24, 0x25	; 37
    7440:	90 e0       	ldi	r25, 0x00	; 0
    7442:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <malloc>
    7446:	80 93 46 04 	sts	0x0446, r24
    744a:	90 93 47 04 	sts	0x0447, r25
    display_mode = DISPLAY_MODE_LAPTIMES;
    744e:	10 92 42 04 	sts	0x0442, r1

    os_add_task(refresh_display,40,1);
    7452:	8b ec       	ldi	r24, 0xCB	; 203
    7454:	99 e3       	ldi	r25, 0x39	; 57
    7456:	48 e2       	ldi	r20, 0x28	; 40
    7458:	50 e0       	ldi	r21, 0x00	; 0
    745a:	60 e0       	ldi	r22, 0x00	; 0
    745c:	70 e0       	ldi	r23, 0x00	; 0
    745e:	21 e0       	ldi	r18, 0x01	; 1
    7460:	30 e0       	ldi	r19, 0x00	; 0
    7462:	2c d9       	rcall	.-3496   	; 0x66bc <os_add_task>
    os_add_task(collect_switch_presses, 80, 1);
    7464:	83 e1       	ldi	r24, 0x13	; 19
    7466:	9a e3       	ldi	r25, 0x3A	; 58
    7468:	40 e5       	ldi	r20, 0x50	; 80
    746a:	50 e0       	ldi	r21, 0x00	; 0
    746c:	60 e0       	ldi	r22, 0x00	; 0
    746e:	70 e0       	ldi	r23, 0x00	; 0
    7470:	21 e0       	ldi	r18, 0x01	; 1
    7472:	30 e0       	ldi	r19, 0x00	; 0
}
    7474:	23 c9       	rjmp	.-3514   	; 0x66bc <os_add_task>

00007476 <process_ac_data>:
    }    
}


void process_ac_data(const uint8_t* ReportData)
{
    7476:	9c 01       	movw	r18, r24
    if (acData != NULL){
    7478:	80 91 40 04 	lds	r24, 0x0440
    747c:	90 91 41 04 	lds	r25, 0x0441
    7480:	00 97       	sbiw	r24, 0x00	; 0
    7482:	81 f0       	breq	.+32     	; 0x74a4 <process_ac_data+0x2e>
        current_game = ASSETTO_CORSA;
    7484:	10 92 45 04 	sts	0x0445, r1

        memcpy(acData, ReportData, sizeof(ACData));
    7488:	dc 01       	movw	r26, r24
    748a:	f9 01       	movw	r30, r18
    748c:	8e e2       	ldi	r24, 0x2E	; 46
    748e:	01 90       	ld	r0, Z+
    7490:	0d 92       	st	X+, r0
    7492:	81 50       	subi	r24, 0x01	; 1
    7494:	e1 f7       	brne	.-8      	; 0x748e <process_ac_data+0x18>


        if(!ac_data_initialised)
    7496:	80 91 44 04 	lds	r24, 0x0444
    749a:	88 23       	and	r24, r24
    749c:	19 f4       	brne	.+6      	; 0x74a4 <process_ac_data+0x2e>
            ac_data_initialised = true;
    749e:	81 e0       	ldi	r24, 0x01	; 1
    74a0:	80 93 44 04 	sts	0x0444, r24
    74a4:	08 95       	ret

000074a6 <process_ac_tyre_data>:
            break;        
    }
}

void process_ac_tyre_data(const uint8_t* ReportData)
{
    74a6:	9c 01       	movw	r18, r24
    if (acTyreData != NULL)
    74a8:	80 91 46 04 	lds	r24, 0x0446
    74ac:	90 91 47 04 	lds	r25, 0x0447
    74b0:	00 97       	sbiw	r24, 0x00	; 0
    74b2:	81 f0       	breq	.+32     	; 0x74d4 <process_ac_tyre_data+0x2e>
    {
        current_game = ASSETTO_CORSA;
    74b4:	10 92 45 04 	sts	0x0445, r1

        memcpy(acTyreData, ReportData, sizeof(ACTyreData));
    74b8:	dc 01       	movw	r26, r24
    74ba:	f9 01       	movw	r30, r18
    74bc:	85 e2       	ldi	r24, 0x25	; 37
    74be:	01 90       	ld	r0, Z+
    74c0:	0d 92       	st	X+, r0
    74c2:	81 50       	subi	r24, 0x01	; 1
    74c4:	e1 f7       	brne	.-8      	; 0x74be <process_ac_tyre_data+0x18>

        if (!ac_tyre_data_initialised)
    74c6:	80 91 43 04 	lds	r24, 0x0443
    74ca:	88 23       	and	r24, r24
    74cc:	19 f4       	brne	.+6      	; 0x74d4 <process_ac_tyre_data+0x2e>
            ac_tyre_data_initialised = true;
    74ce:	81 e0       	ldi	r24, 0x01	; 1
    74d0:	80 93 43 04 	sts	0x0443, r24
    74d4:	08 95       	ret

000074d6 <receive_packet>:
void draw_laptime_current(char* str, uint32_t milli);
void draw_laptime_best(char* str, uint32_t milli);
void draw_laptime(char* best_string, int prev_length, int new_length, char* str, int y, uint32_t milli);

void receive_packet(const uint8_t* ReportData)
{
    74d6:	fc 01       	movw	r30, r24
    switch (ReportData[0])
    74d8:	80 81       	ld	r24, Z
    74da:	81 30       	cpi	r24, 0x01	; 1
    74dc:	19 f0       	breq	.+6      	; 0x74e4 <receive_packet+0xe>
    74de:	82 30       	cpi	r24, 0x02	; 2
    74e0:	29 f4       	brne	.+10     	; 0x74ec <receive_packet+0x16>
    74e2:	02 c0       	rjmp	.+4      	; 0x74e8 <receive_packet+0x12>
    {
        case AC_TYRE_DATA:
            process_ac_tyre_data(ReportData);
    74e4:	cf 01       	movw	r24, r30
    74e6:	df cf       	rjmp	.-66     	; 0x74a6 <process_ac_tyre_data>
            break;
        case AC_DATA:
            process_ac_data(ReportData);
    74e8:	cf 01       	movw	r24, r30
    74ea:	c5 cf       	rjmp	.-118    	; 0x7476 <process_ac_data>
    74ec:	08 95       	ret

000074ee <Endpoint_Write_Control_Stream_LE>:
    74ee:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    74f0:	40 91 53 04 	lds	r20, 0x0453
    74f4:	50 91 54 04 	lds	r21, 0x0454
    74f8:	46 17       	cp	r20, r22
    74fa:	57 07       	cpc	r21, r23
    74fc:	18 f4       	brcc	.+6      	; 0x7504 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    74fe:	f9 01       	movw	r30, r18
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	3d c0       	rjmp	.+122    	; 0x757e <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7504:	61 15       	cp	r22, r1
    7506:	71 05       	cpc	r23, r1
    7508:	11 f0       	breq	.+4      	; 0x750e <Endpoint_Write_Control_Stream_LE+0x20>
    750a:	ab 01       	movw	r20, r22
    750c:	f8 cf       	rjmp	.-16     	; 0x74fe <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    750e:	80 91 e8 00 	lds	r24, 0x00E8
    7512:	8e 77       	andi	r24, 0x7E	; 126
    7514:	80 93 e8 00 	sts	0x00E8, r24
    7518:	40 e0       	ldi	r20, 0x00	; 0
    751a:	50 e0       	ldi	r21, 0x00	; 0
    751c:	f0 cf       	rjmp	.-32     	; 0x74fe <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    751e:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7522:	88 23       	and	r24, r24
    7524:	09 f4       	brne	.+2      	; 0x7528 <Endpoint_Write_Control_Stream_LE+0x3a>
    7526:	41 c0       	rjmp	.+130    	; 0x75aa <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7528:	85 30       	cpi	r24, 0x05	; 5
    752a:	09 f4       	brne	.+2      	; 0x752e <Endpoint_Write_Control_Stream_LE+0x40>
    752c:	40 c0       	rjmp	.+128    	; 0x75ae <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    752e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7532:	83 fd       	sbrc	r24, 3
    7534:	3e c0       	rjmp	.+124    	; 0x75b2 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7536:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    753a:	82 fd       	sbrc	r24, 2
    753c:	30 c0       	rjmp	.+96     	; 0x759e <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    753e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7542:	80 ff       	sbrs	r24, 0
    7544:	1c c0       	rjmp	.+56     	; 0x757e <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    7546:	20 91 f2 00 	lds	r18, 0x00F2
    754a:	30 91 f3 00 	lds	r19, 0x00F3
    754e:	07 c0       	rjmp	.+14     	; 0x755e <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7550:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7552:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7556:	41 50       	subi	r20, 0x01	; 1
    7558:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    755a:	2f 5f       	subi	r18, 0xFF	; 255
    755c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    755e:	41 15       	cp	r20, r1
    7560:	51 05       	cpc	r21, r1
    7562:	19 f0       	breq	.+6      	; 0x756a <Endpoint_Write_Control_Stream_LE+0x7c>
    7564:	28 30       	cpi	r18, 0x08	; 8
    7566:	31 05       	cpc	r19, r1
    7568:	98 f3       	brcs	.-26     	; 0x7550 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    756a:	90 e0       	ldi	r25, 0x00	; 0
    756c:	28 30       	cpi	r18, 0x08	; 8
    756e:	31 05       	cpc	r19, r1
    7570:	09 f4       	brne	.+2      	; 0x7574 <Endpoint_Write_Control_Stream_LE+0x86>
    7572:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7574:	80 91 e8 00 	lds	r24, 0x00E8
    7578:	8e 77       	andi	r24, 0x7E	; 126
    757a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    757e:	41 15       	cp	r20, r1
    7580:	51 05       	cpc	r21, r1
    7582:	69 f6       	brne	.-102    	; 0x751e <Endpoint_Write_Control_Stream_LE+0x30>
    7584:	99 23       	and	r25, r25
    7586:	59 f6       	brne	.-106    	; 0x751e <Endpoint_Write_Control_Stream_LE+0x30>
    7588:	0a c0       	rjmp	.+20     	; 0x759e <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    758a:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    758e:	88 23       	and	r24, r24
    7590:	61 f0       	breq	.+24     	; 0x75aa <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7592:	85 30       	cpi	r24, 0x05	; 5
    7594:	61 f0       	breq	.+24     	; 0x75ae <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7596:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    759a:	83 fd       	sbrc	r24, 3
    759c:	0a c0       	rjmp	.+20     	; 0x75b2 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    759e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    75a2:	82 ff       	sbrs	r24, 2
    75a4:	f2 cf       	rjmp	.-28     	; 0x758a <Endpoint_Write_Control_Stream_LE+0x9c>
    75a6:	80 e0       	ldi	r24, 0x00	; 0
    75a8:	08 95       	ret
    75aa:	82 e0       	ldi	r24, 0x02	; 2
    75ac:	08 95       	ret
    75ae:	83 e0       	ldi	r24, 0x03	; 3
    75b0:	08 95       	ret
    75b2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    75b4:	08 95       	ret

000075b6 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    75b6:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    75b8:	61 15       	cp	r22, r1
    75ba:	71 05       	cpc	r23, r1
    75bc:	29 f4       	brne	.+10     	; 0x75c8 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    75be:	80 91 e8 00 	lds	r24, 0x00E8
    75c2:	8b 77       	andi	r24, 0x7B	; 123
    75c4:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    75c8:	f9 01       	movw	r30, r18
    75ca:	22 c0       	rjmp	.+68     	; 0x7610 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    75cc:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    75d0:	88 23       	and	r24, r24
    75d2:	71 f1       	breq	.+92     	; 0x7630 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    75d4:	85 30       	cpi	r24, 0x05	; 5
    75d6:	71 f1       	breq	.+92     	; 0x7634 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    75d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    75dc:	83 ff       	sbrs	r24, 3
    75de:	02 c0       	rjmp	.+4      	; 0x75e4 <Endpoint_Read_Control_Stream_LE+0x2e>
    75e0:	81 e0       	ldi	r24, 0x01	; 1
    75e2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    75e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    75e8:	82 ff       	sbrs	r24, 2
    75ea:	f0 cf       	rjmp	.-32     	; 0x75cc <Endpoint_Read_Control_Stream_LE+0x16>
    75ec:	06 c0       	rjmp	.+12     	; 0x75fa <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    75ee:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    75f2:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    75f4:	61 50       	subi	r22, 0x01	; 1
    75f6:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    75f8:	31 f0       	breq	.+12     	; 0x7606 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    75fa:	80 91 f2 00 	lds	r24, 0x00F2
    75fe:	90 91 f3 00 	lds	r25, 0x00F3
    7602:	89 2b       	or	r24, r25
    7604:	a1 f7       	brne	.-24     	; 0x75ee <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7606:	80 91 e8 00 	lds	r24, 0x00E8
    760a:	8b 77       	andi	r24, 0x7B	; 123
    760c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7610:	61 15       	cp	r22, r1
    7612:	71 05       	cpc	r23, r1
    7614:	d9 f6       	brne	.-74     	; 0x75cc <Endpoint_Read_Control_Stream_LE+0x16>
    7616:	06 c0       	rjmp	.+12     	; 0x7624 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7618:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    761c:	88 23       	and	r24, r24
    761e:	41 f0       	breq	.+16     	; 0x7630 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7620:	85 30       	cpi	r24, 0x05	; 5
    7622:	41 f0       	breq	.+16     	; 0x7634 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7624:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7628:	80 ff       	sbrs	r24, 0
    762a:	f6 cf       	rjmp	.-20     	; 0x7618 <Endpoint_Read_Control_Stream_LE+0x62>
    762c:	80 e0       	ldi	r24, 0x00	; 0
    762e:	08 95       	ret
    7630:	82 e0       	ldi	r24, 0x02	; 2
    7632:	08 95       	ret
    7634:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7636:	08 95       	ret

00007638 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    7638:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    763a:	40 91 53 04 	lds	r20, 0x0453
    763e:	50 91 54 04 	lds	r21, 0x0454
    7642:	46 17       	cp	r20, r22
    7644:	57 07       	cpc	r21, r23
    7646:	18 f4       	brcc	.+6      	; 0x764e <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7648:	f9 01       	movw	r30, r18
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	3e c0       	rjmp	.+124    	; 0x76ca <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    764e:	61 15       	cp	r22, r1
    7650:	71 05       	cpc	r23, r1
    7652:	11 f0       	breq	.+4      	; 0x7658 <Endpoint_Write_Control_PStream_LE+0x20>
    7654:	ab 01       	movw	r20, r22
    7656:	f8 cf       	rjmp	.-16     	; 0x7648 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7658:	80 91 e8 00 	lds	r24, 0x00E8
    765c:	8e 77       	andi	r24, 0x7E	; 126
    765e:	80 93 e8 00 	sts	0x00E8, r24
    7662:	40 e0       	ldi	r20, 0x00	; 0
    7664:	50 e0       	ldi	r21, 0x00	; 0
    7666:	f0 cf       	rjmp	.-32     	; 0x7648 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7668:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    766c:	88 23       	and	r24, r24
    766e:	09 f4       	brne	.+2      	; 0x7672 <Endpoint_Write_Control_PStream_LE+0x3a>
    7670:	42 c0       	rjmp	.+132    	; 0x76f6 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7672:	85 30       	cpi	r24, 0x05	; 5
    7674:	09 f4       	brne	.+2      	; 0x7678 <Endpoint_Write_Control_PStream_LE+0x40>
    7676:	41 c0       	rjmp	.+130    	; 0x76fa <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7678:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    767c:	83 fd       	sbrc	r24, 3
    767e:	3f c0       	rjmp	.+126    	; 0x76fe <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7680:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7684:	82 fd       	sbrc	r24, 2
    7686:	31 c0       	rjmp	.+98     	; 0x76ea <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7688:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    768c:	80 ff       	sbrs	r24, 0
    768e:	1d c0       	rjmp	.+58     	; 0x76ca <Endpoint_Write_Control_PStream_LE+0x92>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    7690:	20 91 f2 00 	lds	r18, 0x00F2
    7694:	30 91 f3 00 	lds	r19, 0x00F3
    7698:	08 c0       	rjmp	.+16     	; 0x76aa <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    769a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    769c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    76a0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    76a2:	41 50       	subi	r20, 0x01	; 1
    76a4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    76a6:	2f 5f       	subi	r18, 0xFF	; 255
    76a8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    76aa:	41 15       	cp	r20, r1
    76ac:	51 05       	cpc	r21, r1
    76ae:	19 f0       	breq	.+6      	; 0x76b6 <Endpoint_Write_Control_PStream_LE+0x7e>
    76b0:	28 30       	cpi	r18, 0x08	; 8
    76b2:	31 05       	cpc	r19, r1
    76b4:	90 f3       	brcs	.-28     	; 0x769a <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	28 30       	cpi	r18, 0x08	; 8
    76ba:	31 05       	cpc	r19, r1
    76bc:	09 f4       	brne	.+2      	; 0x76c0 <Endpoint_Write_Control_PStream_LE+0x88>
    76be:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76c0:	80 91 e8 00 	lds	r24, 0x00E8
    76c4:	8e 77       	andi	r24, 0x7E	; 126
    76c6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    76ca:	41 15       	cp	r20, r1
    76cc:	51 05       	cpc	r21, r1
    76ce:	61 f6       	brne	.-104    	; 0x7668 <Endpoint_Write_Control_PStream_LE+0x30>
    76d0:	99 23       	and	r25, r25
    76d2:	51 f6       	brne	.-108    	; 0x7668 <Endpoint_Write_Control_PStream_LE+0x30>
    76d4:	0a c0       	rjmp	.+20     	; 0x76ea <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    76d6:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    76da:	88 23       	and	r24, r24
    76dc:	61 f0       	breq	.+24     	; 0x76f6 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    76de:	85 30       	cpi	r24, 0x05	; 5
    76e0:	61 f0       	breq	.+24     	; 0x76fa <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    76e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    76e6:	83 fd       	sbrc	r24, 3
    76e8:	0a c0       	rjmp	.+20     	; 0x76fe <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    76ea:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    76ee:	82 ff       	sbrs	r24, 2
    76f0:	f2 cf       	rjmp	.-28     	; 0x76d6 <Endpoint_Write_Control_PStream_LE+0x9e>
    76f2:	80 e0       	ldi	r24, 0x00	; 0
    76f4:	08 95       	ret
    76f6:	82 e0       	ldi	r24, 0x02	; 2
    76f8:	08 95       	ret
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	08 95       	ret
    76fe:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7700:	08 95       	ret

00007702 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    7702:	bf 92       	push	r11
    7704:	cf 92       	push	r12
    7706:	df 92       	push	r13
    7708:	ef 92       	push	r14
    770a:	ff 92       	push	r15
    770c:	0f 93       	push	r16
    770e:	1f 93       	push	r17
    7710:	cf 93       	push	r28
    7712:	df 93       	push	r29
    7714:	18 2f       	mov	r17, r24
    7716:	09 2f       	mov	r16, r25
    7718:	7b 01       	movw	r14, r22
    771a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    771c:	d9 d0       	rcall	.+434    	; 0x78d0 <Endpoint_WaitUntilReady>
    771e:	b8 2e       	mov	r11, r24
    7720:	88 23       	and	r24, r24
    7722:	b1 f5       	brne	.+108    	; 0x7790 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7724:	81 2f       	mov	r24, r17
    7726:	90 2f       	mov	r25, r16
    7728:	9c 01       	movw	r18, r24
    772a:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    772c:	c1 14       	cp	r12, r1
    772e:	d1 04       	cpc	r13, r1
    7730:	39 f0       	breq	.+14     	; 0x7740 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    7732:	f6 01       	movw	r30, r12
    7734:	80 81       	ld	r24, Z
    7736:	91 81       	ldd	r25, Z+1	; 0x01
    7738:	e8 1a       	sub	r14, r24
    773a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    773c:	c8 0f       	add	r28, r24
    773e:	d9 1f       	adc	r29, r25
    7740:	00 e0       	ldi	r16, 0x00	; 0
    7742:	10 e0       	ldi	r17, 0x00	; 0
    7744:	22 c0       	rjmp	.+68     	; 0x778a <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7746:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    774a:	85 fd       	sbrc	r24, 5
    774c:	16 c0       	rjmp	.+44     	; 0x777a <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    774e:	80 91 e8 00 	lds	r24, 0x00E8
    7752:	8e 77       	andi	r24, 0x7E	; 126
    7754:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    7758:	92 d3       	rcall	.+1828   	; 0x7e7e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    775a:	c1 14       	cp	r12, r1
    775c:	d1 04       	cpc	r13, r1
    775e:	49 f0       	breq	.+18     	; 0x7772 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    7760:	f6 01       	movw	r30, r12
    7762:	80 81       	ld	r24, Z
    7764:	91 81       	ldd	r25, Z+1	; 0x01
    7766:	80 0f       	add	r24, r16
    7768:	91 1f       	adc	r25, r17
    776a:	91 83       	std	Z+1, r25	; 0x01
    776c:	80 83       	st	Z, r24
    776e:	85 e0       	ldi	r24, 0x05	; 5
    7770:	10 c0       	rjmp	.+32     	; 0x7792 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7772:	ae d0       	rcall	.+348    	; 0x78d0 <Endpoint_WaitUntilReady>
    7774:	88 23       	and	r24, r24
    7776:	49 f0       	breq	.+18     	; 0x778a <Endpoint_Write_Stream_LE+0x88>
    7778:	0c c0       	rjmp	.+24     	; 0x7792 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    777a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    777c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    7780:	08 94       	sec
    7782:	e1 08       	sbc	r14, r1
    7784:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    7786:	0f 5f       	subi	r16, 0xFF	; 255
    7788:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    778a:	e1 14       	cp	r14, r1
    778c:	f1 04       	cpc	r15, r1
    778e:	d9 f6       	brne	.-74     	; 0x7746 <Endpoint_Write_Stream_LE+0x44>
    7790:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    7792:	df 91       	pop	r29
    7794:	cf 91       	pop	r28
    7796:	1f 91       	pop	r17
    7798:	0f 91       	pop	r16
    779a:	ff 90       	pop	r15
    779c:	ef 90       	pop	r14
    779e:	df 90       	pop	r13
    77a0:	cf 90       	pop	r12
    77a2:	bf 90       	pop	r11
    77a4:	08 95       	ret

000077a6 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    77a6:	38 2f       	mov	r19, r24
    77a8:	28 2f       	mov	r18, r24
    77aa:	2e c0       	rjmp	.+92     	; 0x7808 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    77ac:	82 2f       	mov	r24, r18
    77ae:	8f 70       	andi	r24, 0x0F	; 15
    77b0:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    77b4:	23 17       	cp	r18, r19
    77b6:	21 f4       	brne	.+8      	; 0x77c0 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    77b8:	76 2f       	mov	r23, r22
    77ba:	94 2f       	mov	r25, r20
    77bc:	50 e0       	ldi	r21, 0x00	; 0
    77be:	06 c0       	rjmp	.+12     	; 0x77cc <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    77c0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    77c4:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    77c8:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    77cc:	91 ff       	sbrs	r25, 1
    77ce:	1b c0       	rjmp	.+54     	; 0x7806 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    77d0:	80 91 eb 00 	lds	r24, 0x00EB
    77d4:	8e 7f       	andi	r24, 0xFE	; 254
    77d6:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    77da:	80 91 ed 00 	lds	r24, 0x00ED
    77de:	8d 7f       	andi	r24, 0xFD	; 253
    77e0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    77e4:	80 91 eb 00 	lds	r24, 0x00EB
    77e8:	81 60       	ori	r24, 0x01	; 1
    77ea:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    77ee:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    77f2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    77f6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    77fa:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    77fe:	87 fd       	sbrc	r24, 7
    7800:	02 c0       	rjmp	.+4      	; 0x7806 <Endpoint_ConfigureEndpoint_Prv+0x60>
    7802:	80 e0       	ldi	r24, 0x00	; 0
    7804:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    7806:	2f 5f       	subi	r18, 0xFF	; 255
    7808:	27 30       	cpi	r18, 0x07	; 7
    780a:	80 f2       	brcs	.-96     	; 0x77ac <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    780c:	3f 70       	andi	r19, 0x0F	; 15
    780e:	30 93 e9 00 	sts	0x00E9, r19
    7812:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7814:	08 95       	ret

00007816 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    7816:	0f 93       	push	r16
    7818:	1f 93       	push	r17
    781a:	cf 93       	push	r28
    781c:	df 93       	push	r29
    781e:	06 2f       	mov	r16, r22
    7820:	ec 01       	movw	r28, r24
    7822:	10 e0       	ldi	r17, 0x00	; 0
    7824:	2a c0       	rjmp	.+84     	; 0x787a <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    7826:	98 81       	ld	r25, Y
    7828:	99 23       	and	r25, r25
    782a:	29 f1       	breq	.+74     	; 0x7876 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    782c:	6b 81       	ldd	r22, Y+3	; 0x03
    782e:	e9 81       	ldd	r30, Y+1	; 0x01
    7830:	fa 81       	ldd	r31, Y+2	; 0x02
    7832:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    7834:	89 2f       	mov	r24, r25
    7836:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    7838:	87 30       	cpi	r24, 0x07	; 7
    783a:	18 f5       	brcc	.+70     	; 0x7882 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    783c:	22 30       	cpi	r18, 0x02	; 2
    783e:	10 f4       	brcc	.+4      	; 0x7844 <Endpoint_ConfigureEndpointTable+0x2e>
    7840:	52 e0       	ldi	r21, 0x02	; 2
    7842:	01 c0       	rjmp	.+2      	; 0x7846 <Endpoint_ConfigureEndpointTable+0x30>
    7844:	56 e0       	ldi	r21, 0x06	; 6
    7846:	40 e0       	ldi	r20, 0x00	; 0
    7848:	28 e0       	ldi	r18, 0x08	; 8
    784a:	30 e0       	ldi	r19, 0x00	; 0
    784c:	03 c0       	rjmp	.+6      	; 0x7854 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    784e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    7850:	22 0f       	add	r18, r18
    7852:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    7854:	2e 17       	cp	r18, r30
    7856:	3f 07       	cpc	r19, r31
    7858:	d0 f3       	brcs	.-12     	; 0x784e <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    785a:	62 95       	swap	r22
    785c:	66 0f       	add	r22, r22
    785e:	66 0f       	add	r22, r22
    7860:	60 7c       	andi	r22, 0xC0	; 192
    7862:	99 1f       	adc	r25, r25
    7864:	99 27       	eor	r25, r25
    7866:	99 1f       	adc	r25, r25
    7868:	69 2b       	or	r22, r25
    786a:	42 95       	swap	r20
    786c:	40 7f       	andi	r20, 0xF0	; 240
    786e:	45 2b       	or	r20, r21
    7870:	9a df       	rcall	.-204    	; 0x77a6 <Endpoint_ConfigureEndpoint_Prv>
    7872:	88 23       	and	r24, r24
    7874:	31 f0       	breq	.+12     	; 0x7882 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    7876:	1f 5f       	subi	r17, 0xFF	; 255
    7878:	25 96       	adiw	r28, 0x05	; 5
    787a:	10 17       	cp	r17, r16
    787c:	a0 f2       	brcs	.-88     	; 0x7826 <Endpoint_ConfigureEndpointTable+0x10>
    787e:	81 e0       	ldi	r24, 0x01	; 1
    7880:	01 c0       	rjmp	.+2      	; 0x7884 <Endpoint_ConfigureEndpointTable+0x6e>
    7882:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
}
    7884:	df 91       	pop	r29
    7886:	cf 91       	pop	r28
    7888:	1f 91       	pop	r17
    788a:	0f 91       	pop	r16
    788c:	08 95       	ret

0000788e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    788e:	80 91 4d 04 	lds	r24, 0x044D
    7892:	88 23       	and	r24, r24
    7894:	9c f4       	brge	.+38     	; 0x78bc <Endpoint_ClearStatusStage+0x2e>
    7896:	04 c0       	rjmp	.+8      	; 0x78a0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7898:	80 91 4c 04 	lds	r24, 0x044C
    789c:	88 23       	and	r24, r24
    789e:	b9 f0       	breq	.+46     	; 0x78ce <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78a0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    78a4:	82 ff       	sbrs	r24, 2
    78a6:	f8 cf       	rjmp	.-16     	; 0x7898 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78a8:	80 91 e8 00 	lds	r24, 0x00E8
    78ac:	8b 77       	andi	r24, 0x7B	; 123
    78ae:	80 93 e8 00 	sts	0x00E8, r24
    78b2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78b4:	80 91 4c 04 	lds	r24, 0x044C
    78b8:	88 23       	and	r24, r24
    78ba:	49 f0       	breq	.+18     	; 0x78ce <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78bc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    78c0:	80 ff       	sbrs	r24, 0
    78c2:	f8 cf       	rjmp	.-16     	; 0x78b4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78c4:	80 91 e8 00 	lds	r24, 0x00E8
    78c8:	8e 77       	andi	r24, 0x7E	; 126
    78ca:	80 93 e8 00 	sts	0x00E8, r24
    78ce:	08 95       	ret

000078d0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    78d0:	40 91 e4 00 	lds	r20, 0x00E4
    78d4:	50 91 e5 00 	lds	r21, 0x00E5
    78d8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    78da:	80 91 ec 00 	lds	r24, 0x00EC
    78de:	80 ff       	sbrs	r24, 0
    78e0:	24 c0       	rjmp	.+72     	; 0x792a <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78e2:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    78e6:	80 fd       	sbrc	r24, 0
    78e8:	1e c0       	rjmp	.+60     	; 0x7926 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    78ea:	80 91 4c 04 	lds	r24, 0x044C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    78ee:	88 23       	and	r24, r24
    78f0:	11 f4       	brne	.+4      	; 0x78f6 <Endpoint_WaitUntilReady+0x26>
    78f2:	82 e0       	ldi	r24, 0x02	; 2
    78f4:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    78f6:	85 30       	cpi	r24, 0x05	; 5
    78f8:	11 f4       	brne	.+4      	; 0x78fe <Endpoint_WaitUntilReady+0x2e>
    78fa:	83 e0       	ldi	r24, 0x03	; 3
    78fc:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    78fe:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    7902:	85 ff       	sbrs	r24, 5
    7904:	02 c0       	rjmp	.+4      	; 0x790a <Endpoint_WaitUntilReady+0x3a>
    7906:	81 e0       	ldi	r24, 0x01	; 1
    7908:	08 95       	ret
    790a:	80 91 e4 00 	lds	r24, 0x00E4
    790e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    7912:	84 17       	cp	r24, r20
    7914:	95 07       	cpc	r25, r21
    7916:	09 f3       	breq	.-62     	; 0x78da <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    7918:	22 23       	and	r18, r18
    791a:	11 f4       	brne	.+4      	; 0x7920 <Endpoint_WaitUntilReady+0x50>
    791c:	84 e0       	ldi	r24, 0x04	; 4
    791e:	08 95       	ret
    7920:	21 50       	subi	r18, 0x01	; 1
    7922:	ac 01       	movw	r20, r24
    7924:	da cf       	rjmp	.-76     	; 0x78da <Endpoint_WaitUntilReady+0xa>
    7926:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    7928:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    792a:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    792e:	82 ff       	sbrs	r24, 2
    7930:	dc cf       	rjmp	.-72     	; 0x78ea <Endpoint_WaitUntilReady+0x1a>
    7932:	f9 cf       	rjmp	.-14     	; 0x7926 <Endpoint_WaitUntilReady+0x56>

00007934 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    7934:	ef 92       	push	r14
    7936:	ff 92       	push	r15
    7938:	0f 93       	push	r16
    793a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    793c:	52 d0       	rcall	.+164    	; 0x79e2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    793e:	59 d0       	rcall	.+178    	; 0x79f2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7940:	08 ed       	ldi	r16, 0xD8	; 216
    7942:	10 e0       	ldi	r17, 0x00	; 0
    7944:	f8 01       	movw	r30, r16
    7946:	80 81       	ld	r24, Z
    7948:	8f 77       	andi	r24, 0x7F	; 127
    794a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    794c:	80 81       	ld	r24, Z
    794e:	80 68       	ori	r24, 0x80	; 128
    7950:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7952:	80 81       	ld	r24, Z
    7954:	8f 7d       	andi	r24, 0xDF	; 223
    7956:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    7958:	e7 ed       	ldi	r30, 0xD7	; 215
    795a:	f0 e0       	ldi	r31, 0x00	; 0
    795c:	80 81       	ld	r24, Z
    795e:	80 68       	ori	r24, 0x80	; 128
    7960:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7962:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7964:	10 92 4c 04 	sts	0x044C, r1
	USB_Device_ConfigurationNumber  = 0;
    7968:	10 92 48 04 	sts	0x0448, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    796c:	10 92 4a 04 	sts	0x044A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    7970:	10 92 49 04 	sts	0x0449, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7974:	80 ee       	ldi	r24, 0xE0	; 224
    7976:	e8 2e       	mov	r14, r24
    7978:	f1 2c       	mov	r15, r1
    797a:	f7 01       	movw	r30, r14
    797c:	80 81       	ld	r24, Z
    797e:	8b 7f       	andi	r24, 0xFB	; 251
    7980:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7982:	f8 01       	movw	r30, r16
    7984:	80 81       	ld	r24, Z
    7986:	81 60       	ori	r24, 0x01	; 1
    7988:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    798a:	80 e0       	ldi	r24, 0x00	; 0
    798c:	60 e0       	ldi	r22, 0x00	; 0
    798e:	42 e0       	ldi	r20, 0x02	; 2
    7990:	0a df       	rcall	.-492    	; 0x77a6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7992:	e1 ee       	ldi	r30, 0xE1	; 225
    7994:	f0 e0       	ldi	r31, 0x00	; 0
    7996:	80 81       	ld	r24, Z
    7998:	8e 7f       	andi	r24, 0xFE	; 254
    799a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    799c:	e2 ee       	ldi	r30, 0xE2	; 226
    799e:	f0 e0       	ldi	r31, 0x00	; 0
    79a0:	80 81       	ld	r24, Z
    79a2:	81 60       	ori	r24, 0x01	; 1
    79a4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    79a6:	80 81       	ld	r24, Z
    79a8:	88 60       	ori	r24, 0x08	; 8
    79aa:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    79ac:	f7 01       	movw	r30, r14
    79ae:	80 81       	ld	r24, Z
    79b0:	8e 7f       	andi	r24, 0xFE	; 254
    79b2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    79b4:	f8 01       	movw	r30, r16
    79b6:	80 81       	ld	r24, Z
    79b8:	80 61       	ori	r24, 0x10	; 16
    79ba:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    79bc:	1f 91       	pop	r17
    79be:	0f 91       	pop	r16
    79c0:	ff 90       	pop	r15
    79c2:	ef 90       	pop	r14
    79c4:	08 95       	ret

000079c6 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    79c6:	e8 ed       	ldi	r30, 0xD8	; 216
    79c8:	f0 e0       	ldi	r31, 0x00	; 0
    79ca:	80 81       	ld	r24, Z
    79cc:	8f 7e       	andi	r24, 0xEF	; 239
    79ce:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    79d0:	e7 ed       	ldi	r30, 0xD7	; 215
    79d2:	f0 e0       	ldi	r31, 0x00	; 0
    79d4:	80 81       	ld	r24, Z
    79d6:	81 60       	ori	r24, 0x01	; 1
    79d8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    79da:	81 e0       	ldi	r24, 0x01	; 1
    79dc:	80 93 4b 04 	sts	0x044B, r24

	USB_ResetInterface();
}
    79e0:	a9 cf       	rjmp	.-174    	; 0x7934 <USB_ResetInterface>

000079e2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    79e2:	e8 ed       	ldi	r30, 0xD8	; 216
    79e4:	f0 e0       	ldi	r31, 0x00	; 0
    79e6:	80 81       	ld	r24, Z
    79e8:	8c 7f       	andi	r24, 0xFC	; 252
    79ea:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    79ec:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    79f0:	08 95       	ret

000079f2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    79f2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    79f6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    79fa:	08 95       	ret

000079fc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79fc:	1f 92       	push	r1
    79fe:	0f 92       	push	r0
    7a00:	0f b6       	in	r0, 0x3f	; 63
    7a02:	0f 92       	push	r0
    7a04:	0b b6       	in	r0, 0x3b	; 59
    7a06:	0f 92       	push	r0
    7a08:	11 24       	eor	r1, r1
    7a0a:	2f 93       	push	r18
    7a0c:	3f 93       	push	r19
    7a0e:	4f 93       	push	r20
    7a10:	5f 93       	push	r21
    7a12:	6f 93       	push	r22
    7a14:	7f 93       	push	r23
    7a16:	8f 93       	push	r24
    7a18:	9f 93       	push	r25
    7a1a:	af 93       	push	r26
    7a1c:	bf 93       	push	r27
    7a1e:	ef 93       	push	r30
    7a20:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    7a22:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    7a26:	82 ff       	sbrs	r24, 2
    7a28:	0b c0       	rjmp	.+22     	; 0x7a40 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    7a2a:	80 91 e2 00 	lds	r24, 0x00E2
    7a2e:	82 ff       	sbrs	r24, 2
    7a30:	07 c0       	rjmp	.+14     	; 0x7a40 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    7a32:	80 91 e1 00 	lds	r24, 0x00E1
    7a36:	8b 7f       	andi	r24, 0xFB	; 251
    7a38:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    7a3c:	0e 94 b3 30 	call	0x6166	; 0x6166 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7a40:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7a44:	80 ff       	sbrs	r24, 0
    7a46:	1f c0       	rjmp	.+62     	; 0x7a86 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7a48:	80 91 d8 00 	lds	r24, 0x00D8
    7a4c:	80 ff       	sbrs	r24, 0
    7a4e:	1b c0       	rjmp	.+54     	; 0x7a86 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7a50:	80 91 da 00 	lds	r24, 0x00DA
    7a54:	8e 7f       	andi	r24, 0xFE	; 254
    7a56:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7a5a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7a5e:	80 ff       	sbrs	r24, 0
    7a60:	0d c0       	rjmp	.+26     	; 0x7a7c <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a62:	8c e0       	ldi	r24, 0x0C	; 12
    7a64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a66:	8e e0       	ldi	r24, 0x0E	; 14
    7a68:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7a6a:	09 b4       	in	r0, 0x29	; 41
    7a6c:	00 fe       	sbrs	r0, 0
    7a6e:	fd cf       	rjmp	.-6      	; 0x7a6a <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7a70:	81 e0       	ldi	r24, 0x01	; 1
    7a72:	80 93 4c 04 	sts	0x044C, r24
			EVENT_USB_Device_Connect();
    7a76:	0e 94 b1 30 	call	0x6162	; 0x6162 <EVENT_USB_Device_Connect>
    7a7a:	05 c0       	rjmp	.+10     	; 0x7a86 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a7c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a7e:	10 92 4c 04 	sts	0x044C, r1
			EVENT_USB_Device_Disconnect();
    7a82:	0e 94 b2 30 	call	0x6164	; 0x6164 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a86:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a8a:	80 ff       	sbrs	r24, 0
    7a8c:	18 c0       	rjmp	.+48     	; 0x7abe <__vector_10+0xc2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7a8e:	80 91 e2 00 	lds	r24, 0x00E2
    7a92:	80 ff       	sbrs	r24, 0
    7a94:	14 c0       	rjmp	.+40     	; 0x7abe <__vector_10+0xc2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a96:	80 91 e2 00 	lds	r24, 0x00E2
    7a9a:	8e 7f       	andi	r24, 0xFE	; 254
    7a9c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7aa0:	80 91 e2 00 	lds	r24, 0x00E2
    7aa4:	80 61       	ori	r24, 0x10	; 16
    7aa6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7aaa:	80 91 d8 00 	lds	r24, 0x00D8
    7aae:	80 62       	ori	r24, 0x20	; 32
    7ab0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7ab4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7ab6:	85 e0       	ldi	r24, 0x05	; 5
    7ab8:	80 93 4c 04 	sts	0x044C, r24
		EVENT_USB_Device_Suspend();
    7abc:	df d1       	rcall	.+958    	; 0x7e7c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7abe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7ac2:	84 ff       	sbrs	r24, 4
    7ac4:	2f c0       	rjmp	.+94     	; 0x7b24 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7ac6:	80 91 e2 00 	lds	r24, 0x00E2
    7aca:	84 ff       	sbrs	r24, 4
    7acc:	2b c0       	rjmp	.+86     	; 0x7b24 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7ace:	8c e0       	ldi	r24, 0x0C	; 12
    7ad0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7ad2:	8e e0       	ldi	r24, 0x0E	; 14
    7ad4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7ad6:	09 b4       	in	r0, 0x29	; 41
    7ad8:	00 fe       	sbrs	r0, 0
    7ada:	fd cf       	rjmp	.-6      	; 0x7ad6 <__vector_10+0xda>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7adc:	80 91 d8 00 	lds	r24, 0x00D8
    7ae0:	8f 7d       	andi	r24, 0xDF	; 223
    7ae2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7ae6:	80 91 e1 00 	lds	r24, 0x00E1
    7aea:	8f 7e       	andi	r24, 0xEF	; 239
    7aec:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7af0:	80 91 e2 00 	lds	r24, 0x00E2
    7af4:	8f 7e       	andi	r24, 0xEF	; 239
    7af6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7afa:	80 91 e2 00 	lds	r24, 0x00E2
    7afe:	81 60       	ori	r24, 0x01	; 1
    7b00:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7b04:	80 91 48 04 	lds	r24, 0x0448
    7b08:	88 23       	and	r24, r24
    7b0a:	11 f0       	breq	.+4      	; 0x7b10 <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
    7b0c:	84 e0       	ldi	r24, 0x04	; 4
    7b0e:	07 c0       	rjmp	.+14     	; 0x7b1e <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7b10:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7b14:	87 fd       	sbrc	r24, 7
    7b16:	02 c0       	rjmp	.+4      	; 0x7b1c <__vector_10+0x120>
    7b18:	81 e0       	ldi	r24, 0x01	; 1
    7b1a:	01 c0       	rjmp	.+2      	; 0x7b1e <__vector_10+0x122>
    7b1c:	83 e0       	ldi	r24, 0x03	; 3
    7b1e:	80 93 4c 04 	sts	0x044C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7b22:	ac d1       	rcall	.+856    	; 0x7e7c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7b24:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7b28:	83 ff       	sbrs	r24, 3
    7b2a:	22 c0       	rjmp	.+68     	; 0x7b70 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7b2c:	80 91 e2 00 	lds	r24, 0x00E2
    7b30:	83 ff       	sbrs	r24, 3
    7b32:	1e c0       	rjmp	.+60     	; 0x7b70 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7b34:	80 91 e1 00 	lds	r24, 0x00E1
    7b38:	87 7f       	andi	r24, 0xF7	; 247
    7b3a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7b3e:	82 e0       	ldi	r24, 0x02	; 2
    7b40:	80 93 4c 04 	sts	0x044C, r24
		USB_Device_ConfigurationNumber = 0;
    7b44:	10 92 48 04 	sts	0x0448, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7b48:	80 91 e1 00 	lds	r24, 0x00E1
    7b4c:	8e 7f       	andi	r24, 0xFE	; 254
    7b4e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b52:	80 91 e2 00 	lds	r24, 0x00E2
    7b56:	8e 7f       	andi	r24, 0xFE	; 254
    7b58:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b5c:	80 91 e2 00 	lds	r24, 0x00E2
    7b60:	80 61       	ori	r24, 0x10	; 16
    7b62:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7b66:	80 e0       	ldi	r24, 0x00	; 0
    7b68:	60 e0       	ldi	r22, 0x00	; 0
    7b6a:	42 e0       	ldi	r20, 0x02	; 2
    7b6c:	1c de       	rcall	.-968    	; 0x77a6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7b6e:	86 d1       	rcall	.+780    	; 0x7e7c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7b70:	ff 91       	pop	r31
    7b72:	ef 91       	pop	r30
    7b74:	bf 91       	pop	r27
    7b76:	af 91       	pop	r26
    7b78:	9f 91       	pop	r25
    7b7a:	8f 91       	pop	r24
    7b7c:	7f 91       	pop	r23
    7b7e:	6f 91       	pop	r22
    7b80:	5f 91       	pop	r21
    7b82:	4f 91       	pop	r20
    7b84:	3f 91       	pop	r19
    7b86:	2f 91       	pop	r18
    7b88:	0f 90       	pop	r0
    7b8a:	0b be       	out	0x3b, r0	; 59
    7b8c:	0f 90       	pop	r0
    7b8e:	0f be       	out	0x3f, r0	; 63
    7b90:	0f 90       	pop	r0
    7b92:	1f 90       	pop	r1
    7b94:	18 95       	reti

00007b96 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7b96:	1f 93       	push	r17
    7b98:	df 93       	push	r29
    7b9a:	cf 93       	push	r28
    7b9c:	cd b7       	in	r28, 0x3d	; 61
    7b9e:	de b7       	in	r29, 0x3e	; 62
    7ba0:	ac 97       	sbiw	r28, 0x2c	; 44
    7ba2:	0f b6       	in	r0, 0x3f	; 63
    7ba4:	f8 94       	cli
    7ba6:	de bf       	out	0x3e, r29	; 62
    7ba8:	0f be       	out	0x3f, r0	; 63
    7baa:	cd bf       	out	0x3d, r28	; 61
    7bac:	ed e4       	ldi	r30, 0x4D	; 77
    7bae:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7bb0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7bb4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7bb6:	24 e0       	ldi	r18, 0x04	; 4
    7bb8:	e5 35       	cpi	r30, 0x55	; 85
    7bba:	f2 07       	cpc	r31, r18
    7bbc:	c9 f7       	brne	.-14     	; 0x7bb0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7bbe:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bc2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    7bc6:	83 ff       	sbrs	r24, 3
    7bc8:	41 c1       	rjmp	.+642    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7bca:	80 91 4d 04 	lds	r24, 0x044D

		switch (USB_ControlRequest.bRequest)
    7bce:	30 91 4e 04 	lds	r19, 0x044E
    7bd2:	35 30       	cpi	r19, 0x05	; 5
    7bd4:	09 f4       	brne	.+2      	; 0x7bd8 <USB_Device_ProcessControlRequest+0x42>
    7bd6:	8d c0       	rjmp	.+282    	; 0x7cf2 <USB_Device_ProcessControlRequest+0x15c>
    7bd8:	36 30       	cpi	r19, 0x06	; 6
    7bda:	40 f4       	brcc	.+16     	; 0x7bec <USB_Device_ProcessControlRequest+0x56>
    7bdc:	31 30       	cpi	r19, 0x01	; 1
    7bde:	e1 f1       	breq	.+120    	; 0x7c58 <USB_Device_ProcessControlRequest+0xc2>
    7be0:	31 30       	cpi	r19, 0x01	; 1
    7be2:	70 f0       	brcs	.+28     	; 0x7c00 <USB_Device_ProcessControlRequest+0x6a>
    7be4:	33 30       	cpi	r19, 0x03	; 3
    7be6:	09 f0       	breq	.+2      	; 0x7bea <USB_Device_ProcessControlRequest+0x54>
    7be8:	31 c1       	rjmp	.+610    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
    7bea:	36 c0       	rjmp	.+108    	; 0x7c58 <USB_Device_ProcessControlRequest+0xc2>
    7bec:	38 30       	cpi	r19, 0x08	; 8
    7bee:	09 f4       	brne	.+2      	; 0x7bf2 <USB_Device_ProcessControlRequest+0x5c>
    7bf0:	fe c0       	rjmp	.+508    	; 0x7dee <USB_Device_ProcessControlRequest+0x258>
    7bf2:	39 30       	cpi	r19, 0x09	; 9
    7bf4:	09 f4       	brne	.+2      	; 0x7bf8 <USB_Device_ProcessControlRequest+0x62>
    7bf6:	0d c1       	rjmp	.+538    	; 0x7e12 <USB_Device_ProcessControlRequest+0x27c>
    7bf8:	36 30       	cpi	r19, 0x06	; 6
    7bfa:	09 f0       	breq	.+2      	; 0x7bfe <USB_Device_ProcessControlRequest+0x68>
    7bfc:	27 c1       	rjmp	.+590    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
    7bfe:	9c c0       	rjmp	.+312    	; 0x7d38 <USB_Device_ProcessControlRequest+0x1a2>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c00:	80 38       	cpi	r24, 0x80	; 128
    7c02:	21 f0       	breq	.+8      	; 0x7c0c <USB_Device_ProcessControlRequest+0x76>
    7c04:	82 38       	cpi	r24, 0x82	; 130
    7c06:	09 f0       	breq	.+2      	; 0x7c0a <USB_Device_ProcessControlRequest+0x74>
    7c08:	21 c1       	rjmp	.+578    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
    7c0a:	08 c0       	rjmp	.+16     	; 0x7c1c <USB_Device_ProcessControlRequest+0x86>
    7c0c:	90 91 49 04 	lds	r25, 0x0449
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    7c10:	80 91 4a 04 	lds	r24, 0x044A
    7c14:	88 23       	and	r24, r24
    7c16:	b1 f0       	breq	.+44     	; 0x7c44 <USB_Device_ProcessControlRequest+0xae>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    7c18:	92 60       	ori	r25, 0x02	; 2
    7c1a:	14 c0       	rjmp	.+40     	; 0x7c44 <USB_Device_ProcessControlRequest+0xae>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c1c:	80 91 51 04 	lds	r24, 0x0451
    7c20:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7c22:	87 30       	cpi	r24, 0x07	; 7
    7c24:	08 f0       	brcs	.+2      	; 0x7c28 <USB_Device_ProcessControlRequest+0x92>
    7c26:	12 c1       	rjmp	.+548    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c28:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c2c:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    7c30:	90 e0       	ldi	r25, 0x00	; 0
    7c32:	25 e0       	ldi	r18, 0x05	; 5
    7c34:	96 95       	lsr	r25
    7c36:	87 95       	ror	r24
    7c38:	2a 95       	dec	r18
    7c3a:	e1 f7       	brne	.-8      	; 0x7c34 <USB_Device_ProcessControlRequest+0x9e>
    7c3c:	98 2f       	mov	r25, r24
    7c3e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c40:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c44:	80 91 e8 00 	lds	r24, 0x00E8
    7c48:	87 7f       	andi	r24, 0xF7	; 247
    7c4a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c4e:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    7c52:	10 92 f1 00 	sts	0x00F1, r1
    7c56:	d6 c0       	rjmp	.+428    	; 0x7e04 <USB_Device_ProcessControlRequest+0x26e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c58:	88 23       	and	r24, r24
    7c5a:	19 f0       	breq	.+6      	; 0x7c62 <USB_Device_ProcessControlRequest+0xcc>
    7c5c:	82 30       	cpi	r24, 0x02	; 2
    7c5e:	09 f0       	breq	.+2      	; 0x7c62 <USB_Device_ProcessControlRequest+0xcc>
    7c60:	f5 c0       	rjmp	.+490    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7c62:	90 e0       	ldi	r25, 0x00	; 0
    7c64:	8f 71       	andi	r24, 0x1F	; 31
    7c66:	90 70       	andi	r25, 0x00	; 0
    7c68:	00 97       	sbiw	r24, 0x00	; 0
    7c6a:	21 f0       	breq	.+8      	; 0x7c74 <USB_Device_ProcessControlRequest+0xde>
    7c6c:	02 97       	sbiw	r24, 0x02	; 2
    7c6e:	09 f0       	breq	.+2      	; 0x7c72 <USB_Device_ProcessControlRequest+0xdc>
    7c70:	ed c0       	rjmp	.+474    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
    7c72:	0c c0       	rjmp	.+24     	; 0x7c8c <USB_Device_ProcessControlRequest+0xf6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    7c74:	80 91 4f 04 	lds	r24, 0x044F
    7c78:	81 30       	cpi	r24, 0x01	; 1
    7c7a:	09 f0       	breq	.+2      	; 0x7c7e <USB_Device_ProcessControlRequest+0xe8>
    7c7c:	e7 c0       	rjmp	.+462    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    7c7e:	10 92 4a 04 	sts	0x044A, r1
    7c82:	33 30       	cpi	r19, 0x03	; 3
    7c84:	81 f5       	brne	.+96     	; 0x7ce6 <USB_Device_ProcessControlRequest+0x150>
    7c86:	80 93 4a 04 	sts	0x044A, r24
    7c8a:	2d c0       	rjmp	.+90     	; 0x7ce6 <USB_Device_ProcessControlRequest+0x150>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7c8c:	80 91 4f 04 	lds	r24, 0x044F
    7c90:	88 23       	and	r24, r24
    7c92:	49 f5       	brne	.+82     	; 0x7ce6 <USB_Device_ProcessControlRequest+0x150>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c94:	20 91 51 04 	lds	r18, 0x0451
    7c98:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7c9a:	82 2f       	mov	r24, r18
    7c9c:	81 50       	subi	r24, 0x01	; 1
    7c9e:	86 30       	cpi	r24, 0x06	; 6
    7ca0:	08 f0       	brcs	.+2      	; 0x7ca4 <USB_Device_ProcessControlRequest+0x10e>
    7ca2:	d4 c0       	rjmp	.+424    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ca4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7ca8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cac:	80 ff       	sbrs	r24, 0
    7cae:	1b c0       	rjmp	.+54     	; 0x7ce6 <USB_Device_ProcessControlRequest+0x150>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cb0:	33 30       	cpi	r19, 0x03	; 3
    7cb2:	21 f4       	brne	.+8      	; 0x7cbc <USB_Device_ProcessControlRequest+0x126>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cb4:	80 91 eb 00 	lds	r24, 0x00EB
    7cb8:	80 62       	ori	r24, 0x20	; 32
    7cba:	13 c0       	rjmp	.+38     	; 0x7ce2 <USB_Device_ProcessControlRequest+0x14c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7cbc:	80 91 eb 00 	lds	r24, 0x00EB
    7cc0:	80 61       	ori	r24, 0x10	; 16
    7cc2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7cc6:	81 e0       	ldi	r24, 0x01	; 1
    7cc8:	90 e0       	ldi	r25, 0x00	; 0
    7cca:	02 c0       	rjmp	.+4      	; 0x7cd0 <USB_Device_ProcessControlRequest+0x13a>
    7ccc:	88 0f       	add	r24, r24
    7cce:	99 1f       	adc	r25, r25
    7cd0:	2a 95       	dec	r18
    7cd2:	e2 f7       	brpl	.-8      	; 0x7ccc <USB_Device_ProcessControlRequest+0x136>
    7cd4:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7cd8:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7cdc:	80 91 eb 00 	lds	r24, 0x00EB
    7ce0:	88 60       	ori	r24, 0x08	; 8
    7ce2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ce6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cea:	80 91 e8 00 	lds	r24, 0x00E8
    7cee:	87 7f       	andi	r24, 0xF7	; 247
    7cf0:	8c c0       	rjmp	.+280    	; 0x7e0a <USB_Device_ProcessControlRequest+0x274>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7cf2:	88 23       	and	r24, r24
    7cf4:	09 f0       	breq	.+2      	; 0x7cf8 <USB_Device_ProcessControlRequest+0x162>
    7cf6:	aa c0       	rjmp	.+340    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7cf8:	10 91 4f 04 	lds	r17, 0x044F
    7cfc:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7cfe:	80 91 e3 00 	lds	r24, 0x00E3
    7d02:	80 78       	andi	r24, 0x80	; 128
    7d04:	81 2b       	or	r24, r17
    7d06:	80 93 e3 00 	sts	0x00E3, r24
    7d0a:	80 91 e8 00 	lds	r24, 0x00E8
    7d0e:	87 7f       	andi	r24, 0xF7	; 247
    7d10:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d14:	bc dd       	rcall	.-1160   	; 0x788e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d16:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    7d1a:	80 ff       	sbrs	r24, 0
    7d1c:	fc cf       	rjmp	.-8      	; 0x7d16 <USB_Device_ProcessControlRequest+0x180>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7d1e:	80 91 e3 00 	lds	r24, 0x00E3
    7d22:	80 68       	ori	r24, 0x80	; 128
    7d24:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d28:	11 23       	and	r17, r17
    7d2a:	11 f4       	brne	.+4      	; 0x7d30 <USB_Device_ProcessControlRequest+0x19a>
    7d2c:	82 e0       	ldi	r24, 0x02	; 2
    7d2e:	01 c0       	rjmp	.+2      	; 0x7d32 <USB_Device_ProcessControlRequest+0x19c>
    7d30:	83 e0       	ldi	r24, 0x03	; 3
    7d32:	80 93 4c 04 	sts	0x044C, r24
    7d36:	8a c0       	rjmp	.+276    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d38:	80 58       	subi	r24, 0x80	; 128
    7d3a:	82 30       	cpi	r24, 0x02	; 2
    7d3c:	08 f0       	brcs	.+2      	; 0x7d40 <USB_Device_ProcessControlRequest+0x1aa>
    7d3e:	86 c0       	rjmp	.+268    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    7d40:	80 91 4f 04 	lds	r24, 0x044F
    7d44:	90 91 50 04 	lds	r25, 0x0450
    7d48:	23 e0       	ldi	r18, 0x03	; 3
    7d4a:	8c 3d       	cpi	r24, 0xDC	; 220
    7d4c:	92 07       	cpc	r25, r18
    7d4e:	09 f0       	breq	.+2      	; 0x7d52 <USB_Device_ProcessControlRequest+0x1bc>
    7d50:	33 c0       	rjmp	.+102    	; 0x7db8 <USB_Device_ProcessControlRequest+0x222>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    7d52:	83 e0       	ldi	r24, 0x03	; 3
    7d54:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    7d56:	8a e2       	ldi	r24, 0x2A	; 42
    7d58:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d5a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d5c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    7d5e:	de 01       	movw	r26, r28
    7d60:	15 96       	adiw	r26, 0x05	; 5
    7d62:	6e e0       	ldi	r22, 0x0E	; 14
    7d64:	40 e0       	ldi	r20, 0x00	; 0
    7d66:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    7d68:	11 e2       	ldi	r17, 0x21	; 33
    7d6a:	e6 2f       	mov	r30, r22
    7d6c:	f0 e0       	ldi	r31, 0x00	; 0
    7d6e:	10 93 57 00 	sts	0x0057, r17
    7d72:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    7d74:	40 ff       	sbrs	r20, 0
    7d76:	03 c0       	rjmp	.+6      	; 0x7d7e <USB_Device_ProcessControlRequest+0x1e8>
					{
						SerialByte >>= 4;
    7d78:	82 95       	swap	r24
    7d7a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    7d7c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    7d7e:	8f 70       	andi	r24, 0x0F	; 15
    7d80:	28 2f       	mov	r18, r24
    7d82:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    7d84:	8a 30       	cpi	r24, 0x0A	; 10
    7d86:	18 f0       	brcs	.+6      	; 0x7d8e <USB_Device_ProcessControlRequest+0x1f8>
    7d88:	c9 01       	movw	r24, r18
    7d8a:	c7 96       	adiw	r24, 0x37	; 55
    7d8c:	02 c0       	rjmp	.+4      	; 0x7d92 <USB_Device_ProcessControlRequest+0x1fc>
    7d8e:	c9 01       	movw	r24, r18
    7d90:	c0 96       	adiw	r24, 0x30	; 48
    7d92:	8d 93       	st	X+, r24
    7d94:	9d 93       	st	X+, r25
    7d96:	4f 5f       	subi	r20, 0xFF	; 255
    7d98:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    7d9a:	44 31       	cpi	r20, 0x14	; 20
    7d9c:	51 05       	cpc	r21, r1
    7d9e:	29 f7       	brne	.-54     	; 0x7d6a <USB_Device_ProcessControlRequest+0x1d4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7da0:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7da2:	80 91 e8 00 	lds	r24, 0x00E8
    7da6:	87 7f       	andi	r24, 0xF7	; 247
    7da8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    7dac:	ce 01       	movw	r24, r28
    7dae:	03 96       	adiw	r24, 0x03	; 3
    7db0:	6a e2       	ldi	r22, 0x2A	; 42
    7db2:	70 e0       	ldi	r23, 0x00	; 0
    7db4:	9c db       	rcall	.-2248   	; 0x74ee <Endpoint_Write_Control_Stream_LE>
    7db6:	15 c0       	rjmp	.+42     	; 0x7de2 <USB_Device_ProcessControlRequest+0x24c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7db8:	60 91 51 04 	lds	r22, 0x0451
    7dbc:	70 91 52 04 	lds	r23, 0x0452
    7dc0:	ae 01       	movw	r20, r28
    7dc2:	4f 5f       	subi	r20, 0xFF	; 255
    7dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7dc6:	0e 94 5d 31 	call	0x62ba	; 0x62ba <CALLBACK_USB_GetDescriptor>
    7dca:	bc 01       	movw	r22, r24
    7dcc:	00 97       	sbiw	r24, 0x00	; 0
    7dce:	09 f4       	brne	.+2      	; 0x7dd2 <USB_Device_ProcessControlRequest+0x23c>
    7dd0:	3d c0       	rjmp	.+122    	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
    7dd2:	80 91 e8 00 	lds	r24, 0x00E8
    7dd6:	87 7f       	andi	r24, 0xF7	; 247
    7dd8:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    7ddc:	89 81       	ldd	r24, Y+1	; 0x01
    7dde:	9a 81       	ldd	r25, Y+2	; 0x02
    7de0:	2b dc       	rcall	.-1962   	; 0x7638 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7de2:	80 91 e8 00 	lds	r24, 0x00E8
    7de6:	8b 77       	andi	r24, 0x7B	; 123
    7de8:	80 93 e8 00 	sts	0x00E8, r24
    7dec:	2f c0       	rjmp	.+94     	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dee:	80 38       	cpi	r24, 0x80	; 128
    7df0:	69 f5       	brne	.+90     	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7df2:	80 91 e8 00 	lds	r24, 0x00E8
    7df6:	87 7f       	andi	r24, 0xF7	; 247
    7df8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dfc:	80 91 48 04 	lds	r24, 0x0448
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7e00:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7e04:	80 91 e8 00 	lds	r24, 0x00E8
    7e08:	8e 77       	andi	r24, 0x7E	; 126
    7e0a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e0e:	3f dd       	rcall	.-1410   	; 0x788e <Endpoint_ClearStatusStage>
    7e10:	1d c0       	rjmp	.+58     	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e12:	88 23       	and	r24, r24
    7e14:	d9 f4       	brne	.+54     	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e16:	90 91 4f 04 	lds	r25, 0x044F
    7e1a:	92 30       	cpi	r25, 0x02	; 2
    7e1c:	b8 f4       	brcc	.+46     	; 0x7e4c <USB_Device_ProcessControlRequest+0x2b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e1e:	80 91 e8 00 	lds	r24, 0x00E8
    7e22:	87 7f       	andi	r24, 0xF7	; 247
    7e24:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e28:	90 93 48 04 	sts	0x0448, r25

	Endpoint_ClearStatusStage();
    7e2c:	30 dd       	rcall	.-1440   	; 0x788e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7e2e:	80 91 48 04 	lds	r24, 0x0448
    7e32:	88 23       	and	r24, r24
    7e34:	31 f4       	brne	.+12     	; 0x7e42 <USB_Device_ProcessControlRequest+0x2ac>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e36:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e3a:	87 fd       	sbrc	r24, 7
    7e3c:	02 c0       	rjmp	.+4      	; 0x7e42 <USB_Device_ProcessControlRequest+0x2ac>
    7e3e:	81 e0       	ldi	r24, 0x01	; 1
    7e40:	01 c0       	rjmp	.+2      	; 0x7e44 <USB_Device_ProcessControlRequest+0x2ae>
    7e42:	84 e0       	ldi	r24, 0x04	; 4
    7e44:	80 93 4c 04 	sts	0x044C, r24

	EVENT_USB_Device_ConfigurationChanged();
    7e48:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e4c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e50:	83 ff       	sbrs	r24, 3
    7e52:	0a c0       	rjmp	.+20     	; 0x7e68 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e54:	80 91 e8 00 	lds	r24, 0x00E8
    7e58:	87 7f       	andi	r24, 0xF7	; 247
    7e5a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e5e:	80 91 eb 00 	lds	r24, 0x00EB
    7e62:	80 62       	ori	r24, 0x20	; 32
    7e64:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    7e68:	ac 96       	adiw	r28, 0x2c	; 44
    7e6a:	0f b6       	in	r0, 0x3f	; 63
    7e6c:	f8 94       	cli
    7e6e:	de bf       	out	0x3e, r29	; 62
    7e70:	0f be       	out	0x3f, r0	; 63
    7e72:	cd bf       	out	0x3d, r28	; 61
    7e74:	cf 91       	pop	r28
    7e76:	df 91       	pop	r29
    7e78:	1f 91       	pop	r17
    7e7a:	08 95       	ret

00007e7c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7e7c:	08 95       	ret

00007e7e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e7e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e80:	80 91 4c 04 	lds	r24, 0x044C
    7e84:	88 23       	and	r24, r24
    7e86:	71 f0       	breq	.+28     	; 0x7ea4 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e88:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7e8c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e90:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e94:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7e98:	83 ff       	sbrs	r24, 3
    7e9a:	01 c0       	rjmp	.+2      	; 0x7e9e <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    7e9c:	7c de       	rcall	.-776    	; 0x7b96 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e9e:	1f 70       	andi	r17, 0x0F	; 15
    7ea0:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7ea4:	1f 91       	pop	r17
    7ea6:	08 95       	ret

00007ea8 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    7ea8:	4f 92       	push	r4
    7eaa:	5f 92       	push	r5
    7eac:	6f 92       	push	r6
    7eae:	7f 92       	push	r7
    7eb0:	8f 92       	push	r8
    7eb2:	9f 92       	push	r9
    7eb4:	af 92       	push	r10
    7eb6:	bf 92       	push	r11
    7eb8:	cf 92       	push	r12
    7eba:	df 92       	push	r13
    7ebc:	ef 92       	push	r14
    7ebe:	ff 92       	push	r15
    7ec0:	0f 93       	push	r16
    7ec2:	1f 93       	push	r17
    7ec4:	df 93       	push	r29
    7ec6:	cf 93       	push	r28
    7ec8:	00 d0       	rcall	.+0      	; 0x7eca <HID_Device_USBTask+0x22>
    7eca:	0f 92       	push	r0
    7ecc:	cd b7       	in	r28, 0x3d	; 61
    7ece:	de b7       	in	r29, 0x3e	; 62
    7ed0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    7ed2:	6d b6       	in	r6, 0x3d	; 61
    7ed4:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    7ed6:	80 91 4c 04 	lds	r24, 0x044C
    7eda:	84 30       	cpi	r24, 0x04	; 4
    7edc:	09 f0       	breq	.+2      	; 0x7ee0 <HID_Device_USBTask+0x38>
    7ede:	9a c0       	rjmp	.+308    	; 0x8014 <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    7ee0:	20 91 e4 00 	lds	r18, 0x00E4
    7ee4:	30 91 e5 00 	lds	r19, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    7ee8:	f7 01       	movw	r30, r14
    7eea:	82 85       	ldd	r24, Z+10	; 0x0a
    7eec:	93 85       	ldd	r25, Z+11	; 0x0b
    7eee:	82 17       	cp	r24, r18
    7ef0:	93 07       	cpc	r25, r19
    7ef2:	09 f4       	brne	.+2      	; 0x7ef6 <HID_Device_USBTask+0x4e>
    7ef4:	8f c0       	rjmp	.+286    	; 0x8014 <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ef6:	81 81       	ldd	r24, Z+1	; 0x01
    7ef8:	8f 70       	andi	r24, 0x0F	; 15
    7efa:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7efe:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    7f02:	85 ff       	sbrs	r24, 5
    7f04:	87 c0       	rjmp	.+270    	; 0x8014 <HID_Device_USBTask+0x16c>
    7f06:	5d b6       	in	r5, 0x3d	; 61
    7f08:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    7f0a:	40 85       	ldd	r20, Z+8	; 0x08
    7f0c:	50 e0       	ldi	r21, 0x00	; 0
    7f0e:	8d b7       	in	r24, 0x3d	; 61
    7f10:	9e b7       	in	r25, 0x3e	; 62
    7f12:	84 1b       	sub	r24, r20
    7f14:	95 0b       	sbc	r25, r21
    7f16:	0f b6       	in	r0, 0x3f	; 63
    7f18:	f8 94       	cli
    7f1a:	9e bf       	out	0x3e, r25	; 62
    7f1c:	0f be       	out	0x3f, r0	; 63
    7f1e:	8d bf       	out	0x3d, r24	; 61
    7f20:	0d b7       	in	r16, 0x3d	; 61
    7f22:	1e b7       	in	r17, 0x3e	; 62
    7f24:	0f 5f       	subi	r16, 0xFF	; 255
    7f26:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    7f28:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    7f2a:	1b 82       	std	Y+3, r1	; 0x03
    7f2c:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    7f2e:	c0 2e       	mov	r12, r16
    7f30:	91 2e       	mov	r9, r17
    7f32:	c8 01       	movw	r24, r16
    7f34:	60 e0       	ldi	r22, 0x00	; 0
    7f36:	70 e0       	ldi	r23, 0x00	; 0
    7f38:	50 e0       	ldi	r21, 0x00	; 0
    7f3a:	56 d5       	rcall	.+2732   	; 0x89e8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    7f3c:	c7 01       	movw	r24, r14
    7f3e:	be 01       	movw	r22, r28
    7f40:	6f 5f       	subi	r22, 0xFF	; 255
    7f42:	7f 4f       	sbci	r23, 0xFF	; 255
    7f44:	40 e0       	ldi	r20, 0x00	; 0
    7f46:	98 01       	movw	r18, r16
    7f48:	8e 01       	movw	r16, r28
    7f4a:	0e 5f       	subi	r16, 0xFE	; 254
    7f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f4e:	0e 94 c2 30 	call	0x6184	; 0x6184 <CALLBACK_HID_Device_CreateHIDReport>
    7f52:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    7f54:	f7 01       	movw	r30, r14
    7f56:	84 85       	ldd	r24, Z+12	; 0x0c
    7f58:	95 85       	ldd	r25, Z+13	; 0x0d
    7f5a:	89 2b       	or	r24, r25
    7f5c:	19 f4       	brne	.+6      	; 0x7f64 <HID_Device_USBTask+0xbc>
    7f5e:	aa 24       	eor	r10, r10
    7f60:	bb 24       	eor	r11, r11
    7f62:	0b c0       	rjmp	.+22     	; 0x7f7a <HID_Device_USBTask+0xd2>
    7f64:	20 e0       	ldi	r18, 0x00	; 0
    7f66:	f7 01       	movw	r30, r14
    7f68:	86 85       	ldd	r24, Z+14	; 0x0e
    7f6a:	97 85       	ldd	r25, Z+15	; 0x0f
    7f6c:	89 2b       	or	r24, r25
    7f6e:	09 f0       	breq	.+2      	; 0x7f72 <HID_Device_USBTask+0xca>
    7f70:	21 e0       	ldi	r18, 0x01	; 1
    7f72:	81 e0       	ldi	r24, 0x01	; 1
    7f74:	28 27       	eor	r18, r24
    7f76:	a2 2e       	mov	r10, r18
    7f78:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    7f7a:	f7 01       	movw	r30, r14
    7f7c:	06 81       	ldd	r16, Z+6	; 0x06
    7f7e:	17 81       	ldd	r17, Z+7	; 0x07
    7f80:	01 15       	cp	r16, r1
    7f82:	11 05       	cpc	r17, r1
    7f84:	11 f4       	brne	.+4      	; 0x7f8a <HID_Device_USBTask+0xe2>
    7f86:	dd 24       	eor	r13, r13
    7f88:	12 c0       	rjmp	.+36     	; 0x7fae <HID_Device_USBTask+0x106>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    7f8a:	4a 81       	ldd	r20, Y+2	; 0x02
    7f8c:	5b 81       	ldd	r21, Y+3	; 0x03
    7f8e:	8c 2d       	mov	r24, r12
    7f90:	99 2d       	mov	r25, r9
    7f92:	b8 01       	movw	r22, r16
    7f94:	13 d5       	rcall	.+2598   	; 0x89bc <memcmp>
    7f96:	dd 24       	eor	r13, r13
    7f98:	00 97       	sbiw	r24, 0x00	; 0
    7f9a:	11 f0       	breq	.+4      	; 0x7fa0 <HID_Device_USBTask+0xf8>
    7f9c:	dd 24       	eor	r13, r13
    7f9e:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    7fa0:	f7 01       	movw	r30, r14
    7fa2:	40 85       	ldd	r20, Z+8	; 0x08
    7fa4:	c8 01       	movw	r24, r16
    7fa6:	6c 2d       	mov	r22, r12
    7fa8:	79 2d       	mov	r23, r9
    7faa:	50 e0       	ldi	r21, 0x00	; 0
    7fac:	14 d5       	rcall	.+2600   	; 0x89d6 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    7fae:	8a 81       	ldd	r24, Y+2	; 0x02
    7fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    7fb2:	89 2b       	or	r24, r25
    7fb4:	01 f1       	breq	.+64     	; 0x7ff6 <HID_Device_USBTask+0x14e>
    7fb6:	88 20       	and	r8, r8
    7fb8:	21 f4       	brne	.+8      	; 0x7fc2 <HID_Device_USBTask+0x11a>
    7fba:	dd 20       	and	r13, r13
    7fbc:	11 f4       	brne	.+4      	; 0x7fc2 <HID_Device_USBTask+0x11a>
    7fbe:	ab 28       	or	r10, r11
    7fc0:	d1 f0       	breq	.+52     	; 0x7ff6 <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    7fc2:	f7 01       	movw	r30, r14
    7fc4:	84 85       	ldd	r24, Z+12	; 0x0c
    7fc6:	95 85       	ldd	r25, Z+13	; 0x0d
    7fc8:	97 87       	std	Z+15, r25	; 0x0f
    7fca:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7fcc:	81 81       	ldd	r24, Z+1	; 0x01
    7fce:	8f 70       	andi	r24, 0x0F	; 15
    7fd0:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    7fd4:	89 81       	ldd	r24, Y+1	; 0x01
    7fd6:	88 23       	and	r24, r24
    7fd8:	11 f0       	breq	.+4      	; 0x7fde <HID_Device_USBTask+0x136>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7fda:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    7fde:	6a 81       	ldd	r22, Y+2	; 0x02
    7fe0:	7b 81       	ldd	r23, Y+3	; 0x03
    7fe2:	8c 2d       	mov	r24, r12
    7fe4:	99 2d       	mov	r25, r9
    7fe6:	40 e0       	ldi	r20, 0x00	; 0
    7fe8:	50 e0       	ldi	r21, 0x00	; 0
    7fea:	8b db       	rcall	.-2282   	; 0x7702 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7fec:	80 91 e8 00 	lds	r24, 0x00E8
    7ff0:	8e 77       	andi	r24, 0x7E	; 126
    7ff2:	80 93 e8 00 	sts	0x00E8, r24
    7ff6:	80 91 e4 00 	lds	r24, 0x00E4
    7ffa:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    7ffe:	f7 01       	movw	r30, r14
    8000:	93 87       	std	Z+11, r25	; 0x0b
    8002:	82 87       	std	Z+10, r24	; 0x0a
    8004:	25 2d       	mov	r18, r5
    8006:	34 2d       	mov	r19, r4
    8008:	c9 01       	movw	r24, r18
    800a:	0f b6       	in	r0, 0x3f	; 63
    800c:	f8 94       	cli
    800e:	9e bf       	out	0x3e, r25	; 62
    8010:	0f be       	out	0x3f, r0	; 63
    8012:	8d bf       	out	0x3d, r24	; 61
	}
}
    8014:	0f b6       	in	r0, 0x3f	; 63
    8016:	f8 94       	cli
    8018:	7e be       	out	0x3e, r7	; 62
    801a:	0f be       	out	0x3f, r0	; 63
    801c:	6d be       	out	0x3d, r6	; 61
    801e:	0f 90       	pop	r0
    8020:	0f 90       	pop	r0
    8022:	0f 90       	pop	r0
    8024:	cf 91       	pop	r28
    8026:	df 91       	pop	r29
    8028:	1f 91       	pop	r17
    802a:	0f 91       	pop	r16
    802c:	ff 90       	pop	r15
    802e:	ef 90       	pop	r14
    8030:	df 90       	pop	r13
    8032:	cf 90       	pop	r12
    8034:	bf 90       	pop	r11
    8036:	af 90       	pop	r10
    8038:	9f 90       	pop	r9
    803a:	8f 90       	pop	r8
    803c:	7f 90       	pop	r7
    803e:	6f 90       	pop	r6
    8040:	5f 90       	pop	r5
    8042:	4f 90       	pop	r4
    8044:	08 95       	ret

00008046 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    8046:	cf 93       	push	r28
    8048:	df 93       	push	r29
    804a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    804c:	09 96       	adiw	r24, 0x09	; 9
    804e:	fc 01       	movw	r30, r24
    8050:	87 e0       	ldi	r24, 0x07	; 7
    8052:	ef 01       	movw	r28, r30
    8054:	19 92       	st	Y+, r1
    8056:	8a 95       	dec	r24
    8058:	e9 f7       	brne	.-6      	; 0x8054 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    805a:	81 e0       	ldi	r24, 0x01	; 1
    805c:	19 96       	adiw	r26, 0x09	; 9
    805e:	8c 93       	st	X, r24
    8060:	19 97       	sbiw	r26, 0x09	; 9
	HIDInterfaceInfo->State.IdleCount           = 500;
    8062:	84 ef       	ldi	r24, 0xF4	; 244
    8064:	91 e0       	ldi	r25, 0x01	; 1
    8066:	1d 96       	adiw	r26, 0x0d	; 13
    8068:	9c 93       	st	X, r25
    806a:	8e 93       	st	-X, r24
    806c:	1c 97       	sbiw	r26, 0x0c	; 12

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    806e:	83 e0       	ldi	r24, 0x03	; 3
    8070:	14 96       	adiw	r26, 0x04	; 4
    8072:	8c 93       	st	X, r24
    8074:	14 97       	sbiw	r26, 0x04	; 4

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    8076:	cd 01       	movw	r24, r26
    8078:	01 96       	adiw	r24, 0x01	; 1
    807a:	61 e0       	ldi	r22, 0x01	; 1
    807c:	cc db       	rcall	.-2152   	; 0x7816 <Endpoint_ConfigureEndpointTable>
    807e:	81 11       	cpse	r24, r1
    8080:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    8082:	df 91       	pop	r29
    8084:	cf 91       	pop	r28
    8086:	08 95       	ret

00008088 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    8088:	6f 92       	push	r6
    808a:	7f 92       	push	r7
    808c:	8f 92       	push	r8
    808e:	9f 92       	push	r9
    8090:	af 92       	push	r10
    8092:	bf 92       	push	r11
    8094:	cf 92       	push	r12
    8096:	df 92       	push	r13
    8098:	ef 92       	push	r14
    809a:	ff 92       	push	r15
    809c:	0f 93       	push	r16
    809e:	1f 93       	push	r17
    80a0:	df 93       	push	r29
    80a2:	cf 93       	push	r28
    80a4:	00 d0       	rcall	.+0      	; 0x80a6 <HID_Device_ProcessControlRequest+0x1e>
    80a6:	0f 92       	push	r0
    80a8:	cd b7       	in	r28, 0x3d	; 61
    80aa:	de b7       	in	r29, 0x3e	; 62
    80ac:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    80ae:	6d b6       	in	r6, 0x3d	; 61
    80b0:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    80b2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    80b6:	83 ff       	sbrs	r24, 3
    80b8:	1a c1       	rjmp	.+564    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    80ba:	f6 01       	movw	r30, r12
    80bc:	80 81       	ld	r24, Z
    80be:	90 e0       	ldi	r25, 0x00	; 0
    80c0:	20 91 51 04 	lds	r18, 0x0451
    80c4:	30 91 52 04 	lds	r19, 0x0452
    80c8:	28 17       	cp	r18, r24
    80ca:	39 07       	cpc	r19, r25
    80cc:	09 f0       	breq	.+2      	; 0x80d0 <HID_Device_ProcessControlRequest+0x48>
    80ce:	0f c1       	rjmp	.+542    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
	  return;

	switch (USB_ControlRequest.bRequest)
    80d0:	80 91 4e 04 	lds	r24, 0x044E
    80d4:	83 30       	cpi	r24, 0x03	; 3
    80d6:	09 f4       	brne	.+2      	; 0x80da <HID_Device_ProcessControlRequest+0x52>
    80d8:	b2 c0       	rjmp	.+356    	; 0x823e <HID_Device_ProcessControlRequest+0x1b6>
    80da:	84 30       	cpi	r24, 0x04	; 4
    80dc:	30 f4       	brcc	.+12     	; 0x80ea <HID_Device_ProcessControlRequest+0x62>
    80de:	81 30       	cpi	r24, 0x01	; 1
    80e0:	71 f0       	breq	.+28     	; 0x80fe <HID_Device_ProcessControlRequest+0x76>
    80e2:	82 30       	cpi	r24, 0x02	; 2
    80e4:	09 f0       	breq	.+2      	; 0x80e8 <HID_Device_ProcessControlRequest+0x60>
    80e6:	03 c1       	rjmp	.+518    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    80e8:	e6 c0       	rjmp	.+460    	; 0x82b6 <HID_Device_ProcessControlRequest+0x22e>
    80ea:	8a 30       	cpi	r24, 0x0A	; 10
    80ec:	09 f4       	brne	.+2      	; 0x80f0 <HID_Device_ProcessControlRequest+0x68>
    80ee:	cb c0       	rjmp	.+406    	; 0x8286 <HID_Device_ProcessControlRequest+0x1fe>
    80f0:	8b 30       	cpi	r24, 0x0B	; 11
    80f2:	09 f4       	brne	.+2      	; 0x80f6 <HID_Device_ProcessControlRequest+0x6e>
    80f4:	b5 c0       	rjmp	.+362    	; 0x8260 <HID_Device_ProcessControlRequest+0x1d8>
    80f6:	89 30       	cpi	r24, 0x09	; 9
    80f8:	09 f0       	breq	.+2      	; 0x80fc <HID_Device_ProcessControlRequest+0x74>
    80fa:	f9 c0       	rjmp	.+498    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    80fc:	5c c0       	rjmp	.+184    	; 0x81b6 <HID_Device_ProcessControlRequest+0x12e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    80fe:	80 91 4d 04 	lds	r24, 0x044D
    8102:	81 3a       	cpi	r24, 0xA1	; 161
    8104:	09 f0       	breq	.+2      	; 0x8108 <HID_Device_ProcessControlRequest+0x80>
    8106:	f3 c0       	rjmp	.+486    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    8108:	9d b6       	in	r9, 0x3d	; 61
    810a:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    810c:	1b 82       	std	Y+3, r1	; 0x03
    810e:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    8110:	80 91 4f 04 	lds	r24, 0x044F
    8114:	10 91 50 04 	lds	r17, 0x0450
    8118:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    811a:	f6 01       	movw	r30, r12
    811c:	40 85       	ldd	r20, Z+8	; 0x08
    811e:	50 e0       	ldi	r21, 0x00	; 0
    8120:	8d b7       	in	r24, 0x3d	; 61
    8122:	9e b7       	in	r25, 0x3e	; 62
    8124:	84 1b       	sub	r24, r20
    8126:	95 0b       	sbc	r25, r21
    8128:	0f b6       	in	r0, 0x3f	; 63
    812a:	f8 94       	cli
    812c:	9e bf       	out	0x3e, r25	; 62
    812e:	0f be       	out	0x3f, r0	; 63
    8130:	8d bf       	out	0x3d, r24	; 61
    8132:	ed b6       	in	r14, 0x3d	; 61
    8134:	fe b6       	in	r15, 0x3e	; 62
    8136:	08 94       	sec
    8138:	e1 1c       	adc	r14, r1
    813a:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    813c:	be 2c       	mov	r11, r14
    813e:	af 2c       	mov	r10, r15
    8140:	c7 01       	movw	r24, r14
    8142:	60 e0       	ldi	r22, 0x00	; 0
    8144:	70 e0       	ldi	r23, 0x00	; 0
    8146:	50 e0       	ldi	r21, 0x00	; 0
    8148:	4f d4       	rcall	.+2206   	; 0x89e8 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    814a:	11 50       	subi	r17, 0x01	; 1
    814c:	c6 01       	movw	r24, r12
    814e:	be 01       	movw	r22, r28
    8150:	6f 5f       	subi	r22, 0xFF	; 255
    8152:	7f 4f       	sbci	r23, 0xFF	; 255
    8154:	41 2f       	mov	r20, r17
    8156:	97 01       	movw	r18, r14
    8158:	8e 01       	movw	r16, r28
    815a:	0e 5f       	subi	r16, 0xFE	; 254
    815c:	1f 4f       	sbci	r17, 0xFF	; 255
    815e:	0e 94 c2 30 	call	0x6184	; 0x6184 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    8162:	f6 01       	movw	r30, r12
    8164:	26 81       	ldd	r18, Z+6	; 0x06
    8166:	37 81       	ldd	r19, Z+7	; 0x07
    8168:	21 15       	cp	r18, r1
    816a:	31 05       	cpc	r19, r1
    816c:	29 f0       	breq	.+10     	; 0x8178 <HID_Device_ProcessControlRequest+0xf0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    816e:	40 85       	ldd	r20, Z+8	; 0x08
    8170:	c9 01       	movw	r24, r18
    8172:	b7 01       	movw	r22, r14
    8174:	50 e0       	ldi	r21, 0x00	; 0
    8176:	2f d4       	rcall	.+2142   	; 0x89d6 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    8178:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    817c:	80 91 e8 00 	lds	r24, 0x00E8
    8180:	87 7f       	andi	r24, 0xF7	; 247
    8182:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    8186:	89 81       	ldd	r24, Y+1	; 0x01
    8188:	88 23       	and	r24, r24
    818a:	11 f0       	breq	.+4      	; 0x8190 <HID_Device_ProcessControlRequest+0x108>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    818c:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    8190:	6a 81       	ldd	r22, Y+2	; 0x02
    8192:	7b 81       	ldd	r23, Y+3	; 0x03
    8194:	8b 2d       	mov	r24, r11
    8196:	9a 2d       	mov	r25, r10
    8198:	aa d9       	rcall	.-3244   	; 0x74ee <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    819a:	80 91 e8 00 	lds	r24, 0x00E8
    819e:	8b 77       	andi	r24, 0x7B	; 123
    81a0:	80 93 e8 00 	sts	0x00E8, r24
    81a4:	29 2d       	mov	r18, r9
    81a6:	38 2d       	mov	r19, r8
    81a8:	c9 01       	movw	r24, r18
    81aa:	0f b6       	in	r0, 0x3f	; 63
    81ac:	f8 94       	cli
    81ae:	9e bf       	out	0x3e, r25	; 62
    81b0:	0f be       	out	0x3f, r0	; 63
    81b2:	8d bf       	out	0x3d, r24	; 61
    81b4:	9c c0       	rjmp	.+312    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    81b6:	80 91 4d 04 	lds	r24, 0x044D
    81ba:	81 32       	cpi	r24, 0x21	; 33
    81bc:	09 f0       	breq	.+2      	; 0x81c0 <HID_Device_ProcessControlRequest+0x138>
    81be:	97 c0       	rjmp	.+302    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    81c0:	9d b6       	in	r9, 0x3d	; 61
    81c2:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    81c4:	00 91 53 04 	lds	r16, 0x0453
    81c8:	10 91 54 04 	lds	r17, 0x0454
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    81cc:	a0 90 4f 04 	lds	r10, 0x044F
    81d0:	b0 90 50 04 	lds	r11, 0x0450
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    81d4:	8d b7       	in	r24, 0x3d	; 61
    81d6:	9e b7       	in	r25, 0x3e	; 62
    81d8:	80 1b       	sub	r24, r16
    81da:	91 0b       	sbc	r25, r17
    81dc:	0f b6       	in	r0, 0x3f	; 63
    81de:	f8 94       	cli
    81e0:	9e bf       	out	0x3e, r25	; 62
    81e2:	0f be       	out	0x3f, r0	; 63
    81e4:	8d bf       	out	0x3d, r24	; 61
    81e6:	ed b6       	in	r14, 0x3d	; 61
    81e8:	fe b6       	in	r15, 0x3e	; 62
    81ea:	08 94       	sec
    81ec:	e1 1c       	adc	r14, r1
    81ee:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    81f0:	80 91 e8 00 	lds	r24, 0x00E8
    81f4:	87 7f       	andi	r24, 0xF7	; 247
    81f6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    81fa:	c7 01       	movw	r24, r14
    81fc:	b8 01       	movw	r22, r16
    81fe:	db d9       	rcall	.-3146   	; 0x75b6 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    8200:	80 91 e8 00 	lds	r24, 0x00E8
    8204:	8e 77       	andi	r24, 0x7E	; 126
    8206:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    820a:	80 e0       	ldi	r24, 0x00	; 0
    820c:	90 e0       	ldi	r25, 0x00	; 0
    820e:	aa 20       	and	r10, r10
    8210:	11 f0       	breq	.+4      	; 0x8216 <HID_Device_ProcessControlRequest+0x18e>
    8212:	81 e0       	ldi	r24, 0x01	; 1
    8214:	90 e0       	ldi	r25, 0x00	; 0
    8216:	ba 94       	dec	r11
    8218:	e8 0e       	add	r14, r24
    821a:	f9 1e       	adc	r15, r25
    821c:	08 1b       	sub	r16, r24
    821e:	19 0b       	sbc	r17, r25
    8220:	c6 01       	movw	r24, r12
    8222:	6a 2d       	mov	r22, r10
    8224:	4b 2d       	mov	r20, r11
    8226:	97 01       	movw	r18, r14
    8228:	0e 94 bf 30 	call	0x617e	; 0x617e <CALLBACK_HID_Device_ProcessHIDReport>
    822c:	89 2d       	mov	r24, r9
    822e:	98 2d       	mov	r25, r8
    8230:	9c 01       	movw	r18, r24
    8232:	0f b6       	in	r0, 0x3f	; 63
    8234:	f8 94       	cli
    8236:	3e bf       	out	0x3e, r19	; 62
    8238:	0f be       	out	0x3f, r0	; 63
    823a:	2d bf       	out	0x3d, r18	; 61
    823c:	58 c0       	rjmp	.+176    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    823e:	80 91 4d 04 	lds	r24, 0x044D
    8242:	81 3a       	cpi	r24, 0xA1	; 161
    8244:	09 f0       	breq	.+2      	; 0x8248 <HID_Device_ProcessControlRequest+0x1c0>
    8246:	53 c0       	rjmp	.+166    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    8248:	80 91 e8 00 	lds	r24, 0x00E8
    824c:	87 7f       	andi	r24, 0xF7	; 247
    824e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    8252:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    8256:	80 ff       	sbrs	r24, 0
    8258:	fc cf       	rjmp	.-8      	; 0x8252 <HID_Device_ProcessControlRequest+0x1ca>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    825a:	f6 01       	movw	r30, r12
    825c:	81 85       	ldd	r24, Z+9	; 0x09
    825e:	3f c0       	rjmp	.+126    	; 0x82de <HID_Device_ProcessControlRequest+0x256>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    8260:	80 91 4d 04 	lds	r24, 0x044D
    8264:	81 32       	cpi	r24, 0x21	; 33
    8266:	09 f0       	breq	.+2      	; 0x826a <HID_Device_ProcessControlRequest+0x1e2>
    8268:	42 c0       	rjmp	.+132    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    826a:	80 91 e8 00 	lds	r24, 0x00E8
    826e:	87 7f       	andi	r24, 0xF7	; 247
    8270:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    8274:	0c db       	rcall	.-2536   	; 0x788e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    8276:	90 e0       	ldi	r25, 0x00	; 0
    8278:	80 91 4f 04 	lds	r24, 0x044F
    827c:	81 11       	cpse	r24, r1
    827e:	91 e0       	ldi	r25, 0x01	; 1
    8280:	f6 01       	movw	r30, r12
    8282:	91 87       	std	Z+9, r25	; 0x09
    8284:	34 c0       	rjmp	.+104    	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    8286:	80 91 4d 04 	lds	r24, 0x044D
    828a:	81 32       	cpi	r24, 0x21	; 33
    828c:	81 f5       	brne	.+96     	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    828e:	80 91 e8 00 	lds	r24, 0x00E8
    8292:	87 7f       	andi	r24, 0xF7	; 247
    8294:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    8298:	fa da       	rcall	.-2572   	; 0x788e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    829a:	80 91 4f 04 	lds	r24, 0x044F
    829e:	90 91 50 04 	lds	r25, 0x0450
    82a2:	80 70       	andi	r24, 0x00	; 0
    82a4:	36 e0       	ldi	r19, 0x06	; 6
    82a6:	96 95       	lsr	r25
    82a8:	87 95       	ror	r24
    82aa:	3a 95       	dec	r19
    82ac:	e1 f7       	brne	.-8      	; 0x82a6 <HID_Device_ProcessControlRequest+0x21e>
    82ae:	f6 01       	movw	r30, r12
    82b0:	95 87       	std	Z+13, r25	; 0x0d
    82b2:	84 87       	std	Z+12, r24	; 0x0c
    82b4:	1c c0       	rjmp	.+56     	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    82b6:	80 91 4d 04 	lds	r24, 0x044D
    82ba:	81 3a       	cpi	r24, 0xA1	; 161
    82bc:	c1 f4       	brne	.+48     	; 0x82ee <HID_Device_ProcessControlRequest+0x266>
    82be:	80 91 e8 00 	lds	r24, 0x00E8
    82c2:	87 7f       	andi	r24, 0xF7	; 247
    82c4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    82c8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    82cc:	80 ff       	sbrs	r24, 0
    82ce:	fc cf       	rjmp	.-8      	; 0x82c8 <HID_Device_ProcessControlRequest+0x240>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    82d0:	f6 01       	movw	r30, r12
    82d2:	84 85       	ldd	r24, Z+12	; 0x0c
    82d4:	95 85       	ldd	r25, Z+13	; 0x0d
    82d6:	96 95       	lsr	r25
    82d8:	87 95       	ror	r24
    82da:	96 95       	lsr	r25
    82dc:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    82de:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    82e2:	80 91 e8 00 	lds	r24, 0x00E8
    82e6:	8e 77       	andi	r24, 0x7E	; 126
    82e8:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    82ec:	d0 da       	rcall	.-2656   	; 0x788e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    82ee:	0f b6       	in	r0, 0x3f	; 63
    82f0:	f8 94       	cli
    82f2:	7e be       	out	0x3e, r7	; 62
    82f4:	0f be       	out	0x3f, r0	; 63
    82f6:	6d be       	out	0x3d, r6	; 61
    82f8:	0f 90       	pop	r0
    82fa:	0f 90       	pop	r0
    82fc:	0f 90       	pop	r0
    82fe:	cf 91       	pop	r28
    8300:	df 91       	pop	r29
    8302:	1f 91       	pop	r17
    8304:	0f 91       	pop	r16
    8306:	ff 90       	pop	r15
    8308:	ef 90       	pop	r14
    830a:	df 90       	pop	r13
    830c:	cf 90       	pop	r12
    830e:	bf 90       	pop	r11
    8310:	af 90       	pop	r10
    8312:	9f 90       	pop	r9
    8314:	8f 90       	pop	r8
    8316:	7f 90       	pop	r7
    8318:	6f 90       	pop	r6
    831a:	08 95       	ret

0000831c <__subsf3>:
    831c:	50 58       	subi	r21, 0x80	; 128

0000831e <__addsf3>:
    831e:	bb 27       	eor	r27, r27
    8320:	aa 27       	eor	r26, r26
    8322:	0e d0       	rcall	.+28     	; 0x8340 <__addsf3x>
    8324:	48 c1       	rjmp	.+656    	; 0x85b6 <__fp_round>
    8326:	39 d1       	rcall	.+626    	; 0x859a <__fp_pscA>
    8328:	30 f0       	brcs	.+12     	; 0x8336 <__addsf3+0x18>
    832a:	3e d1       	rcall	.+636    	; 0x85a8 <__fp_pscB>
    832c:	20 f0       	brcs	.+8      	; 0x8336 <__addsf3+0x18>
    832e:	31 f4       	brne	.+12     	; 0x833c <__addsf3+0x1e>
    8330:	9f 3f       	cpi	r25, 0xFF	; 255
    8332:	11 f4       	brne	.+4      	; 0x8338 <__addsf3+0x1a>
    8334:	1e f4       	brtc	.+6      	; 0x833c <__addsf3+0x1e>
    8336:	2e c1       	rjmp	.+604    	; 0x8594 <__fp_nan>
    8338:	0e f4       	brtc	.+2      	; 0x833c <__addsf3+0x1e>
    833a:	e0 95       	com	r30
    833c:	e7 fb       	bst	r30, 7
    833e:	24 c1       	rjmp	.+584    	; 0x8588 <__fp_inf>

00008340 <__addsf3x>:
    8340:	e9 2f       	mov	r30, r25
    8342:	4a d1       	rcall	.+660    	; 0x85d8 <__fp_split3>
    8344:	80 f3       	brcs	.-32     	; 0x8326 <__addsf3+0x8>
    8346:	ba 17       	cp	r27, r26
    8348:	62 07       	cpc	r22, r18
    834a:	73 07       	cpc	r23, r19
    834c:	84 07       	cpc	r24, r20
    834e:	95 07       	cpc	r25, r21
    8350:	18 f0       	brcs	.+6      	; 0x8358 <__addsf3x+0x18>
    8352:	71 f4       	brne	.+28     	; 0x8370 <__addsf3x+0x30>
    8354:	9e f5       	brtc	.+102    	; 0x83bc <__addsf3x+0x7c>
    8356:	62 c1       	rjmp	.+708    	; 0x861c <__fp_zero>
    8358:	0e f4       	brtc	.+2      	; 0x835c <__addsf3x+0x1c>
    835a:	e0 95       	com	r30
    835c:	0b 2e       	mov	r0, r27
    835e:	ba 2f       	mov	r27, r26
    8360:	a0 2d       	mov	r26, r0
    8362:	0b 01       	movw	r0, r22
    8364:	b9 01       	movw	r22, r18
    8366:	90 01       	movw	r18, r0
    8368:	0c 01       	movw	r0, r24
    836a:	ca 01       	movw	r24, r20
    836c:	a0 01       	movw	r20, r0
    836e:	11 24       	eor	r1, r1
    8370:	ff 27       	eor	r31, r31
    8372:	59 1b       	sub	r21, r25
    8374:	99 f0       	breq	.+38     	; 0x839c <__addsf3x+0x5c>
    8376:	59 3f       	cpi	r21, 0xF9	; 249
    8378:	50 f4       	brcc	.+20     	; 0x838e <__addsf3x+0x4e>
    837a:	50 3e       	cpi	r21, 0xE0	; 224
    837c:	68 f1       	brcs	.+90     	; 0x83d8 <__addsf3x+0x98>
    837e:	1a 16       	cp	r1, r26
    8380:	f0 40       	sbci	r31, 0x00	; 0
    8382:	a2 2f       	mov	r26, r18
    8384:	23 2f       	mov	r18, r19
    8386:	34 2f       	mov	r19, r20
    8388:	44 27       	eor	r20, r20
    838a:	58 5f       	subi	r21, 0xF8	; 248
    838c:	f3 cf       	rjmp	.-26     	; 0x8374 <__addsf3x+0x34>
    838e:	46 95       	lsr	r20
    8390:	37 95       	ror	r19
    8392:	27 95       	ror	r18
    8394:	a7 95       	ror	r26
    8396:	f0 40       	sbci	r31, 0x00	; 0
    8398:	53 95       	inc	r21
    839a:	c9 f7       	brne	.-14     	; 0x838e <__addsf3x+0x4e>
    839c:	7e f4       	brtc	.+30     	; 0x83bc <__addsf3x+0x7c>
    839e:	1f 16       	cp	r1, r31
    83a0:	ba 0b       	sbc	r27, r26
    83a2:	62 0b       	sbc	r22, r18
    83a4:	73 0b       	sbc	r23, r19
    83a6:	84 0b       	sbc	r24, r20
    83a8:	ba f0       	brmi	.+46     	; 0x83d8 <__addsf3x+0x98>
    83aa:	91 50       	subi	r25, 0x01	; 1
    83ac:	a1 f0       	breq	.+40     	; 0x83d6 <__addsf3x+0x96>
    83ae:	ff 0f       	add	r31, r31
    83b0:	bb 1f       	adc	r27, r27
    83b2:	66 1f       	adc	r22, r22
    83b4:	77 1f       	adc	r23, r23
    83b6:	88 1f       	adc	r24, r24
    83b8:	c2 f7       	brpl	.-16     	; 0x83aa <__addsf3x+0x6a>
    83ba:	0e c0       	rjmp	.+28     	; 0x83d8 <__addsf3x+0x98>
    83bc:	ba 0f       	add	r27, r26
    83be:	62 1f       	adc	r22, r18
    83c0:	73 1f       	adc	r23, r19
    83c2:	84 1f       	adc	r24, r20
    83c4:	48 f4       	brcc	.+18     	; 0x83d8 <__addsf3x+0x98>
    83c6:	87 95       	ror	r24
    83c8:	77 95       	ror	r23
    83ca:	67 95       	ror	r22
    83cc:	b7 95       	ror	r27
    83ce:	f7 95       	ror	r31
    83d0:	9e 3f       	cpi	r25, 0xFE	; 254
    83d2:	08 f0       	brcs	.+2      	; 0x83d6 <__addsf3x+0x96>
    83d4:	b3 cf       	rjmp	.-154    	; 0x833c <__addsf3+0x1e>
    83d6:	93 95       	inc	r25
    83d8:	88 0f       	add	r24, r24
    83da:	08 f0       	brcs	.+2      	; 0x83de <__addsf3x+0x9e>
    83dc:	99 27       	eor	r25, r25
    83de:	ee 0f       	add	r30, r30
    83e0:	97 95       	ror	r25
    83e2:	87 95       	ror	r24
    83e4:	08 95       	ret

000083e6 <__divsf3>:
    83e6:	0c d0       	rcall	.+24     	; 0x8400 <__divsf3x>
    83e8:	e6 c0       	rjmp	.+460    	; 0x85b6 <__fp_round>
    83ea:	de d0       	rcall	.+444    	; 0x85a8 <__fp_pscB>
    83ec:	40 f0       	brcs	.+16     	; 0x83fe <__divsf3+0x18>
    83ee:	d5 d0       	rcall	.+426    	; 0x859a <__fp_pscA>
    83f0:	30 f0       	brcs	.+12     	; 0x83fe <__divsf3+0x18>
    83f2:	21 f4       	brne	.+8      	; 0x83fc <__divsf3+0x16>
    83f4:	5f 3f       	cpi	r21, 0xFF	; 255
    83f6:	19 f0       	breq	.+6      	; 0x83fe <__divsf3+0x18>
    83f8:	c7 c0       	rjmp	.+398    	; 0x8588 <__fp_inf>
    83fa:	51 11       	cpse	r21, r1
    83fc:	10 c1       	rjmp	.+544    	; 0x861e <__fp_szero>
    83fe:	ca c0       	rjmp	.+404    	; 0x8594 <__fp_nan>

00008400 <__divsf3x>:
    8400:	eb d0       	rcall	.+470    	; 0x85d8 <__fp_split3>
    8402:	98 f3       	brcs	.-26     	; 0x83ea <__divsf3+0x4>

00008404 <__divsf3_pse>:
    8404:	99 23       	and	r25, r25
    8406:	c9 f3       	breq	.-14     	; 0x83fa <__divsf3+0x14>
    8408:	55 23       	and	r21, r21
    840a:	b1 f3       	breq	.-20     	; 0x83f8 <__divsf3+0x12>
    840c:	95 1b       	sub	r25, r21
    840e:	55 0b       	sbc	r21, r21
    8410:	bb 27       	eor	r27, r27
    8412:	aa 27       	eor	r26, r26
    8414:	62 17       	cp	r22, r18
    8416:	73 07       	cpc	r23, r19
    8418:	84 07       	cpc	r24, r20
    841a:	38 f0       	brcs	.+14     	; 0x842a <__divsf3_pse+0x26>
    841c:	9f 5f       	subi	r25, 0xFF	; 255
    841e:	5f 4f       	sbci	r21, 0xFF	; 255
    8420:	22 0f       	add	r18, r18
    8422:	33 1f       	adc	r19, r19
    8424:	44 1f       	adc	r20, r20
    8426:	aa 1f       	adc	r26, r26
    8428:	a9 f3       	breq	.-22     	; 0x8414 <__divsf3_pse+0x10>
    842a:	33 d0       	rcall	.+102    	; 0x8492 <__divsf3_pse+0x8e>
    842c:	0e 2e       	mov	r0, r30
    842e:	3a f0       	brmi	.+14     	; 0x843e <__divsf3_pse+0x3a>
    8430:	e0 e8       	ldi	r30, 0x80	; 128
    8432:	30 d0       	rcall	.+96     	; 0x8494 <__divsf3_pse+0x90>
    8434:	91 50       	subi	r25, 0x01	; 1
    8436:	50 40       	sbci	r21, 0x00	; 0
    8438:	e6 95       	lsr	r30
    843a:	00 1c       	adc	r0, r0
    843c:	ca f7       	brpl	.-14     	; 0x8430 <__divsf3_pse+0x2c>
    843e:	29 d0       	rcall	.+82     	; 0x8492 <__divsf3_pse+0x8e>
    8440:	fe 2f       	mov	r31, r30
    8442:	27 d0       	rcall	.+78     	; 0x8492 <__divsf3_pse+0x8e>
    8444:	66 0f       	add	r22, r22
    8446:	77 1f       	adc	r23, r23
    8448:	88 1f       	adc	r24, r24
    844a:	bb 1f       	adc	r27, r27
    844c:	26 17       	cp	r18, r22
    844e:	37 07       	cpc	r19, r23
    8450:	48 07       	cpc	r20, r24
    8452:	ab 07       	cpc	r26, r27
    8454:	b0 e8       	ldi	r27, 0x80	; 128
    8456:	09 f0       	breq	.+2      	; 0x845a <__divsf3_pse+0x56>
    8458:	bb 0b       	sbc	r27, r27
    845a:	80 2d       	mov	r24, r0
    845c:	bf 01       	movw	r22, r30
    845e:	ff 27       	eor	r31, r31
    8460:	93 58       	subi	r25, 0x83	; 131
    8462:	5f 4f       	sbci	r21, 0xFF	; 255
    8464:	2a f0       	brmi	.+10     	; 0x8470 <__divsf3_pse+0x6c>
    8466:	9e 3f       	cpi	r25, 0xFE	; 254
    8468:	51 05       	cpc	r21, r1
    846a:	68 f0       	brcs	.+26     	; 0x8486 <__divsf3_pse+0x82>
    846c:	8d c0       	rjmp	.+282    	; 0x8588 <__fp_inf>
    846e:	d7 c0       	rjmp	.+430    	; 0x861e <__fp_szero>
    8470:	5f 3f       	cpi	r21, 0xFF	; 255
    8472:	ec f3       	brlt	.-6      	; 0x846e <__divsf3_pse+0x6a>
    8474:	98 3e       	cpi	r25, 0xE8	; 232
    8476:	dc f3       	brlt	.-10     	; 0x846e <__divsf3_pse+0x6a>
    8478:	86 95       	lsr	r24
    847a:	77 95       	ror	r23
    847c:	67 95       	ror	r22
    847e:	b7 95       	ror	r27
    8480:	f7 95       	ror	r31
    8482:	9f 5f       	subi	r25, 0xFF	; 255
    8484:	c9 f7       	brne	.-14     	; 0x8478 <__divsf3_pse+0x74>
    8486:	88 0f       	add	r24, r24
    8488:	91 1d       	adc	r25, r1
    848a:	96 95       	lsr	r25
    848c:	87 95       	ror	r24
    848e:	97 f9       	bld	r25, 7
    8490:	08 95       	ret
    8492:	e1 e0       	ldi	r30, 0x01	; 1
    8494:	66 0f       	add	r22, r22
    8496:	77 1f       	adc	r23, r23
    8498:	88 1f       	adc	r24, r24
    849a:	bb 1f       	adc	r27, r27
    849c:	62 17       	cp	r22, r18
    849e:	73 07       	cpc	r23, r19
    84a0:	84 07       	cpc	r24, r20
    84a2:	ba 07       	cpc	r27, r26
    84a4:	20 f0       	brcs	.+8      	; 0x84ae <__divsf3_pse+0xaa>
    84a6:	62 1b       	sub	r22, r18
    84a8:	73 0b       	sbc	r23, r19
    84aa:	84 0b       	sbc	r24, r20
    84ac:	ba 0b       	sbc	r27, r26
    84ae:	ee 1f       	adc	r30, r30
    84b0:	88 f7       	brcc	.-30     	; 0x8494 <__divsf3_pse+0x90>
    84b2:	e0 95       	com	r30
    84b4:	08 95       	ret

000084b6 <__fixunssfsi>:
    84b6:	98 d0       	rcall	.+304    	; 0x85e8 <__fp_splitA>
    84b8:	88 f0       	brcs	.+34     	; 0x84dc <__fixunssfsi+0x26>
    84ba:	9f 57       	subi	r25, 0x7F	; 127
    84bc:	90 f0       	brcs	.+36     	; 0x84e2 <__fixunssfsi+0x2c>
    84be:	b9 2f       	mov	r27, r25
    84c0:	99 27       	eor	r25, r25
    84c2:	b7 51       	subi	r27, 0x17	; 23
    84c4:	a0 f0       	brcs	.+40     	; 0x84ee <__fixunssfsi+0x38>
    84c6:	d1 f0       	breq	.+52     	; 0x84fc <__fixunssfsi+0x46>
    84c8:	66 0f       	add	r22, r22
    84ca:	77 1f       	adc	r23, r23
    84cc:	88 1f       	adc	r24, r24
    84ce:	99 1f       	adc	r25, r25
    84d0:	1a f0       	brmi	.+6      	; 0x84d8 <__fixunssfsi+0x22>
    84d2:	ba 95       	dec	r27
    84d4:	c9 f7       	brne	.-14     	; 0x84c8 <__fixunssfsi+0x12>
    84d6:	12 c0       	rjmp	.+36     	; 0x84fc <__fixunssfsi+0x46>
    84d8:	b1 30       	cpi	r27, 0x01	; 1
    84da:	81 f0       	breq	.+32     	; 0x84fc <__fixunssfsi+0x46>
    84dc:	9f d0       	rcall	.+318    	; 0x861c <__fp_zero>
    84de:	b1 e0       	ldi	r27, 0x01	; 1
    84e0:	08 95       	ret
    84e2:	9c c0       	rjmp	.+312    	; 0x861c <__fp_zero>
    84e4:	67 2f       	mov	r22, r23
    84e6:	78 2f       	mov	r23, r24
    84e8:	88 27       	eor	r24, r24
    84ea:	b8 5f       	subi	r27, 0xF8	; 248
    84ec:	39 f0       	breq	.+14     	; 0x84fc <__fixunssfsi+0x46>
    84ee:	b9 3f       	cpi	r27, 0xF9	; 249
    84f0:	cc f3       	brlt	.-14     	; 0x84e4 <__fixunssfsi+0x2e>
    84f2:	86 95       	lsr	r24
    84f4:	77 95       	ror	r23
    84f6:	67 95       	ror	r22
    84f8:	b3 95       	inc	r27
    84fa:	d9 f7       	brne	.-10     	; 0x84f2 <__fixunssfsi+0x3c>
    84fc:	3e f4       	brtc	.+14     	; 0x850c <__fixunssfsi+0x56>
    84fe:	90 95       	com	r25
    8500:	80 95       	com	r24
    8502:	70 95       	com	r23
    8504:	61 95       	neg	r22
    8506:	7f 4f       	sbci	r23, 0xFF	; 255
    8508:	8f 4f       	sbci	r24, 0xFF	; 255
    850a:	9f 4f       	sbci	r25, 0xFF	; 255
    850c:	08 95       	ret

0000850e <__floatunsisf>:
    850e:	e8 94       	clt
    8510:	09 c0       	rjmp	.+18     	; 0x8524 <__floatsisf+0x12>

00008512 <__floatsisf>:
    8512:	97 fb       	bst	r25, 7
    8514:	3e f4       	brtc	.+14     	; 0x8524 <__floatsisf+0x12>
    8516:	90 95       	com	r25
    8518:	80 95       	com	r24
    851a:	70 95       	com	r23
    851c:	61 95       	neg	r22
    851e:	7f 4f       	sbci	r23, 0xFF	; 255
    8520:	8f 4f       	sbci	r24, 0xFF	; 255
    8522:	9f 4f       	sbci	r25, 0xFF	; 255
    8524:	99 23       	and	r25, r25
    8526:	a9 f0       	breq	.+42     	; 0x8552 <__floatsisf+0x40>
    8528:	f9 2f       	mov	r31, r25
    852a:	96 e9       	ldi	r25, 0x96	; 150
    852c:	bb 27       	eor	r27, r27
    852e:	93 95       	inc	r25
    8530:	f6 95       	lsr	r31
    8532:	87 95       	ror	r24
    8534:	77 95       	ror	r23
    8536:	67 95       	ror	r22
    8538:	b7 95       	ror	r27
    853a:	f1 11       	cpse	r31, r1
    853c:	f8 cf       	rjmp	.-16     	; 0x852e <__floatsisf+0x1c>
    853e:	fa f4       	brpl	.+62     	; 0x857e <__floatsisf+0x6c>
    8540:	bb 0f       	add	r27, r27
    8542:	11 f4       	brne	.+4      	; 0x8548 <__floatsisf+0x36>
    8544:	60 ff       	sbrs	r22, 0
    8546:	1b c0       	rjmp	.+54     	; 0x857e <__floatsisf+0x6c>
    8548:	6f 5f       	subi	r22, 0xFF	; 255
    854a:	7f 4f       	sbci	r23, 0xFF	; 255
    854c:	8f 4f       	sbci	r24, 0xFF	; 255
    854e:	9f 4f       	sbci	r25, 0xFF	; 255
    8550:	16 c0       	rjmp	.+44     	; 0x857e <__floatsisf+0x6c>
    8552:	88 23       	and	r24, r24
    8554:	11 f0       	breq	.+4      	; 0x855a <__floatsisf+0x48>
    8556:	96 e9       	ldi	r25, 0x96	; 150
    8558:	11 c0       	rjmp	.+34     	; 0x857c <__floatsisf+0x6a>
    855a:	77 23       	and	r23, r23
    855c:	21 f0       	breq	.+8      	; 0x8566 <__floatsisf+0x54>
    855e:	9e e8       	ldi	r25, 0x8E	; 142
    8560:	87 2f       	mov	r24, r23
    8562:	76 2f       	mov	r23, r22
    8564:	05 c0       	rjmp	.+10     	; 0x8570 <__floatsisf+0x5e>
    8566:	66 23       	and	r22, r22
    8568:	71 f0       	breq	.+28     	; 0x8586 <__floatsisf+0x74>
    856a:	96 e8       	ldi	r25, 0x86	; 134
    856c:	86 2f       	mov	r24, r22
    856e:	70 e0       	ldi	r23, 0x00	; 0
    8570:	60 e0       	ldi	r22, 0x00	; 0
    8572:	2a f0       	brmi	.+10     	; 0x857e <__floatsisf+0x6c>
    8574:	9a 95       	dec	r25
    8576:	66 0f       	add	r22, r22
    8578:	77 1f       	adc	r23, r23
    857a:	88 1f       	adc	r24, r24
    857c:	da f7       	brpl	.-10     	; 0x8574 <__floatsisf+0x62>
    857e:	88 0f       	add	r24, r24
    8580:	96 95       	lsr	r25
    8582:	87 95       	ror	r24
    8584:	97 f9       	bld	r25, 7
    8586:	08 95       	ret

00008588 <__fp_inf>:
    8588:	97 f9       	bld	r25, 7
    858a:	9f 67       	ori	r25, 0x7F	; 127
    858c:	80 e8       	ldi	r24, 0x80	; 128
    858e:	70 e0       	ldi	r23, 0x00	; 0
    8590:	60 e0       	ldi	r22, 0x00	; 0
    8592:	08 95       	ret

00008594 <__fp_nan>:
    8594:	9f ef       	ldi	r25, 0xFF	; 255
    8596:	80 ec       	ldi	r24, 0xC0	; 192
    8598:	08 95       	ret

0000859a <__fp_pscA>:
    859a:	00 24       	eor	r0, r0
    859c:	0a 94       	dec	r0
    859e:	16 16       	cp	r1, r22
    85a0:	17 06       	cpc	r1, r23
    85a2:	18 06       	cpc	r1, r24
    85a4:	09 06       	cpc	r0, r25
    85a6:	08 95       	ret

000085a8 <__fp_pscB>:
    85a8:	00 24       	eor	r0, r0
    85aa:	0a 94       	dec	r0
    85ac:	12 16       	cp	r1, r18
    85ae:	13 06       	cpc	r1, r19
    85b0:	14 06       	cpc	r1, r20
    85b2:	05 06       	cpc	r0, r21
    85b4:	08 95       	ret

000085b6 <__fp_round>:
    85b6:	09 2e       	mov	r0, r25
    85b8:	03 94       	inc	r0
    85ba:	00 0c       	add	r0, r0
    85bc:	11 f4       	brne	.+4      	; 0x85c2 <__fp_round+0xc>
    85be:	88 23       	and	r24, r24
    85c0:	52 f0       	brmi	.+20     	; 0x85d6 <__fp_round+0x20>
    85c2:	bb 0f       	add	r27, r27
    85c4:	40 f4       	brcc	.+16     	; 0x85d6 <__fp_round+0x20>
    85c6:	bf 2b       	or	r27, r31
    85c8:	11 f4       	brne	.+4      	; 0x85ce <__fp_round+0x18>
    85ca:	60 ff       	sbrs	r22, 0
    85cc:	04 c0       	rjmp	.+8      	; 0x85d6 <__fp_round+0x20>
    85ce:	6f 5f       	subi	r22, 0xFF	; 255
    85d0:	7f 4f       	sbci	r23, 0xFF	; 255
    85d2:	8f 4f       	sbci	r24, 0xFF	; 255
    85d4:	9f 4f       	sbci	r25, 0xFF	; 255
    85d6:	08 95       	ret

000085d8 <__fp_split3>:
    85d8:	57 fd       	sbrc	r21, 7
    85da:	90 58       	subi	r25, 0x80	; 128
    85dc:	44 0f       	add	r20, r20
    85de:	55 1f       	adc	r21, r21
    85e0:	59 f0       	breq	.+22     	; 0x85f8 <__fp_splitA+0x10>
    85e2:	5f 3f       	cpi	r21, 0xFF	; 255
    85e4:	71 f0       	breq	.+28     	; 0x8602 <__fp_splitA+0x1a>
    85e6:	47 95       	ror	r20

000085e8 <__fp_splitA>:
    85e8:	88 0f       	add	r24, r24
    85ea:	97 fb       	bst	r25, 7
    85ec:	99 1f       	adc	r25, r25
    85ee:	61 f0       	breq	.+24     	; 0x8608 <__fp_splitA+0x20>
    85f0:	9f 3f       	cpi	r25, 0xFF	; 255
    85f2:	79 f0       	breq	.+30     	; 0x8612 <__fp_splitA+0x2a>
    85f4:	87 95       	ror	r24
    85f6:	08 95       	ret
    85f8:	12 16       	cp	r1, r18
    85fa:	13 06       	cpc	r1, r19
    85fc:	14 06       	cpc	r1, r20
    85fe:	55 1f       	adc	r21, r21
    8600:	f2 cf       	rjmp	.-28     	; 0x85e6 <__fp_split3+0xe>
    8602:	46 95       	lsr	r20
    8604:	f1 df       	rcall	.-30     	; 0x85e8 <__fp_splitA>
    8606:	08 c0       	rjmp	.+16     	; 0x8618 <__fp_splitA+0x30>
    8608:	16 16       	cp	r1, r22
    860a:	17 06       	cpc	r1, r23
    860c:	18 06       	cpc	r1, r24
    860e:	99 1f       	adc	r25, r25
    8610:	f1 cf       	rjmp	.-30     	; 0x85f4 <__fp_splitA+0xc>
    8612:	86 95       	lsr	r24
    8614:	71 05       	cpc	r23, r1
    8616:	61 05       	cpc	r22, r1
    8618:	08 94       	sec
    861a:	08 95       	ret

0000861c <__fp_zero>:
    861c:	e8 94       	clt

0000861e <__fp_szero>:
    861e:	bb 27       	eor	r27, r27
    8620:	66 27       	eor	r22, r22
    8622:	77 27       	eor	r23, r23
    8624:	cb 01       	movw	r24, r22
    8626:	97 f9       	bld	r25, 7
    8628:	08 95       	ret

0000862a <__mulsf3>:
    862a:	0b d0       	rcall	.+22     	; 0x8642 <__mulsf3x>
    862c:	c4 cf       	rjmp	.-120    	; 0x85b6 <__fp_round>
    862e:	b5 df       	rcall	.-150    	; 0x859a <__fp_pscA>
    8630:	28 f0       	brcs	.+10     	; 0x863c <__mulsf3+0x12>
    8632:	ba df       	rcall	.-140    	; 0x85a8 <__fp_pscB>
    8634:	18 f0       	brcs	.+6      	; 0x863c <__mulsf3+0x12>
    8636:	95 23       	and	r25, r21
    8638:	09 f0       	breq	.+2      	; 0x863c <__mulsf3+0x12>
    863a:	a6 cf       	rjmp	.-180    	; 0x8588 <__fp_inf>
    863c:	ab cf       	rjmp	.-170    	; 0x8594 <__fp_nan>
    863e:	11 24       	eor	r1, r1
    8640:	ee cf       	rjmp	.-36     	; 0x861e <__fp_szero>

00008642 <__mulsf3x>:
    8642:	ca df       	rcall	.-108    	; 0x85d8 <__fp_split3>
    8644:	a0 f3       	brcs	.-24     	; 0x862e <__mulsf3+0x4>

00008646 <__mulsf3_pse>:
    8646:	95 9f       	mul	r25, r21
    8648:	d1 f3       	breq	.-12     	; 0x863e <__mulsf3+0x14>
    864a:	95 0f       	add	r25, r21
    864c:	50 e0       	ldi	r21, 0x00	; 0
    864e:	55 1f       	adc	r21, r21
    8650:	62 9f       	mul	r22, r18
    8652:	f0 01       	movw	r30, r0
    8654:	72 9f       	mul	r23, r18
    8656:	bb 27       	eor	r27, r27
    8658:	f0 0d       	add	r31, r0
    865a:	b1 1d       	adc	r27, r1
    865c:	63 9f       	mul	r22, r19
    865e:	aa 27       	eor	r26, r26
    8660:	f0 0d       	add	r31, r0
    8662:	b1 1d       	adc	r27, r1
    8664:	aa 1f       	adc	r26, r26
    8666:	64 9f       	mul	r22, r20
    8668:	66 27       	eor	r22, r22
    866a:	b0 0d       	add	r27, r0
    866c:	a1 1d       	adc	r26, r1
    866e:	66 1f       	adc	r22, r22
    8670:	82 9f       	mul	r24, r18
    8672:	22 27       	eor	r18, r18
    8674:	b0 0d       	add	r27, r0
    8676:	a1 1d       	adc	r26, r1
    8678:	62 1f       	adc	r22, r18
    867a:	73 9f       	mul	r23, r19
    867c:	b0 0d       	add	r27, r0
    867e:	a1 1d       	adc	r26, r1
    8680:	62 1f       	adc	r22, r18
    8682:	83 9f       	mul	r24, r19
    8684:	a0 0d       	add	r26, r0
    8686:	61 1d       	adc	r22, r1
    8688:	22 1f       	adc	r18, r18
    868a:	74 9f       	mul	r23, r20
    868c:	33 27       	eor	r19, r19
    868e:	a0 0d       	add	r26, r0
    8690:	61 1d       	adc	r22, r1
    8692:	23 1f       	adc	r18, r19
    8694:	84 9f       	mul	r24, r20
    8696:	60 0d       	add	r22, r0
    8698:	21 1d       	adc	r18, r1
    869a:	82 2f       	mov	r24, r18
    869c:	76 2f       	mov	r23, r22
    869e:	6a 2f       	mov	r22, r26
    86a0:	11 24       	eor	r1, r1
    86a2:	9f 57       	subi	r25, 0x7F	; 127
    86a4:	50 40       	sbci	r21, 0x00	; 0
    86a6:	8a f0       	brmi	.+34     	; 0x86ca <__mulsf3_pse+0x84>
    86a8:	e1 f0       	breq	.+56     	; 0x86e2 <__mulsf3_pse+0x9c>
    86aa:	88 23       	and	r24, r24
    86ac:	4a f0       	brmi	.+18     	; 0x86c0 <__mulsf3_pse+0x7a>
    86ae:	ee 0f       	add	r30, r30
    86b0:	ff 1f       	adc	r31, r31
    86b2:	bb 1f       	adc	r27, r27
    86b4:	66 1f       	adc	r22, r22
    86b6:	77 1f       	adc	r23, r23
    86b8:	88 1f       	adc	r24, r24
    86ba:	91 50       	subi	r25, 0x01	; 1
    86bc:	50 40       	sbci	r21, 0x00	; 0
    86be:	a9 f7       	brne	.-22     	; 0x86aa <__mulsf3_pse+0x64>
    86c0:	9e 3f       	cpi	r25, 0xFE	; 254
    86c2:	51 05       	cpc	r21, r1
    86c4:	70 f0       	brcs	.+28     	; 0x86e2 <__mulsf3_pse+0x9c>
    86c6:	60 cf       	rjmp	.-320    	; 0x8588 <__fp_inf>
    86c8:	aa cf       	rjmp	.-172    	; 0x861e <__fp_szero>
    86ca:	5f 3f       	cpi	r21, 0xFF	; 255
    86cc:	ec f3       	brlt	.-6      	; 0x86c8 <__mulsf3_pse+0x82>
    86ce:	98 3e       	cpi	r25, 0xE8	; 232
    86d0:	dc f3       	brlt	.-10     	; 0x86c8 <__mulsf3_pse+0x82>
    86d2:	86 95       	lsr	r24
    86d4:	77 95       	ror	r23
    86d6:	67 95       	ror	r22
    86d8:	b7 95       	ror	r27
    86da:	f7 95       	ror	r31
    86dc:	e7 95       	ror	r30
    86de:	9f 5f       	subi	r25, 0xFF	; 255
    86e0:	c1 f7       	brne	.-16     	; 0x86d2 <__mulsf3_pse+0x8c>
    86e2:	fe 2b       	or	r31, r30
    86e4:	88 0f       	add	r24, r24
    86e6:	91 1d       	adc	r25, r1
    86e8:	96 95       	lsr	r25
    86ea:	87 95       	ror	r24
    86ec:	97 f9       	bld	r25, 7
    86ee:	08 95       	ret

000086f0 <__mulsi3>:
    86f0:	62 9f       	mul	r22, r18
    86f2:	d0 01       	movw	r26, r0
    86f4:	73 9f       	mul	r23, r19
    86f6:	f0 01       	movw	r30, r0
    86f8:	82 9f       	mul	r24, r18
    86fa:	e0 0d       	add	r30, r0
    86fc:	f1 1d       	adc	r31, r1
    86fe:	64 9f       	mul	r22, r20
    8700:	e0 0d       	add	r30, r0
    8702:	f1 1d       	adc	r31, r1
    8704:	92 9f       	mul	r25, r18
    8706:	f0 0d       	add	r31, r0
    8708:	83 9f       	mul	r24, r19
    870a:	f0 0d       	add	r31, r0
    870c:	74 9f       	mul	r23, r20
    870e:	f0 0d       	add	r31, r0
    8710:	65 9f       	mul	r22, r21
    8712:	f0 0d       	add	r31, r0
    8714:	99 27       	eor	r25, r25
    8716:	72 9f       	mul	r23, r18
    8718:	b0 0d       	add	r27, r0
    871a:	e1 1d       	adc	r30, r1
    871c:	f9 1f       	adc	r31, r25
    871e:	63 9f       	mul	r22, r19
    8720:	b0 0d       	add	r27, r0
    8722:	e1 1d       	adc	r30, r1
    8724:	f9 1f       	adc	r31, r25
    8726:	bd 01       	movw	r22, r26
    8728:	cf 01       	movw	r24, r30
    872a:	11 24       	eor	r1, r1
    872c:	08 95       	ret

0000872e <__udivmodsi4>:
    872e:	a1 e2       	ldi	r26, 0x21	; 33
    8730:	1a 2e       	mov	r1, r26
    8732:	aa 1b       	sub	r26, r26
    8734:	bb 1b       	sub	r27, r27
    8736:	fd 01       	movw	r30, r26
    8738:	0d c0       	rjmp	.+26     	; 0x8754 <__udivmodsi4_ep>

0000873a <__udivmodsi4_loop>:
    873a:	aa 1f       	adc	r26, r26
    873c:	bb 1f       	adc	r27, r27
    873e:	ee 1f       	adc	r30, r30
    8740:	ff 1f       	adc	r31, r31
    8742:	a2 17       	cp	r26, r18
    8744:	b3 07       	cpc	r27, r19
    8746:	e4 07       	cpc	r30, r20
    8748:	f5 07       	cpc	r31, r21
    874a:	20 f0       	brcs	.+8      	; 0x8754 <__udivmodsi4_ep>
    874c:	a2 1b       	sub	r26, r18
    874e:	b3 0b       	sbc	r27, r19
    8750:	e4 0b       	sbc	r30, r20
    8752:	f5 0b       	sbc	r31, r21

00008754 <__udivmodsi4_ep>:
    8754:	66 1f       	adc	r22, r22
    8756:	77 1f       	adc	r23, r23
    8758:	88 1f       	adc	r24, r24
    875a:	99 1f       	adc	r25, r25
    875c:	1a 94       	dec	r1
    875e:	69 f7       	brne	.-38     	; 0x873a <__udivmodsi4_loop>
    8760:	60 95       	com	r22
    8762:	70 95       	com	r23
    8764:	80 95       	com	r24
    8766:	90 95       	com	r25
    8768:	9b 01       	movw	r18, r22
    876a:	ac 01       	movw	r20, r24
    876c:	bd 01       	movw	r22, r26
    876e:	cf 01       	movw	r24, r30
    8770:	08 95       	ret

00008772 <dtostrf>:
    8772:	ef 92       	push	r14
    8774:	ff 92       	push	r15
    8776:	0f 93       	push	r16
    8778:	1f 93       	push	r17
    877a:	f2 2f       	mov	r31, r18
    877c:	f0 2e       	mov	r15, r16
    877e:	47 fd       	sbrc	r20, 7
    8780:	02 c0       	rjmp	.+4      	; 0x8786 <dtostrf+0x14>
    8782:	e4 e0       	ldi	r30, 0x04	; 4
    8784:	01 c0       	rjmp	.+2      	; 0x8788 <dtostrf+0x16>
    8786:	e4 e1       	ldi	r30, 0x14	; 20
    8788:	24 2f       	mov	r18, r20
    878a:	33 27       	eor	r19, r19
    878c:	27 fd       	sbrc	r18, 7
    878e:	30 95       	com	r19
    8790:	37 ff       	sbrs	r19, 7
    8792:	03 c0       	rjmp	.+6      	; 0x879a <dtostrf+0x28>
    8794:	30 95       	com	r19
    8796:	21 95       	neg	r18
    8798:	3f 4f       	sbci	r19, 0xFF	; 255
    879a:	4f 2d       	mov	r20, r15
    879c:	51 2f       	mov	r21, r17
    879e:	0f 2f       	mov	r16, r31
    87a0:	ee 2e       	mov	r14, r30
    87a2:	59 d3       	rcall	.+1714   	; 0x8e56 <dtoa_prf>
    87a4:	8f 2d       	mov	r24, r15
    87a6:	91 2f       	mov	r25, r17
    87a8:	1f 91       	pop	r17
    87aa:	0f 91       	pop	r16
    87ac:	ff 90       	pop	r15
    87ae:	ef 90       	pop	r14
    87b0:	08 95       	ret

000087b2 <malloc>:
    87b2:	cf 93       	push	r28
    87b4:	df 93       	push	r29
    87b6:	bc 01       	movw	r22, r24
    87b8:	82 30       	cpi	r24, 0x02	; 2
    87ba:	91 05       	cpc	r25, r1
    87bc:	10 f4       	brcc	.+4      	; 0x87c2 <malloc+0x10>
    87be:	62 e0       	ldi	r22, 0x02	; 2
    87c0:	70 e0       	ldi	r23, 0x00	; 0
    87c2:	a0 91 57 04 	lds	r26, 0x0457
    87c6:	b0 91 58 04 	lds	r27, 0x0458
    87ca:	ed 01       	movw	r28, r26
    87cc:	e0 e0       	ldi	r30, 0x00	; 0
    87ce:	f0 e0       	ldi	r31, 0x00	; 0
    87d0:	40 e0       	ldi	r20, 0x00	; 0
    87d2:	50 e0       	ldi	r21, 0x00	; 0
    87d4:	21 c0       	rjmp	.+66     	; 0x8818 <malloc+0x66>
    87d6:	88 81       	ld	r24, Y
    87d8:	99 81       	ldd	r25, Y+1	; 0x01
    87da:	86 17       	cp	r24, r22
    87dc:	97 07       	cpc	r25, r23
    87de:	69 f4       	brne	.+26     	; 0x87fa <malloc+0x48>
    87e0:	8a 81       	ldd	r24, Y+2	; 0x02
    87e2:	9b 81       	ldd	r25, Y+3	; 0x03
    87e4:	30 97       	sbiw	r30, 0x00	; 0
    87e6:	19 f0       	breq	.+6      	; 0x87ee <malloc+0x3c>
    87e8:	93 83       	std	Z+3, r25	; 0x03
    87ea:	82 83       	std	Z+2, r24	; 0x02
    87ec:	04 c0       	rjmp	.+8      	; 0x87f6 <malloc+0x44>
    87ee:	90 93 58 04 	sts	0x0458, r25
    87f2:	80 93 57 04 	sts	0x0457, r24
    87f6:	fe 01       	movw	r30, r28
    87f8:	34 c0       	rjmp	.+104    	; 0x8862 <malloc+0xb0>
    87fa:	68 17       	cp	r22, r24
    87fc:	79 07       	cpc	r23, r25
    87fe:	38 f4       	brcc	.+14     	; 0x880e <malloc+0x5c>
    8800:	41 15       	cp	r20, r1
    8802:	51 05       	cpc	r21, r1
    8804:	19 f0       	breq	.+6      	; 0x880c <malloc+0x5a>
    8806:	84 17       	cp	r24, r20
    8808:	95 07       	cpc	r25, r21
    880a:	08 f4       	brcc	.+2      	; 0x880e <malloc+0x5c>
    880c:	ac 01       	movw	r20, r24
    880e:	fe 01       	movw	r30, r28
    8810:	8a 81       	ldd	r24, Y+2	; 0x02
    8812:	9b 81       	ldd	r25, Y+3	; 0x03
    8814:	9c 01       	movw	r18, r24
    8816:	e9 01       	movw	r28, r18
    8818:	20 97       	sbiw	r28, 0x00	; 0
    881a:	e9 f6       	brne	.-70     	; 0x87d6 <malloc+0x24>
    881c:	41 15       	cp	r20, r1
    881e:	51 05       	cpc	r21, r1
    8820:	a9 f1       	breq	.+106    	; 0x888c <malloc+0xda>
    8822:	ca 01       	movw	r24, r20
    8824:	86 1b       	sub	r24, r22
    8826:	97 0b       	sbc	r25, r23
    8828:	04 97       	sbiw	r24, 0x04	; 4
    882a:	08 f4       	brcc	.+2      	; 0x882e <malloc+0x7c>
    882c:	ba 01       	movw	r22, r20
    882e:	e0 e0       	ldi	r30, 0x00	; 0
    8830:	f0 e0       	ldi	r31, 0x00	; 0
    8832:	2a c0       	rjmp	.+84     	; 0x8888 <malloc+0xd6>
    8834:	8d 91       	ld	r24, X+
    8836:	9c 91       	ld	r25, X
    8838:	11 97       	sbiw	r26, 0x01	; 1
    883a:	84 17       	cp	r24, r20
    883c:	95 07       	cpc	r25, r21
    883e:	f9 f4       	brne	.+62     	; 0x887e <malloc+0xcc>
    8840:	64 17       	cp	r22, r20
    8842:	75 07       	cpc	r23, r21
    8844:	81 f4       	brne	.+32     	; 0x8866 <malloc+0xb4>
    8846:	12 96       	adiw	r26, 0x02	; 2
    8848:	8d 91       	ld	r24, X+
    884a:	9c 91       	ld	r25, X
    884c:	13 97       	sbiw	r26, 0x03	; 3
    884e:	30 97       	sbiw	r30, 0x00	; 0
    8850:	19 f0       	breq	.+6      	; 0x8858 <malloc+0xa6>
    8852:	93 83       	std	Z+3, r25	; 0x03
    8854:	82 83       	std	Z+2, r24	; 0x02
    8856:	04 c0       	rjmp	.+8      	; 0x8860 <malloc+0xae>
    8858:	90 93 58 04 	sts	0x0458, r25
    885c:	80 93 57 04 	sts	0x0457, r24
    8860:	fd 01       	movw	r30, r26
    8862:	32 96       	adiw	r30, 0x02	; 2
    8864:	4f c0       	rjmp	.+158    	; 0x8904 <malloc+0x152>
    8866:	ca 01       	movw	r24, r20
    8868:	86 1b       	sub	r24, r22
    886a:	97 0b       	sbc	r25, r23
    886c:	fd 01       	movw	r30, r26
    886e:	e8 0f       	add	r30, r24
    8870:	f9 1f       	adc	r31, r25
    8872:	61 93       	st	Z+, r22
    8874:	71 93       	st	Z+, r23
    8876:	02 97       	sbiw	r24, 0x02	; 2
    8878:	8d 93       	st	X+, r24
    887a:	9c 93       	st	X, r25
    887c:	43 c0       	rjmp	.+134    	; 0x8904 <malloc+0x152>
    887e:	fd 01       	movw	r30, r26
    8880:	82 81       	ldd	r24, Z+2	; 0x02
    8882:	93 81       	ldd	r25, Z+3	; 0x03
    8884:	9c 01       	movw	r18, r24
    8886:	d9 01       	movw	r26, r18
    8888:	10 97       	sbiw	r26, 0x00	; 0
    888a:	a1 f6       	brne	.-88     	; 0x8834 <malloc+0x82>
    888c:	80 91 55 04 	lds	r24, 0x0455
    8890:	90 91 56 04 	lds	r25, 0x0456
    8894:	89 2b       	or	r24, r25
    8896:	41 f4       	brne	.+16     	; 0x88a8 <malloc+0xf6>
    8898:	80 91 46 01 	lds	r24, 0x0146
    889c:	90 91 47 01 	lds	r25, 0x0147
    88a0:	90 93 56 04 	sts	0x0456, r25
    88a4:	80 93 55 04 	sts	0x0455, r24
    88a8:	40 91 48 01 	lds	r20, 0x0148
    88ac:	50 91 49 01 	lds	r21, 0x0149
    88b0:	41 15       	cp	r20, r1
    88b2:	51 05       	cpc	r21, r1
    88b4:	41 f4       	brne	.+16     	; 0x88c6 <malloc+0x114>
    88b6:	4d b7       	in	r20, 0x3d	; 61
    88b8:	5e b7       	in	r21, 0x3e	; 62
    88ba:	80 91 44 01 	lds	r24, 0x0144
    88be:	90 91 45 01 	lds	r25, 0x0145
    88c2:	48 1b       	sub	r20, r24
    88c4:	59 0b       	sbc	r21, r25
    88c6:	20 91 55 04 	lds	r18, 0x0455
    88ca:	30 91 56 04 	lds	r19, 0x0456
    88ce:	24 17       	cp	r18, r20
    88d0:	35 07       	cpc	r19, r21
    88d2:	b0 f4       	brcc	.+44     	; 0x8900 <malloc+0x14e>
    88d4:	ca 01       	movw	r24, r20
    88d6:	82 1b       	sub	r24, r18
    88d8:	93 0b       	sbc	r25, r19
    88da:	86 17       	cp	r24, r22
    88dc:	97 07       	cpc	r25, r23
    88de:	80 f0       	brcs	.+32     	; 0x8900 <malloc+0x14e>
    88e0:	ab 01       	movw	r20, r22
    88e2:	4e 5f       	subi	r20, 0xFE	; 254
    88e4:	5f 4f       	sbci	r21, 0xFF	; 255
    88e6:	84 17       	cp	r24, r20
    88e8:	95 07       	cpc	r25, r21
    88ea:	50 f0       	brcs	.+20     	; 0x8900 <malloc+0x14e>
    88ec:	42 0f       	add	r20, r18
    88ee:	53 1f       	adc	r21, r19
    88f0:	50 93 56 04 	sts	0x0456, r21
    88f4:	40 93 55 04 	sts	0x0455, r20
    88f8:	f9 01       	movw	r30, r18
    88fa:	61 93       	st	Z+, r22
    88fc:	71 93       	st	Z+, r23
    88fe:	02 c0       	rjmp	.+4      	; 0x8904 <malloc+0x152>
    8900:	e0 e0       	ldi	r30, 0x00	; 0
    8902:	f0 e0       	ldi	r31, 0x00	; 0
    8904:	cf 01       	movw	r24, r30
    8906:	df 91       	pop	r29
    8908:	cf 91       	pop	r28
    890a:	08 95       	ret

0000890c <free>:
    890c:	cf 93       	push	r28
    890e:	df 93       	push	r29
    8910:	00 97       	sbiw	r24, 0x00	; 0
    8912:	09 f4       	brne	.+2      	; 0x8916 <free+0xa>
    8914:	50 c0       	rjmp	.+160    	; 0x89b6 <free+0xaa>
    8916:	ec 01       	movw	r28, r24
    8918:	22 97       	sbiw	r28, 0x02	; 2
    891a:	1b 82       	std	Y+3, r1	; 0x03
    891c:	1a 82       	std	Y+2, r1	; 0x02
    891e:	a0 91 57 04 	lds	r26, 0x0457
    8922:	b0 91 58 04 	lds	r27, 0x0458
    8926:	10 97       	sbiw	r26, 0x00	; 0
    8928:	09 f1       	breq	.+66     	; 0x896c <free+0x60>
    892a:	40 e0       	ldi	r20, 0x00	; 0
    892c:	50 e0       	ldi	r21, 0x00	; 0
    892e:	ac 17       	cp	r26, r28
    8930:	bd 07       	cpc	r27, r29
    8932:	08 f1       	brcs	.+66     	; 0x8976 <free+0x6a>
    8934:	bb 83       	std	Y+3, r27	; 0x03
    8936:	aa 83       	std	Y+2, r26	; 0x02
    8938:	fe 01       	movw	r30, r28
    893a:	21 91       	ld	r18, Z+
    893c:	31 91       	ld	r19, Z+
    893e:	e2 0f       	add	r30, r18
    8940:	f3 1f       	adc	r31, r19
    8942:	ae 17       	cp	r26, r30
    8944:	bf 07       	cpc	r27, r31
    8946:	79 f4       	brne	.+30     	; 0x8966 <free+0x5a>
    8948:	8d 91       	ld	r24, X+
    894a:	9c 91       	ld	r25, X
    894c:	11 97       	sbiw	r26, 0x01	; 1
    894e:	28 0f       	add	r18, r24
    8950:	39 1f       	adc	r19, r25
    8952:	2e 5f       	subi	r18, 0xFE	; 254
    8954:	3f 4f       	sbci	r19, 0xFF	; 255
    8956:	39 83       	std	Y+1, r19	; 0x01
    8958:	28 83       	st	Y, r18
    895a:	12 96       	adiw	r26, 0x02	; 2
    895c:	8d 91       	ld	r24, X+
    895e:	9c 91       	ld	r25, X
    8960:	13 97       	sbiw	r26, 0x03	; 3
    8962:	9b 83       	std	Y+3, r25	; 0x03
    8964:	8a 83       	std	Y+2, r24	; 0x02
    8966:	41 15       	cp	r20, r1
    8968:	51 05       	cpc	r21, r1
    896a:	71 f4       	brne	.+28     	; 0x8988 <free+0x7c>
    896c:	d0 93 58 04 	sts	0x0458, r29
    8970:	c0 93 57 04 	sts	0x0457, r28
    8974:	20 c0       	rjmp	.+64     	; 0x89b6 <free+0xaa>
    8976:	12 96       	adiw	r26, 0x02	; 2
    8978:	8d 91       	ld	r24, X+
    897a:	9c 91       	ld	r25, X
    897c:	13 97       	sbiw	r26, 0x03	; 3
    897e:	ad 01       	movw	r20, r26
    8980:	00 97       	sbiw	r24, 0x00	; 0
    8982:	11 f0       	breq	.+4      	; 0x8988 <free+0x7c>
    8984:	dc 01       	movw	r26, r24
    8986:	d3 cf       	rjmp	.-90     	; 0x892e <free+0x22>
    8988:	fa 01       	movw	r30, r20
    898a:	d3 83       	std	Z+3, r29	; 0x03
    898c:	c2 83       	std	Z+2, r28	; 0x02
    898e:	21 91       	ld	r18, Z+
    8990:	31 91       	ld	r19, Z+
    8992:	e2 0f       	add	r30, r18
    8994:	f3 1f       	adc	r31, r19
    8996:	ce 17       	cp	r28, r30
    8998:	df 07       	cpc	r29, r31
    899a:	69 f4       	brne	.+26     	; 0x89b6 <free+0xaa>
    899c:	88 81       	ld	r24, Y
    899e:	99 81       	ldd	r25, Y+1	; 0x01
    89a0:	28 0f       	add	r18, r24
    89a2:	39 1f       	adc	r19, r25
    89a4:	2e 5f       	subi	r18, 0xFE	; 254
    89a6:	3f 4f       	sbci	r19, 0xFF	; 255
    89a8:	fa 01       	movw	r30, r20
    89aa:	31 83       	std	Z+1, r19	; 0x01
    89ac:	20 83       	st	Z, r18
    89ae:	8a 81       	ldd	r24, Y+2	; 0x02
    89b0:	9b 81       	ldd	r25, Y+3	; 0x03
    89b2:	93 83       	std	Z+3, r25	; 0x03
    89b4:	82 83       	std	Z+2, r24	; 0x02
    89b6:	df 91       	pop	r29
    89b8:	cf 91       	pop	r28
    89ba:	08 95       	ret

000089bc <memcmp>:
    89bc:	fb 01       	movw	r30, r22
    89be:	dc 01       	movw	r26, r24
    89c0:	04 c0       	rjmp	.+8      	; 0x89ca <memcmp+0xe>
    89c2:	8d 91       	ld	r24, X+
    89c4:	01 90       	ld	r0, Z+
    89c6:	80 19       	sub	r24, r0
    89c8:	21 f4       	brne	.+8      	; 0x89d2 <memcmp+0x16>
    89ca:	41 50       	subi	r20, 0x01	; 1
    89cc:	50 40       	sbci	r21, 0x00	; 0
    89ce:	c8 f7       	brcc	.-14     	; 0x89c2 <memcmp+0x6>
    89d0:	88 1b       	sub	r24, r24
    89d2:	99 0b       	sbc	r25, r25
    89d4:	08 95       	ret

000089d6 <memcpy>:
    89d6:	fb 01       	movw	r30, r22
    89d8:	dc 01       	movw	r26, r24
    89da:	02 c0       	rjmp	.+4      	; 0x89e0 <memcpy+0xa>
    89dc:	01 90       	ld	r0, Z+
    89de:	0d 92       	st	X+, r0
    89e0:	41 50       	subi	r20, 0x01	; 1
    89e2:	50 40       	sbci	r21, 0x00	; 0
    89e4:	d8 f7       	brcc	.-10     	; 0x89dc <memcpy+0x6>
    89e6:	08 95       	ret

000089e8 <memset>:
    89e8:	dc 01       	movw	r26, r24
    89ea:	01 c0       	rjmp	.+2      	; 0x89ee <memset+0x6>
    89ec:	6d 93       	st	X+, r22
    89ee:	41 50       	subi	r20, 0x01	; 1
    89f0:	50 40       	sbci	r21, 0x00	; 0
    89f2:	e0 f7       	brcc	.-8      	; 0x89ec <memset+0x4>
    89f4:	08 95       	ret

000089f6 <strcpy>:
    89f6:	fb 01       	movw	r30, r22
    89f8:	dc 01       	movw	r26, r24
    89fa:	01 90       	ld	r0, Z+
    89fc:	0d 92       	st	X+, r0
    89fe:	00 20       	and	r0, r0
    8a00:	e1 f7       	brne	.-8      	; 0x89fa <strcpy+0x4>
    8a02:	08 95       	ret

00008a04 <sprintf>:
    8a04:	0f 93       	push	r16
    8a06:	1f 93       	push	r17
    8a08:	df 93       	push	r29
    8a0a:	cf 93       	push	r28
    8a0c:	cd b7       	in	r28, 0x3d	; 61
    8a0e:	de b7       	in	r29, 0x3e	; 62
    8a10:	2e 97       	sbiw	r28, 0x0e	; 14
    8a12:	0f b6       	in	r0, 0x3f	; 63
    8a14:	f8 94       	cli
    8a16:	de bf       	out	0x3e, r29	; 62
    8a18:	0f be       	out	0x3f, r0	; 63
    8a1a:	cd bf       	out	0x3d, r28	; 61
    8a1c:	0d 89       	ldd	r16, Y+21	; 0x15
    8a1e:	1e 89       	ldd	r17, Y+22	; 0x16
    8a20:	86 e0       	ldi	r24, 0x06	; 6
    8a22:	8c 83       	std	Y+4, r24	; 0x04
    8a24:	1a 83       	std	Y+2, r17	; 0x02
    8a26:	09 83       	std	Y+1, r16	; 0x01
    8a28:	8f ef       	ldi	r24, 0xFF	; 255
    8a2a:	9f e7       	ldi	r25, 0x7F	; 127
    8a2c:	9e 83       	std	Y+6, r25	; 0x06
    8a2e:	8d 83       	std	Y+5, r24	; 0x05
    8a30:	9e 01       	movw	r18, r28
    8a32:	27 5e       	subi	r18, 0xE7	; 231
    8a34:	3f 4f       	sbci	r19, 0xFF	; 255
    8a36:	ce 01       	movw	r24, r28
    8a38:	01 96       	adiw	r24, 0x01	; 1
    8a3a:	6f 89       	ldd	r22, Y+23	; 0x17
    8a3c:	78 8d       	ldd	r23, Y+24	; 0x18
    8a3e:	a9 01       	movw	r20, r18
    8a40:	11 d0       	rcall	.+34     	; 0x8a64 <vfprintf>
    8a42:	2f 81       	ldd	r18, Y+7	; 0x07
    8a44:	38 85       	ldd	r19, Y+8	; 0x08
    8a46:	02 0f       	add	r16, r18
    8a48:	13 1f       	adc	r17, r19
    8a4a:	f8 01       	movw	r30, r16
    8a4c:	10 82       	st	Z, r1
    8a4e:	2e 96       	adiw	r28, 0x0e	; 14
    8a50:	0f b6       	in	r0, 0x3f	; 63
    8a52:	f8 94       	cli
    8a54:	de bf       	out	0x3e, r29	; 62
    8a56:	0f be       	out	0x3f, r0	; 63
    8a58:	cd bf       	out	0x3d, r28	; 61
    8a5a:	cf 91       	pop	r28
    8a5c:	df 91       	pop	r29
    8a5e:	1f 91       	pop	r17
    8a60:	0f 91       	pop	r16
    8a62:	08 95       	ret

00008a64 <vfprintf>:
    8a64:	2f 92       	push	r2
    8a66:	3f 92       	push	r3
    8a68:	4f 92       	push	r4
    8a6a:	5f 92       	push	r5
    8a6c:	6f 92       	push	r6
    8a6e:	7f 92       	push	r7
    8a70:	8f 92       	push	r8
    8a72:	9f 92       	push	r9
    8a74:	af 92       	push	r10
    8a76:	bf 92       	push	r11
    8a78:	cf 92       	push	r12
    8a7a:	df 92       	push	r13
    8a7c:	ef 92       	push	r14
    8a7e:	ff 92       	push	r15
    8a80:	0f 93       	push	r16
    8a82:	1f 93       	push	r17
    8a84:	df 93       	push	r29
    8a86:	cf 93       	push	r28
    8a88:	cd b7       	in	r28, 0x3d	; 61
    8a8a:	de b7       	in	r29, 0x3e	; 62
    8a8c:	2b 97       	sbiw	r28, 0x0b	; 11
    8a8e:	0f b6       	in	r0, 0x3f	; 63
    8a90:	f8 94       	cli
    8a92:	de bf       	out	0x3e, r29	; 62
    8a94:	0f be       	out	0x3f, r0	; 63
    8a96:	cd bf       	out	0x3d, r28	; 61
    8a98:	3c 01       	movw	r6, r24
    8a9a:	2b 01       	movw	r4, r22
    8a9c:	5a 01       	movw	r10, r20
    8a9e:	fc 01       	movw	r30, r24
    8aa0:	17 82       	std	Z+7, r1	; 0x07
    8aa2:	16 82       	std	Z+6, r1	; 0x06
    8aa4:	83 81       	ldd	r24, Z+3	; 0x03
    8aa6:	81 fd       	sbrc	r24, 1
    8aa8:	03 c0       	rjmp	.+6      	; 0x8ab0 <vfprintf+0x4c>
    8aaa:	6f ef       	ldi	r22, 0xFF	; 255
    8aac:	7f ef       	ldi	r23, 0xFF	; 255
    8aae:	b9 c1       	rjmp	.+882    	; 0x8e22 <vfprintf+0x3be>
    8ab0:	9a e0       	ldi	r25, 0x0A	; 10
    8ab2:	89 2e       	mov	r8, r25
    8ab4:	1e 01       	movw	r2, r28
    8ab6:	08 94       	sec
    8ab8:	21 1c       	adc	r2, r1
    8aba:	31 1c       	adc	r3, r1
    8abc:	f3 01       	movw	r30, r6
    8abe:	23 81       	ldd	r18, Z+3	; 0x03
    8ac0:	f2 01       	movw	r30, r4
    8ac2:	23 fd       	sbrc	r18, 3
    8ac4:	85 91       	lpm	r24, Z+
    8ac6:	23 ff       	sbrs	r18, 3
    8ac8:	81 91       	ld	r24, Z+
    8aca:	2f 01       	movw	r4, r30
    8acc:	88 23       	and	r24, r24
    8ace:	09 f4       	brne	.+2      	; 0x8ad2 <vfprintf+0x6e>
    8ad0:	a5 c1       	rjmp	.+842    	; 0x8e1c <vfprintf+0x3b8>
    8ad2:	85 32       	cpi	r24, 0x25	; 37
    8ad4:	39 f4       	brne	.+14     	; 0x8ae4 <vfprintf+0x80>
    8ad6:	23 fd       	sbrc	r18, 3
    8ad8:	85 91       	lpm	r24, Z+
    8ada:	23 ff       	sbrs	r18, 3
    8adc:	81 91       	ld	r24, Z+
    8ade:	2f 01       	movw	r4, r30
    8ae0:	85 32       	cpi	r24, 0x25	; 37
    8ae2:	21 f4       	brne	.+8      	; 0x8aec <vfprintf+0x88>
    8ae4:	90 e0       	ldi	r25, 0x00	; 0
    8ae6:	b3 01       	movw	r22, r6
    8ae8:	25 d4       	rcall	.+2122   	; 0x9334 <fputc>
    8aea:	e8 cf       	rjmp	.-48     	; 0x8abc <vfprintf+0x58>
    8aec:	98 2f       	mov	r25, r24
    8aee:	ff 24       	eor	r15, r15
    8af0:	ee 24       	eor	r14, r14
    8af2:	99 24       	eor	r9, r9
    8af4:	ff e1       	ldi	r31, 0x1F	; 31
    8af6:	ff 15       	cp	r31, r15
    8af8:	d0 f0       	brcs	.+52     	; 0x8b2e <vfprintf+0xca>
    8afa:	9b 32       	cpi	r25, 0x2B	; 43
    8afc:	69 f0       	breq	.+26     	; 0x8b18 <vfprintf+0xb4>
    8afe:	9c 32       	cpi	r25, 0x2C	; 44
    8b00:	28 f4       	brcc	.+10     	; 0x8b0c <vfprintf+0xa8>
    8b02:	90 32       	cpi	r25, 0x20	; 32
    8b04:	59 f0       	breq	.+22     	; 0x8b1c <vfprintf+0xb8>
    8b06:	93 32       	cpi	r25, 0x23	; 35
    8b08:	91 f4       	brne	.+36     	; 0x8b2e <vfprintf+0xca>
    8b0a:	0e c0       	rjmp	.+28     	; 0x8b28 <vfprintf+0xc4>
    8b0c:	9d 32       	cpi	r25, 0x2D	; 45
    8b0e:	49 f0       	breq	.+18     	; 0x8b22 <vfprintf+0xbe>
    8b10:	90 33       	cpi	r25, 0x30	; 48
    8b12:	69 f4       	brne	.+26     	; 0x8b2e <vfprintf+0xca>
    8b14:	41 e0       	ldi	r20, 0x01	; 1
    8b16:	24 c0       	rjmp	.+72     	; 0x8b60 <vfprintf+0xfc>
    8b18:	52 e0       	ldi	r21, 0x02	; 2
    8b1a:	f5 2a       	or	r15, r21
    8b1c:	84 e0       	ldi	r24, 0x04	; 4
    8b1e:	f8 2a       	or	r15, r24
    8b20:	28 c0       	rjmp	.+80     	; 0x8b72 <vfprintf+0x10e>
    8b22:	98 e0       	ldi	r25, 0x08	; 8
    8b24:	f9 2a       	or	r15, r25
    8b26:	25 c0       	rjmp	.+74     	; 0x8b72 <vfprintf+0x10e>
    8b28:	e0 e1       	ldi	r30, 0x10	; 16
    8b2a:	fe 2a       	or	r15, r30
    8b2c:	22 c0       	rjmp	.+68     	; 0x8b72 <vfprintf+0x10e>
    8b2e:	f7 fc       	sbrc	r15, 7
    8b30:	29 c0       	rjmp	.+82     	; 0x8b84 <vfprintf+0x120>
    8b32:	89 2f       	mov	r24, r25
    8b34:	80 53       	subi	r24, 0x30	; 48
    8b36:	8a 30       	cpi	r24, 0x0A	; 10
    8b38:	70 f4       	brcc	.+28     	; 0x8b56 <vfprintf+0xf2>
    8b3a:	f6 fe       	sbrs	r15, 6
    8b3c:	05 c0       	rjmp	.+10     	; 0x8b48 <vfprintf+0xe4>
    8b3e:	98 9c       	mul	r9, r8
    8b40:	90 2c       	mov	r9, r0
    8b42:	11 24       	eor	r1, r1
    8b44:	98 0e       	add	r9, r24
    8b46:	15 c0       	rjmp	.+42     	; 0x8b72 <vfprintf+0x10e>
    8b48:	e8 9c       	mul	r14, r8
    8b4a:	e0 2c       	mov	r14, r0
    8b4c:	11 24       	eor	r1, r1
    8b4e:	e8 0e       	add	r14, r24
    8b50:	f0 e2       	ldi	r31, 0x20	; 32
    8b52:	ff 2a       	or	r15, r31
    8b54:	0e c0       	rjmp	.+28     	; 0x8b72 <vfprintf+0x10e>
    8b56:	9e 32       	cpi	r25, 0x2E	; 46
    8b58:	29 f4       	brne	.+10     	; 0x8b64 <vfprintf+0x100>
    8b5a:	f6 fc       	sbrc	r15, 6
    8b5c:	5f c1       	rjmp	.+702    	; 0x8e1c <vfprintf+0x3b8>
    8b5e:	40 e4       	ldi	r20, 0x40	; 64
    8b60:	f4 2a       	or	r15, r20
    8b62:	07 c0       	rjmp	.+14     	; 0x8b72 <vfprintf+0x10e>
    8b64:	9c 36       	cpi	r25, 0x6C	; 108
    8b66:	19 f4       	brne	.+6      	; 0x8b6e <vfprintf+0x10a>
    8b68:	50 e8       	ldi	r21, 0x80	; 128
    8b6a:	f5 2a       	or	r15, r21
    8b6c:	02 c0       	rjmp	.+4      	; 0x8b72 <vfprintf+0x10e>
    8b6e:	98 36       	cpi	r25, 0x68	; 104
    8b70:	49 f4       	brne	.+18     	; 0x8b84 <vfprintf+0x120>
    8b72:	f2 01       	movw	r30, r4
    8b74:	23 fd       	sbrc	r18, 3
    8b76:	95 91       	lpm	r25, Z+
    8b78:	23 ff       	sbrs	r18, 3
    8b7a:	91 91       	ld	r25, Z+
    8b7c:	2f 01       	movw	r4, r30
    8b7e:	99 23       	and	r25, r25
    8b80:	09 f0       	breq	.+2      	; 0x8b84 <vfprintf+0x120>
    8b82:	b8 cf       	rjmp	.-144    	; 0x8af4 <vfprintf+0x90>
    8b84:	89 2f       	mov	r24, r25
    8b86:	85 54       	subi	r24, 0x45	; 69
    8b88:	83 30       	cpi	r24, 0x03	; 3
    8b8a:	18 f0       	brcs	.+6      	; 0x8b92 <vfprintf+0x12e>
    8b8c:	80 52       	subi	r24, 0x20	; 32
    8b8e:	83 30       	cpi	r24, 0x03	; 3
    8b90:	38 f4       	brcc	.+14     	; 0x8ba0 <vfprintf+0x13c>
    8b92:	44 e0       	ldi	r20, 0x04	; 4
    8b94:	50 e0       	ldi	r21, 0x00	; 0
    8b96:	a4 0e       	add	r10, r20
    8b98:	b5 1e       	adc	r11, r21
    8b9a:	5f e3       	ldi	r21, 0x3F	; 63
    8b9c:	59 83       	std	Y+1, r21	; 0x01
    8b9e:	0f c0       	rjmp	.+30     	; 0x8bbe <vfprintf+0x15a>
    8ba0:	93 36       	cpi	r25, 0x63	; 99
    8ba2:	31 f0       	breq	.+12     	; 0x8bb0 <vfprintf+0x14c>
    8ba4:	93 37       	cpi	r25, 0x73	; 115
    8ba6:	79 f0       	breq	.+30     	; 0x8bc6 <vfprintf+0x162>
    8ba8:	93 35       	cpi	r25, 0x53	; 83
    8baa:	09 f0       	breq	.+2      	; 0x8bae <vfprintf+0x14a>
    8bac:	52 c0       	rjmp	.+164    	; 0x8c52 <vfprintf+0x1ee>
    8bae:	1f c0       	rjmp	.+62     	; 0x8bee <vfprintf+0x18a>
    8bb0:	f5 01       	movw	r30, r10
    8bb2:	80 81       	ld	r24, Z
    8bb4:	89 83       	std	Y+1, r24	; 0x01
    8bb6:	42 e0       	ldi	r20, 0x02	; 2
    8bb8:	50 e0       	ldi	r21, 0x00	; 0
    8bba:	a4 0e       	add	r10, r20
    8bbc:	b5 1e       	adc	r11, r21
    8bbe:	61 01       	movw	r12, r2
    8bc0:	01 e0       	ldi	r16, 0x01	; 1
    8bc2:	10 e0       	ldi	r17, 0x00	; 0
    8bc4:	11 c0       	rjmp	.+34     	; 0x8be8 <vfprintf+0x184>
    8bc6:	f5 01       	movw	r30, r10
    8bc8:	c0 80       	ld	r12, Z
    8bca:	d1 80       	ldd	r13, Z+1	; 0x01
    8bcc:	f6 fc       	sbrc	r15, 6
    8bce:	03 c0       	rjmp	.+6      	; 0x8bd6 <vfprintf+0x172>
    8bd0:	6f ef       	ldi	r22, 0xFF	; 255
    8bd2:	7f ef       	ldi	r23, 0xFF	; 255
    8bd4:	02 c0       	rjmp	.+4      	; 0x8bda <vfprintf+0x176>
    8bd6:	69 2d       	mov	r22, r9
    8bd8:	70 e0       	ldi	r23, 0x00	; 0
    8bda:	42 e0       	ldi	r20, 0x02	; 2
    8bdc:	50 e0       	ldi	r21, 0x00	; 0
    8bde:	a4 0e       	add	r10, r20
    8be0:	b5 1e       	adc	r11, r21
    8be2:	c6 01       	movw	r24, r12
    8be4:	9c d3       	rcall	.+1848   	; 0x931e <strnlen>
    8be6:	8c 01       	movw	r16, r24
    8be8:	5f e7       	ldi	r21, 0x7F	; 127
    8bea:	f5 22       	and	r15, r21
    8bec:	13 c0       	rjmp	.+38     	; 0x8c14 <vfprintf+0x1b0>
    8bee:	f5 01       	movw	r30, r10
    8bf0:	c0 80       	ld	r12, Z
    8bf2:	d1 80       	ldd	r13, Z+1	; 0x01
    8bf4:	f6 fc       	sbrc	r15, 6
    8bf6:	03 c0       	rjmp	.+6      	; 0x8bfe <vfprintf+0x19a>
    8bf8:	6f ef       	ldi	r22, 0xFF	; 255
    8bfa:	7f ef       	ldi	r23, 0xFF	; 255
    8bfc:	02 c0       	rjmp	.+4      	; 0x8c02 <vfprintf+0x19e>
    8bfe:	69 2d       	mov	r22, r9
    8c00:	70 e0       	ldi	r23, 0x00	; 0
    8c02:	42 e0       	ldi	r20, 0x02	; 2
    8c04:	50 e0       	ldi	r21, 0x00	; 0
    8c06:	a4 0e       	add	r10, r20
    8c08:	b5 1e       	adc	r11, r21
    8c0a:	c6 01       	movw	r24, r12
    8c0c:	7d d3       	rcall	.+1786   	; 0x9308 <strnlen_P>
    8c0e:	8c 01       	movw	r16, r24
    8c10:	50 e8       	ldi	r21, 0x80	; 128
    8c12:	f5 2a       	or	r15, r21
    8c14:	f3 fe       	sbrs	r15, 3
    8c16:	06 c0       	rjmp	.+12     	; 0x8c24 <vfprintf+0x1c0>
    8c18:	18 c0       	rjmp	.+48     	; 0x8c4a <vfprintf+0x1e6>
    8c1a:	80 e2       	ldi	r24, 0x20	; 32
    8c1c:	90 e0       	ldi	r25, 0x00	; 0
    8c1e:	b3 01       	movw	r22, r6
    8c20:	89 d3       	rcall	.+1810   	; 0x9334 <fputc>
    8c22:	ea 94       	dec	r14
    8c24:	8e 2d       	mov	r24, r14
    8c26:	90 e0       	ldi	r25, 0x00	; 0
    8c28:	08 17       	cp	r16, r24
    8c2a:	19 07       	cpc	r17, r25
    8c2c:	b0 f3       	brcs	.-20     	; 0x8c1a <vfprintf+0x1b6>
    8c2e:	0d c0       	rjmp	.+26     	; 0x8c4a <vfprintf+0x1e6>
    8c30:	f6 01       	movw	r30, r12
    8c32:	f7 fc       	sbrc	r15, 7
    8c34:	85 91       	lpm	r24, Z+
    8c36:	f7 fe       	sbrs	r15, 7
    8c38:	81 91       	ld	r24, Z+
    8c3a:	6f 01       	movw	r12, r30
    8c3c:	90 e0       	ldi	r25, 0x00	; 0
    8c3e:	b3 01       	movw	r22, r6
    8c40:	79 d3       	rcall	.+1778   	; 0x9334 <fputc>
    8c42:	e1 10       	cpse	r14, r1
    8c44:	ea 94       	dec	r14
    8c46:	01 50       	subi	r16, 0x01	; 1
    8c48:	10 40       	sbci	r17, 0x00	; 0
    8c4a:	01 15       	cp	r16, r1
    8c4c:	11 05       	cpc	r17, r1
    8c4e:	81 f7       	brne	.-32     	; 0x8c30 <vfprintf+0x1cc>
    8c50:	e2 c0       	rjmp	.+452    	; 0x8e16 <vfprintf+0x3b2>
    8c52:	94 36       	cpi	r25, 0x64	; 100
    8c54:	11 f0       	breq	.+4      	; 0x8c5a <vfprintf+0x1f6>
    8c56:	99 36       	cpi	r25, 0x69	; 105
    8c58:	61 f5       	brne	.+88     	; 0x8cb2 <vfprintf+0x24e>
    8c5a:	f7 fe       	sbrs	r15, 7
    8c5c:	08 c0       	rjmp	.+16     	; 0x8c6e <vfprintf+0x20a>
    8c5e:	f5 01       	movw	r30, r10
    8c60:	20 81       	ld	r18, Z
    8c62:	31 81       	ldd	r19, Z+1	; 0x01
    8c64:	42 81       	ldd	r20, Z+2	; 0x02
    8c66:	53 81       	ldd	r21, Z+3	; 0x03
    8c68:	84 e0       	ldi	r24, 0x04	; 4
    8c6a:	90 e0       	ldi	r25, 0x00	; 0
    8c6c:	0a c0       	rjmp	.+20     	; 0x8c82 <vfprintf+0x21e>
    8c6e:	f5 01       	movw	r30, r10
    8c70:	80 81       	ld	r24, Z
    8c72:	91 81       	ldd	r25, Z+1	; 0x01
    8c74:	9c 01       	movw	r18, r24
    8c76:	44 27       	eor	r20, r20
    8c78:	37 fd       	sbrc	r19, 7
    8c7a:	40 95       	com	r20
    8c7c:	54 2f       	mov	r21, r20
    8c7e:	82 e0       	ldi	r24, 0x02	; 2
    8c80:	90 e0       	ldi	r25, 0x00	; 0
    8c82:	a8 0e       	add	r10, r24
    8c84:	b9 1e       	adc	r11, r25
    8c86:	9f e6       	ldi	r25, 0x6F	; 111
    8c88:	f9 22       	and	r15, r25
    8c8a:	57 ff       	sbrs	r21, 7
    8c8c:	09 c0       	rjmp	.+18     	; 0x8ca0 <vfprintf+0x23c>
    8c8e:	50 95       	com	r21
    8c90:	40 95       	com	r20
    8c92:	30 95       	com	r19
    8c94:	21 95       	neg	r18
    8c96:	3f 4f       	sbci	r19, 0xFF	; 255
    8c98:	4f 4f       	sbci	r20, 0xFF	; 255
    8c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    8c9c:	e0 e8       	ldi	r30, 0x80	; 128
    8c9e:	fe 2a       	or	r15, r30
    8ca0:	ca 01       	movw	r24, r20
    8ca2:	b9 01       	movw	r22, r18
    8ca4:	a1 01       	movw	r20, r2
    8ca6:	2a e0       	ldi	r18, 0x0A	; 10
    8ca8:	30 e0       	ldi	r19, 0x00	; 0
    8caa:	70 d3       	rcall	.+1760   	; 0x938c <__ultoa_invert>
    8cac:	d8 2e       	mov	r13, r24
    8cae:	d2 18       	sub	r13, r2
    8cb0:	3f c0       	rjmp	.+126    	; 0x8d30 <vfprintf+0x2cc>
    8cb2:	95 37       	cpi	r25, 0x75	; 117
    8cb4:	29 f4       	brne	.+10     	; 0x8cc0 <vfprintf+0x25c>
    8cb6:	1f 2d       	mov	r17, r15
    8cb8:	1f 7e       	andi	r17, 0xEF	; 239
    8cba:	2a e0       	ldi	r18, 0x0A	; 10
    8cbc:	30 e0       	ldi	r19, 0x00	; 0
    8cbe:	1d c0       	rjmp	.+58     	; 0x8cfa <vfprintf+0x296>
    8cc0:	1f 2d       	mov	r17, r15
    8cc2:	19 7f       	andi	r17, 0xF9	; 249
    8cc4:	9f 36       	cpi	r25, 0x6F	; 111
    8cc6:	61 f0       	breq	.+24     	; 0x8ce0 <vfprintf+0x27c>
    8cc8:	90 37       	cpi	r25, 0x70	; 112
    8cca:	20 f4       	brcc	.+8      	; 0x8cd4 <vfprintf+0x270>
    8ccc:	98 35       	cpi	r25, 0x58	; 88
    8cce:	09 f0       	breq	.+2      	; 0x8cd2 <vfprintf+0x26e>
    8cd0:	a5 c0       	rjmp	.+330    	; 0x8e1c <vfprintf+0x3b8>
    8cd2:	0f c0       	rjmp	.+30     	; 0x8cf2 <vfprintf+0x28e>
    8cd4:	90 37       	cpi	r25, 0x70	; 112
    8cd6:	39 f0       	breq	.+14     	; 0x8ce6 <vfprintf+0x282>
    8cd8:	98 37       	cpi	r25, 0x78	; 120
    8cda:	09 f0       	breq	.+2      	; 0x8cde <vfprintf+0x27a>
    8cdc:	9f c0       	rjmp	.+318    	; 0x8e1c <vfprintf+0x3b8>
    8cde:	04 c0       	rjmp	.+8      	; 0x8ce8 <vfprintf+0x284>
    8ce0:	28 e0       	ldi	r18, 0x08	; 8
    8ce2:	30 e0       	ldi	r19, 0x00	; 0
    8ce4:	0a c0       	rjmp	.+20     	; 0x8cfa <vfprintf+0x296>
    8ce6:	10 61       	ori	r17, 0x10	; 16
    8ce8:	14 fd       	sbrc	r17, 4
    8cea:	14 60       	ori	r17, 0x04	; 4
    8cec:	20 e1       	ldi	r18, 0x10	; 16
    8cee:	30 e0       	ldi	r19, 0x00	; 0
    8cf0:	04 c0       	rjmp	.+8      	; 0x8cfa <vfprintf+0x296>
    8cf2:	14 fd       	sbrc	r17, 4
    8cf4:	16 60       	ori	r17, 0x06	; 6
    8cf6:	20 e1       	ldi	r18, 0x10	; 16
    8cf8:	32 e0       	ldi	r19, 0x02	; 2
    8cfa:	17 ff       	sbrs	r17, 7
    8cfc:	08 c0       	rjmp	.+16     	; 0x8d0e <vfprintf+0x2aa>
    8cfe:	f5 01       	movw	r30, r10
    8d00:	60 81       	ld	r22, Z
    8d02:	71 81       	ldd	r23, Z+1	; 0x01
    8d04:	82 81       	ldd	r24, Z+2	; 0x02
    8d06:	93 81       	ldd	r25, Z+3	; 0x03
    8d08:	44 e0       	ldi	r20, 0x04	; 4
    8d0a:	50 e0       	ldi	r21, 0x00	; 0
    8d0c:	08 c0       	rjmp	.+16     	; 0x8d1e <vfprintf+0x2ba>
    8d0e:	f5 01       	movw	r30, r10
    8d10:	80 81       	ld	r24, Z
    8d12:	91 81       	ldd	r25, Z+1	; 0x01
    8d14:	bc 01       	movw	r22, r24
    8d16:	80 e0       	ldi	r24, 0x00	; 0
    8d18:	90 e0       	ldi	r25, 0x00	; 0
    8d1a:	42 e0       	ldi	r20, 0x02	; 2
    8d1c:	50 e0       	ldi	r21, 0x00	; 0
    8d1e:	a4 0e       	add	r10, r20
    8d20:	b5 1e       	adc	r11, r21
    8d22:	a1 01       	movw	r20, r2
    8d24:	33 d3       	rcall	.+1638   	; 0x938c <__ultoa_invert>
    8d26:	d8 2e       	mov	r13, r24
    8d28:	d2 18       	sub	r13, r2
    8d2a:	8f e7       	ldi	r24, 0x7F	; 127
    8d2c:	f8 2e       	mov	r15, r24
    8d2e:	f1 22       	and	r15, r17
    8d30:	f6 fe       	sbrs	r15, 6
    8d32:	0b c0       	rjmp	.+22     	; 0x8d4a <vfprintf+0x2e6>
    8d34:	5e ef       	ldi	r21, 0xFE	; 254
    8d36:	f5 22       	and	r15, r21
    8d38:	d9 14       	cp	r13, r9
    8d3a:	38 f4       	brcc	.+14     	; 0x8d4a <vfprintf+0x2e6>
    8d3c:	f4 fe       	sbrs	r15, 4
    8d3e:	07 c0       	rjmp	.+14     	; 0x8d4e <vfprintf+0x2ea>
    8d40:	f2 fc       	sbrc	r15, 2
    8d42:	05 c0       	rjmp	.+10     	; 0x8d4e <vfprintf+0x2ea>
    8d44:	8f ee       	ldi	r24, 0xEF	; 239
    8d46:	f8 22       	and	r15, r24
    8d48:	02 c0       	rjmp	.+4      	; 0x8d4e <vfprintf+0x2ea>
    8d4a:	1d 2d       	mov	r17, r13
    8d4c:	01 c0       	rjmp	.+2      	; 0x8d50 <vfprintf+0x2ec>
    8d4e:	19 2d       	mov	r17, r9
    8d50:	f4 fe       	sbrs	r15, 4
    8d52:	0d c0       	rjmp	.+26     	; 0x8d6e <vfprintf+0x30a>
    8d54:	fe 01       	movw	r30, r28
    8d56:	ed 0d       	add	r30, r13
    8d58:	f1 1d       	adc	r31, r1
    8d5a:	80 81       	ld	r24, Z
    8d5c:	80 33       	cpi	r24, 0x30	; 48
    8d5e:	19 f4       	brne	.+6      	; 0x8d66 <vfprintf+0x302>
    8d60:	99 ee       	ldi	r25, 0xE9	; 233
    8d62:	f9 22       	and	r15, r25
    8d64:	08 c0       	rjmp	.+16     	; 0x8d76 <vfprintf+0x312>
    8d66:	1f 5f       	subi	r17, 0xFF	; 255
    8d68:	f2 fe       	sbrs	r15, 2
    8d6a:	05 c0       	rjmp	.+10     	; 0x8d76 <vfprintf+0x312>
    8d6c:	03 c0       	rjmp	.+6      	; 0x8d74 <vfprintf+0x310>
    8d6e:	8f 2d       	mov	r24, r15
    8d70:	86 78       	andi	r24, 0x86	; 134
    8d72:	09 f0       	breq	.+2      	; 0x8d76 <vfprintf+0x312>
    8d74:	1f 5f       	subi	r17, 0xFF	; 255
    8d76:	0f 2d       	mov	r16, r15
    8d78:	f3 fc       	sbrc	r15, 3
    8d7a:	13 c0       	rjmp	.+38     	; 0x8da2 <vfprintf+0x33e>
    8d7c:	f0 fe       	sbrs	r15, 0
    8d7e:	0e c0       	rjmp	.+28     	; 0x8d9c <vfprintf+0x338>
    8d80:	1e 15       	cp	r17, r14
    8d82:	10 f0       	brcs	.+4      	; 0x8d88 <vfprintf+0x324>
    8d84:	9d 2c       	mov	r9, r13
    8d86:	0a c0       	rjmp	.+20     	; 0x8d9c <vfprintf+0x338>
    8d88:	9d 2c       	mov	r9, r13
    8d8a:	9e 0c       	add	r9, r14
    8d8c:	91 1a       	sub	r9, r17
    8d8e:	1e 2d       	mov	r17, r14
    8d90:	05 c0       	rjmp	.+10     	; 0x8d9c <vfprintf+0x338>
    8d92:	80 e2       	ldi	r24, 0x20	; 32
    8d94:	90 e0       	ldi	r25, 0x00	; 0
    8d96:	b3 01       	movw	r22, r6
    8d98:	cd d2       	rcall	.+1434   	; 0x9334 <fputc>
    8d9a:	1f 5f       	subi	r17, 0xFF	; 255
    8d9c:	1e 15       	cp	r17, r14
    8d9e:	c8 f3       	brcs	.-14     	; 0x8d92 <vfprintf+0x32e>
    8da0:	04 c0       	rjmp	.+8      	; 0x8daa <vfprintf+0x346>
    8da2:	1e 15       	cp	r17, r14
    8da4:	10 f4       	brcc	.+4      	; 0x8daa <vfprintf+0x346>
    8da6:	e1 1a       	sub	r14, r17
    8da8:	01 c0       	rjmp	.+2      	; 0x8dac <vfprintf+0x348>
    8daa:	ee 24       	eor	r14, r14
    8dac:	04 ff       	sbrs	r16, 4
    8dae:	0e c0       	rjmp	.+28     	; 0x8dcc <vfprintf+0x368>
    8db0:	80 e3       	ldi	r24, 0x30	; 48
    8db2:	90 e0       	ldi	r25, 0x00	; 0
    8db4:	b3 01       	movw	r22, r6
    8db6:	be d2       	rcall	.+1404   	; 0x9334 <fputc>
    8db8:	02 ff       	sbrs	r16, 2
    8dba:	1b c0       	rjmp	.+54     	; 0x8df2 <vfprintf+0x38e>
    8dbc:	01 fd       	sbrc	r16, 1
    8dbe:	03 c0       	rjmp	.+6      	; 0x8dc6 <vfprintf+0x362>
    8dc0:	88 e7       	ldi	r24, 0x78	; 120
    8dc2:	90 e0       	ldi	r25, 0x00	; 0
    8dc4:	0e c0       	rjmp	.+28     	; 0x8de2 <vfprintf+0x37e>
    8dc6:	88 e5       	ldi	r24, 0x58	; 88
    8dc8:	90 e0       	ldi	r25, 0x00	; 0
    8dca:	0b c0       	rjmp	.+22     	; 0x8de2 <vfprintf+0x37e>
    8dcc:	80 2f       	mov	r24, r16
    8dce:	86 78       	andi	r24, 0x86	; 134
    8dd0:	81 f0       	breq	.+32     	; 0x8df2 <vfprintf+0x38e>
    8dd2:	01 ff       	sbrs	r16, 1
    8dd4:	02 c0       	rjmp	.+4      	; 0x8dda <vfprintf+0x376>
    8dd6:	8b e2       	ldi	r24, 0x2B	; 43
    8dd8:	01 c0       	rjmp	.+2      	; 0x8ddc <vfprintf+0x378>
    8dda:	80 e2       	ldi	r24, 0x20	; 32
    8ddc:	f7 fc       	sbrc	r15, 7
    8dde:	8d e2       	ldi	r24, 0x2D	; 45
    8de0:	90 e0       	ldi	r25, 0x00	; 0
    8de2:	b3 01       	movw	r22, r6
    8de4:	a7 d2       	rcall	.+1358   	; 0x9334 <fputc>
    8de6:	05 c0       	rjmp	.+10     	; 0x8df2 <vfprintf+0x38e>
    8de8:	80 e3       	ldi	r24, 0x30	; 48
    8dea:	90 e0       	ldi	r25, 0x00	; 0
    8dec:	b3 01       	movw	r22, r6
    8dee:	a2 d2       	rcall	.+1348   	; 0x9334 <fputc>
    8df0:	9a 94       	dec	r9
    8df2:	d9 14       	cp	r13, r9
    8df4:	c8 f3       	brcs	.-14     	; 0x8de8 <vfprintf+0x384>
    8df6:	da 94       	dec	r13
    8df8:	f1 01       	movw	r30, r2
    8dfa:	ed 0d       	add	r30, r13
    8dfc:	f1 1d       	adc	r31, r1
    8dfe:	80 81       	ld	r24, Z
    8e00:	90 e0       	ldi	r25, 0x00	; 0
    8e02:	b3 01       	movw	r22, r6
    8e04:	97 d2       	rcall	.+1326   	; 0x9334 <fputc>
    8e06:	dd 20       	and	r13, r13
    8e08:	b1 f7       	brne	.-20     	; 0x8df6 <vfprintf+0x392>
    8e0a:	05 c0       	rjmp	.+10     	; 0x8e16 <vfprintf+0x3b2>
    8e0c:	80 e2       	ldi	r24, 0x20	; 32
    8e0e:	90 e0       	ldi	r25, 0x00	; 0
    8e10:	b3 01       	movw	r22, r6
    8e12:	90 d2       	rcall	.+1312   	; 0x9334 <fputc>
    8e14:	ea 94       	dec	r14
    8e16:	ee 20       	and	r14, r14
    8e18:	c9 f7       	brne	.-14     	; 0x8e0c <vfprintf+0x3a8>
    8e1a:	50 ce       	rjmp	.-864    	; 0x8abc <vfprintf+0x58>
    8e1c:	f3 01       	movw	r30, r6
    8e1e:	66 81       	ldd	r22, Z+6	; 0x06
    8e20:	77 81       	ldd	r23, Z+7	; 0x07
    8e22:	cb 01       	movw	r24, r22
    8e24:	2b 96       	adiw	r28, 0x0b	; 11
    8e26:	0f b6       	in	r0, 0x3f	; 63
    8e28:	f8 94       	cli
    8e2a:	de bf       	out	0x3e, r29	; 62
    8e2c:	0f be       	out	0x3f, r0	; 63
    8e2e:	cd bf       	out	0x3d, r28	; 61
    8e30:	cf 91       	pop	r28
    8e32:	df 91       	pop	r29
    8e34:	1f 91       	pop	r17
    8e36:	0f 91       	pop	r16
    8e38:	ff 90       	pop	r15
    8e3a:	ef 90       	pop	r14
    8e3c:	df 90       	pop	r13
    8e3e:	cf 90       	pop	r12
    8e40:	bf 90       	pop	r11
    8e42:	af 90       	pop	r10
    8e44:	9f 90       	pop	r9
    8e46:	8f 90       	pop	r8
    8e48:	7f 90       	pop	r7
    8e4a:	6f 90       	pop	r6
    8e4c:	5f 90       	pop	r5
    8e4e:	4f 90       	pop	r4
    8e50:	3f 90       	pop	r3
    8e52:	2f 90       	pop	r2
    8e54:	08 95       	ret

00008e56 <dtoa_prf>:
    8e56:	6f 92       	push	r6
    8e58:	7f 92       	push	r7
    8e5a:	8f 92       	push	r8
    8e5c:	9f 92       	push	r9
    8e5e:	af 92       	push	r10
    8e60:	bf 92       	push	r11
    8e62:	cf 92       	push	r12
    8e64:	df 92       	push	r13
    8e66:	ef 92       	push	r14
    8e68:	ff 92       	push	r15
    8e6a:	0f 93       	push	r16
    8e6c:	1f 93       	push	r17
    8e6e:	df 93       	push	r29
    8e70:	cf 93       	push	r28
    8e72:	cd b7       	in	r28, 0x3d	; 61
    8e74:	de b7       	in	r29, 0x3e	; 62
    8e76:	29 97       	sbiw	r28, 0x09	; 9
    8e78:	0f b6       	in	r0, 0x3f	; 63
    8e7a:	f8 94       	cli
    8e7c:	de bf       	out	0x3e, r29	; 62
    8e7e:	0f be       	out	0x3f, r0	; 63
    8e80:	cd bf       	out	0x3d, r28	; 61
    8e82:	6a 01       	movw	r12, r20
    8e84:	12 2f       	mov	r17, r18
    8e86:	a0 2e       	mov	r10, r16
    8e88:	be 2c       	mov	r11, r14
    8e8a:	2b e3       	ldi	r18, 0x3B	; 59
    8e8c:	20 17       	cp	r18, r16
    8e8e:	18 f4       	brcc	.+6      	; 0x8e96 <dtoa_prf+0x40>
    8e90:	2c e3       	ldi	r18, 0x3C	; 60
    8e92:	92 2e       	mov	r9, r18
    8e94:	02 c0       	rjmp	.+4      	; 0x8e9a <dtoa_prf+0x44>
    8e96:	90 2e       	mov	r9, r16
    8e98:	93 94       	inc	r9
    8e9a:	ae 01       	movw	r20, r28
    8e9c:	4f 5f       	subi	r20, 0xFF	; 255
    8e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    8ea0:	27 e0       	ldi	r18, 0x07	; 7
    8ea2:	09 2d       	mov	r16, r9
    8ea4:	59 d1       	rcall	.+690    	; 0x9158 <__ftoa_engine>
    8ea6:	bc 01       	movw	r22, r24
    8ea8:	89 81       	ldd	r24, Y+1	; 0x01
    8eaa:	e8 2e       	mov	r14, r24
    8eac:	ff 24       	eor	r15, r15
    8eae:	c7 01       	movw	r24, r14
    8eb0:	89 70       	andi	r24, 0x09	; 9
    8eb2:	90 70       	andi	r25, 0x00	; 0
    8eb4:	01 97       	sbiw	r24, 0x01	; 1
    8eb6:	11 f4       	brne	.+4      	; 0x8ebc <dtoa_prf+0x66>
    8eb8:	ad e2       	ldi	r26, 0x2D	; 45
    8eba:	09 c0       	rjmp	.+18     	; 0x8ece <dtoa_prf+0x78>
    8ebc:	b1 fe       	sbrs	r11, 1
    8ebe:	02 c0       	rjmp	.+4      	; 0x8ec4 <dtoa_prf+0x6e>
    8ec0:	ab e2       	ldi	r26, 0x2B	; 43
    8ec2:	05 c0       	rjmp	.+10     	; 0x8ece <dtoa_prf+0x78>
    8ec4:	b0 fc       	sbrc	r11, 0
    8ec6:	02 c0       	rjmp	.+4      	; 0x8ecc <dtoa_prf+0x76>
    8ec8:	a0 e0       	ldi	r26, 0x00	; 0
    8eca:	01 c0       	rjmp	.+2      	; 0x8ece <dtoa_prf+0x78>
    8ecc:	a0 e2       	ldi	r26, 0x20	; 32
    8ece:	e3 fe       	sbrs	r14, 3
    8ed0:	3b c0       	rjmp	.+118    	; 0x8f48 <dtoa_prf+0xf2>
    8ed2:	aa 23       	and	r26, r26
    8ed4:	11 f4       	brne	.+4      	; 0x8eda <dtoa_prf+0x84>
    8ed6:	23 e0       	ldi	r18, 0x03	; 3
    8ed8:	01 c0       	rjmp	.+2      	; 0x8edc <dtoa_prf+0x86>
    8eda:	24 e0       	ldi	r18, 0x04	; 4
    8edc:	21 17       	cp	r18, r17
    8ede:	10 f0       	brcs	.+4      	; 0x8ee4 <dtoa_prf+0x8e>
    8ee0:	20 e0       	ldi	r18, 0x00	; 0
    8ee2:	02 c0       	rjmp	.+4      	; 0x8ee8 <dtoa_prf+0x92>
    8ee4:	12 1b       	sub	r17, r18
    8ee6:	21 2f       	mov	r18, r17
    8ee8:	eb 2c       	mov	r14, r11
    8eea:	b4 fe       	sbrs	r11, 4
    8eec:	02 c0       	rjmp	.+4      	; 0x8ef2 <dtoa_prf+0x9c>
    8eee:	32 2f       	mov	r19, r18
    8ef0:	0a c0       	rjmp	.+20     	; 0x8f06 <dtoa_prf+0xb0>
    8ef2:	f6 01       	movw	r30, r12
    8ef4:	32 2f       	mov	r19, r18
    8ef6:	80 e2       	ldi	r24, 0x20	; 32
    8ef8:	02 c0       	rjmp	.+4      	; 0x8efe <dtoa_prf+0xa8>
    8efa:	81 93       	st	Z+, r24
    8efc:	31 50       	subi	r19, 0x01	; 1
    8efe:	33 23       	and	r19, r19
    8f00:	e1 f7       	brne	.-8      	; 0x8efa <dtoa_prf+0xa4>
    8f02:	c2 0e       	add	r12, r18
    8f04:	d1 1c       	adc	r13, r1
    8f06:	aa 23       	and	r26, r26
    8f08:	19 f0       	breq	.+6      	; 0x8f10 <dtoa_prf+0xba>
    8f0a:	f6 01       	movw	r30, r12
    8f0c:	a1 93       	st	Z+, r26
    8f0e:	6f 01       	movw	r12, r30
    8f10:	f6 01       	movw	r30, r12
    8f12:	31 96       	adiw	r30, 0x01	; 1
    8f14:	e2 fe       	sbrs	r14, 2
    8f16:	05 c0       	rjmp	.+10     	; 0x8f22 <dtoa_prf+0xcc>
    8f18:	9e e4       	ldi	r25, 0x4E	; 78
    8f1a:	d6 01       	movw	r26, r12
    8f1c:	9c 93       	st	X, r25
    8f1e:	81 e4       	ldi	r24, 0x41	; 65
    8f20:	04 c0       	rjmp	.+8      	; 0x8f2a <dtoa_prf+0xd4>
    8f22:	9e e6       	ldi	r25, 0x6E	; 110
    8f24:	d6 01       	movw	r26, r12
    8f26:	9c 93       	st	X, r25
    8f28:	81 e6       	ldi	r24, 0x61	; 97
    8f2a:	11 96       	adiw	r26, 0x01	; 1
    8f2c:	8c 93       	st	X, r24
    8f2e:	91 83       	std	Z+1, r25	; 0x01
    8f30:	32 96       	adiw	r30, 0x02	; 2
    8f32:	df 01       	movw	r26, r30
    8f34:	83 2f       	mov	r24, r19
    8f36:	90 e2       	ldi	r25, 0x20	; 32
    8f38:	02 c0       	rjmp	.+4      	; 0x8f3e <dtoa_prf+0xe8>
    8f3a:	9d 93       	st	X+, r25
    8f3c:	81 50       	subi	r24, 0x01	; 1
    8f3e:	88 23       	and	r24, r24
    8f40:	e1 f7       	brne	.-8      	; 0x8f3a <dtoa_prf+0xe4>
    8f42:	e3 0f       	add	r30, r19
    8f44:	f1 1d       	adc	r31, r1
    8f46:	40 c0       	rjmp	.+128    	; 0x8fc8 <dtoa_prf+0x172>
    8f48:	e2 fe       	sbrs	r14, 2
    8f4a:	42 c0       	rjmp	.+132    	; 0x8fd0 <dtoa_prf+0x17a>
    8f4c:	aa 23       	and	r26, r26
    8f4e:	11 f4       	brne	.+4      	; 0x8f54 <dtoa_prf+0xfe>
    8f50:	23 e0       	ldi	r18, 0x03	; 3
    8f52:	01 c0       	rjmp	.+2      	; 0x8f56 <dtoa_prf+0x100>
    8f54:	24 e0       	ldi	r18, 0x04	; 4
    8f56:	21 17       	cp	r18, r17
    8f58:	10 f0       	brcs	.+4      	; 0x8f5e <dtoa_prf+0x108>
    8f5a:	20 e0       	ldi	r18, 0x00	; 0
    8f5c:	02 c0       	rjmp	.+4      	; 0x8f62 <dtoa_prf+0x10c>
    8f5e:	12 1b       	sub	r17, r18
    8f60:	21 2f       	mov	r18, r17
    8f62:	eb 2c       	mov	r14, r11
    8f64:	b4 fe       	sbrs	r11, 4
    8f66:	02 c0       	rjmp	.+4      	; 0x8f6c <dtoa_prf+0x116>
    8f68:	92 2f       	mov	r25, r18
    8f6a:	0a c0       	rjmp	.+20     	; 0x8f80 <dtoa_prf+0x12a>
    8f6c:	f6 01       	movw	r30, r12
    8f6e:	92 2f       	mov	r25, r18
    8f70:	80 e2       	ldi	r24, 0x20	; 32
    8f72:	02 c0       	rjmp	.+4      	; 0x8f78 <dtoa_prf+0x122>
    8f74:	81 93       	st	Z+, r24
    8f76:	91 50       	subi	r25, 0x01	; 1
    8f78:	99 23       	and	r25, r25
    8f7a:	e1 f7       	brne	.-8      	; 0x8f74 <dtoa_prf+0x11e>
    8f7c:	c2 0e       	add	r12, r18
    8f7e:	d1 1c       	adc	r13, r1
    8f80:	aa 23       	and	r26, r26
    8f82:	19 f0       	breq	.+6      	; 0x8f8a <dtoa_prf+0x134>
    8f84:	f6 01       	movw	r30, r12
    8f86:	a1 93       	st	Z+, r26
    8f88:	6f 01       	movw	r12, r30
    8f8a:	f6 01       	movw	r30, r12
    8f8c:	31 96       	adiw	r30, 0x01	; 1
    8f8e:	e2 fe       	sbrs	r14, 2
    8f90:	08 c0       	rjmp	.+16     	; 0x8fa2 <dtoa_prf+0x14c>
    8f92:	89 e4       	ldi	r24, 0x49	; 73
    8f94:	d6 01       	movw	r26, r12
    8f96:	8c 93       	st	X, r24
    8f98:	8e e4       	ldi	r24, 0x4E	; 78
    8f9a:	11 96       	adiw	r26, 0x01	; 1
    8f9c:	8c 93       	st	X, r24
    8f9e:	86 e4       	ldi	r24, 0x46	; 70
    8fa0:	07 c0       	rjmp	.+14     	; 0x8fb0 <dtoa_prf+0x15a>
    8fa2:	89 e6       	ldi	r24, 0x69	; 105
    8fa4:	d6 01       	movw	r26, r12
    8fa6:	8c 93       	st	X, r24
    8fa8:	8e e6       	ldi	r24, 0x6E	; 110
    8faa:	11 96       	adiw	r26, 0x01	; 1
    8fac:	8c 93       	st	X, r24
    8fae:	86 e6       	ldi	r24, 0x66	; 102
    8fb0:	81 83       	std	Z+1, r24	; 0x01
    8fb2:	32 96       	adiw	r30, 0x02	; 2
    8fb4:	df 01       	movw	r26, r30
    8fb6:	89 2f       	mov	r24, r25
    8fb8:	20 e2       	ldi	r18, 0x20	; 32
    8fba:	02 c0       	rjmp	.+4      	; 0x8fc0 <dtoa_prf+0x16a>
    8fbc:	2d 93       	st	X+, r18
    8fbe:	81 50       	subi	r24, 0x01	; 1
    8fc0:	88 23       	and	r24, r24
    8fc2:	e1 f7       	brne	.-8      	; 0x8fbc <dtoa_prf+0x166>
    8fc4:	e9 0f       	add	r30, r25
    8fc6:	f1 1d       	adc	r31, r1
    8fc8:	10 82       	st	Z, r1
    8fca:	2e ef       	ldi	r18, 0xFE	; 254
    8fcc:	3f ef       	ldi	r19, 0xFF	; 255
    8fce:	ae c0       	rjmp	.+348    	; 0x912c <dtoa_prf+0x2d6>
    8fd0:	16 16       	cp	r1, r22
    8fd2:	17 06       	cpc	r1, r23
    8fd4:	1c f0       	brlt	.+6      	; 0x8fdc <dtoa_prf+0x186>
    8fd6:	41 e0       	ldi	r20, 0x01	; 1
    8fd8:	50 e0       	ldi	r21, 0x00	; 0
    8fda:	03 c0       	rjmp	.+6      	; 0x8fe2 <dtoa_prf+0x18c>
    8fdc:	ab 01       	movw	r20, r22
    8fde:	4f 5f       	subi	r20, 0xFF	; 255
    8fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    8fe2:	aa 20       	and	r10, r10
    8fe4:	19 f4       	brne	.+6      	; 0x8fec <dtoa_prf+0x196>
    8fe6:	80 e0       	ldi	r24, 0x00	; 0
    8fe8:	90 e0       	ldi	r25, 0x00	; 0
    8fea:	03 c0       	rjmp	.+6      	; 0x8ff2 <dtoa_prf+0x19c>
    8fec:	8a 2d       	mov	r24, r10
    8fee:	90 e0       	ldi	r25, 0x00	; 0
    8ff0:	01 96       	adiw	r24, 0x01	; 1
    8ff2:	20 e0       	ldi	r18, 0x00	; 0
    8ff4:	30 e0       	ldi	r19, 0x00	; 0
    8ff6:	aa 23       	and	r26, r26
    8ff8:	11 f0       	breq	.+4      	; 0x8ffe <dtoa_prf+0x1a8>
    8ffa:	21 e0       	ldi	r18, 0x01	; 1
    8ffc:	30 e0       	ldi	r19, 0x00	; 0
    8ffe:	24 0f       	add	r18, r20
    9000:	35 1f       	adc	r19, r21
    9002:	28 0f       	add	r18, r24
    9004:	39 1f       	adc	r19, r25
    9006:	81 2f       	mov	r24, r17
    9008:	90 e0       	ldi	r25, 0x00	; 0
    900a:	28 17       	cp	r18, r24
    900c:	39 07       	cpc	r19, r25
    900e:	14 f0       	brlt	.+4      	; 0x9014 <dtoa_prf+0x1be>
    9010:	20 e0       	ldi	r18, 0x00	; 0
    9012:	02 c0       	rjmp	.+4      	; 0x9018 <dtoa_prf+0x1c2>
    9014:	12 1b       	sub	r17, r18
    9016:	21 2f       	mov	r18, r17
    9018:	4b 2d       	mov	r20, r11
    901a:	50 e0       	ldi	r21, 0x00	; 0
    901c:	ca 01       	movw	r24, r20
    901e:	80 71       	andi	r24, 0x10	; 16
    9020:	90 70       	andi	r25, 0x00	; 0
    9022:	b4 fc       	sbrc	r11, 4
    9024:	0d c0       	rjmp	.+26     	; 0x9040 <dtoa_prf+0x1ea>
    9026:	b3 fc       	sbrc	r11, 3
    9028:	0b c0       	rjmp	.+22     	; 0x9040 <dtoa_prf+0x1ea>
    902a:	f6 01       	movw	r30, r12
    902c:	32 2f       	mov	r19, r18
    902e:	40 e2       	ldi	r20, 0x20	; 32
    9030:	02 c0       	rjmp	.+4      	; 0x9036 <dtoa_prf+0x1e0>
    9032:	41 93       	st	Z+, r20
    9034:	31 50       	subi	r19, 0x01	; 1
    9036:	33 23       	and	r19, r19
    9038:	e1 f7       	brne	.-8      	; 0x9032 <dtoa_prf+0x1dc>
    903a:	c2 0e       	add	r12, r18
    903c:	d1 1c       	adc	r13, r1
    903e:	01 c0       	rjmp	.+2      	; 0x9042 <dtoa_prf+0x1ec>
    9040:	32 2f       	mov	r19, r18
    9042:	aa 23       	and	r26, r26
    9044:	19 f0       	breq	.+6      	; 0x904c <dtoa_prf+0x1f6>
    9046:	f6 01       	movw	r30, r12
    9048:	a1 93       	st	Z+, r26
    904a:	6f 01       	movw	r12, r30
    904c:	89 2b       	or	r24, r25
    904e:	11 f0       	breq	.+4      	; 0x9054 <dtoa_prf+0x1fe>
    9050:	13 2f       	mov	r17, r19
    9052:	0a c0       	rjmp	.+20     	; 0x9068 <dtoa_prf+0x212>
    9054:	f6 01       	movw	r30, r12
    9056:	13 2f       	mov	r17, r19
    9058:	80 e3       	ldi	r24, 0x30	; 48
    905a:	02 c0       	rjmp	.+4      	; 0x9060 <dtoa_prf+0x20a>
    905c:	81 93       	st	Z+, r24
    905e:	11 50       	subi	r17, 0x01	; 1
    9060:	11 23       	and	r17, r17
    9062:	e1 f7       	brne	.-8      	; 0x905c <dtoa_prf+0x206>
    9064:	c3 0e       	add	r12, r19
    9066:	d1 1c       	adc	r13, r1
    9068:	09 2d       	mov	r16, r9
    906a:	06 0f       	add	r16, r22
    906c:	ba 80       	ldd	r11, Y+2	; 0x02
    906e:	90 e1       	ldi	r25, 0x10	; 16
    9070:	89 2e       	mov	r8, r25
    9072:	91 2c       	mov	r9, r1
    9074:	8e 20       	and	r8, r14
    9076:	9f 20       	and	r9, r15
    9078:	e4 fe       	sbrs	r14, 4
    907a:	04 c0       	rjmp	.+8      	; 0x9084 <dtoa_prf+0x22e>
    907c:	f1 e3       	ldi	r31, 0x31	; 49
    907e:	bf 16       	cp	r11, r31
    9080:	09 f4       	brne	.+2      	; 0x9084 <dtoa_prf+0x22e>
    9082:	01 50       	subi	r16, 0x01	; 1
    9084:	10 16       	cp	r1, r16
    9086:	14 f0       	brlt	.+4      	; 0x908c <dtoa_prf+0x236>
    9088:	01 e0       	ldi	r16, 0x01	; 1
    908a:	03 c0       	rjmp	.+6      	; 0x9092 <dtoa_prf+0x23c>
    908c:	09 30       	cpi	r16, 0x09	; 9
    908e:	08 f0       	brcs	.+2      	; 0x9092 <dtoa_prf+0x23c>
    9090:	08 e0       	ldi	r16, 0x08	; 8
    9092:	9b 01       	movw	r18, r22
    9094:	77 ff       	sbrs	r23, 7
    9096:	02 c0       	rjmp	.+4      	; 0x909c <dtoa_prf+0x246>
    9098:	20 e0       	ldi	r18, 0x00	; 0
    909a:	30 e0       	ldi	r19, 0x00	; 0
    909c:	cb 01       	movw	r24, r22
    909e:	01 96       	adiw	r24, 0x01	; 1
    90a0:	82 1b       	sub	r24, r18
    90a2:	93 0b       	sbc	r25, r19
    90a4:	fe 01       	movw	r30, r28
    90a6:	31 96       	adiw	r30, 0x01	; 1
    90a8:	e8 0f       	add	r30, r24
    90aa:	f9 1f       	adc	r31, r25
    90ac:	8e e2       	ldi	r24, 0x2E	; 46
    90ae:	f8 2e       	mov	r15, r24
    90b0:	3b 01       	movw	r6, r22
    90b2:	60 1a       	sub	r6, r16
    90b4:	71 08       	sbc	r7, r1
    90b6:	8a 2d       	mov	r24, r10
    90b8:	90 e0       	ldi	r25, 0x00	; 0
    90ba:	44 27       	eor	r20, r20
    90bc:	55 27       	eor	r21, r21
    90be:	48 1b       	sub	r20, r24
    90c0:	59 0b       	sbc	r21, r25
    90c2:	8f ef       	ldi	r24, 0xFF	; 255
    90c4:	2f 3f       	cpi	r18, 0xFF	; 255
    90c6:	38 07       	cpc	r19, r24
    90c8:	19 f4       	brne	.+6      	; 0x90d0 <dtoa_prf+0x27a>
    90ca:	d6 01       	movw	r26, r12
    90cc:	fd 92       	st	X+, r15
    90ce:	6d 01       	movw	r12, r26
    90d0:	62 17       	cp	r22, r18
    90d2:	73 07       	cpc	r23, r19
    90d4:	2c f0       	brlt	.+10     	; 0x90e0 <dtoa_prf+0x28a>
    90d6:	62 16       	cp	r6, r18
    90d8:	73 06       	cpc	r7, r19
    90da:	14 f4       	brge	.+4      	; 0x90e0 <dtoa_prf+0x28a>
    90dc:	80 81       	ld	r24, Z
    90de:	01 c0       	rjmp	.+2      	; 0x90e2 <dtoa_prf+0x28c>
    90e0:	80 e3       	ldi	r24, 0x30	; 48
    90e2:	21 50       	subi	r18, 0x01	; 1
    90e4:	30 40       	sbci	r19, 0x00	; 0
    90e6:	31 96       	adiw	r30, 0x01	; 1
    90e8:	24 17       	cp	r18, r20
    90ea:	35 07       	cpc	r19, r21
    90ec:	24 f0       	brlt	.+8      	; 0x90f6 <dtoa_prf+0x2a0>
    90ee:	d6 01       	movw	r26, r12
    90f0:	8d 93       	st	X+, r24
    90f2:	6d 01       	movw	r12, r26
    90f4:	e6 cf       	rjmp	.-52     	; 0x90c2 <dtoa_prf+0x26c>
    90f6:	26 17       	cp	r18, r22
    90f8:	37 07       	cpc	r19, r23
    90fa:	41 f4       	brne	.+16     	; 0x910c <dtoa_prf+0x2b6>
    90fc:	b5 e3       	ldi	r27, 0x35	; 53
    90fe:	bb 15       	cp	r27, r11
    9100:	20 f0       	brcs	.+8      	; 0x910a <dtoa_prf+0x2b4>
    9102:	bb 16       	cp	r11, r27
    9104:	19 f4       	brne	.+6      	; 0x910c <dtoa_prf+0x2b6>
    9106:	89 28       	or	r8, r9
    9108:	09 f4       	brne	.+2      	; 0x910c <dtoa_prf+0x2b6>
    910a:	81 e3       	ldi	r24, 0x31	; 49
    910c:	f6 01       	movw	r30, r12
    910e:	81 93       	st	Z+, r24
    9110:	d6 01       	movw	r26, r12
    9112:	81 2f       	mov	r24, r17
    9114:	90 e2       	ldi	r25, 0x20	; 32
    9116:	02 c0       	rjmp	.+4      	; 0x911c <dtoa_prf+0x2c6>
    9118:	9c 93       	st	X, r25
    911a:	81 50       	subi	r24, 0x01	; 1
    911c:	11 96       	adiw	r26, 0x01	; 1
    911e:	88 23       	and	r24, r24
    9120:	d9 f7       	brne	.-10     	; 0x9118 <dtoa_prf+0x2c2>
    9122:	e1 0f       	add	r30, r17
    9124:	f1 1d       	adc	r31, r1
    9126:	10 82       	st	Z, r1
    9128:	20 e0       	ldi	r18, 0x00	; 0
    912a:	30 e0       	ldi	r19, 0x00	; 0
    912c:	c9 01       	movw	r24, r18
    912e:	29 96       	adiw	r28, 0x09	; 9
    9130:	0f b6       	in	r0, 0x3f	; 63
    9132:	f8 94       	cli
    9134:	de bf       	out	0x3e, r29	; 62
    9136:	0f be       	out	0x3f, r0	; 63
    9138:	cd bf       	out	0x3d, r28	; 61
    913a:	cf 91       	pop	r28
    913c:	df 91       	pop	r29
    913e:	1f 91       	pop	r17
    9140:	0f 91       	pop	r16
    9142:	ff 90       	pop	r15
    9144:	ef 90       	pop	r14
    9146:	df 90       	pop	r13
    9148:	cf 90       	pop	r12
    914a:	bf 90       	pop	r11
    914c:	af 90       	pop	r10
    914e:	9f 90       	pop	r9
    9150:	8f 90       	pop	r8
    9152:	7f 90       	pop	r7
    9154:	6f 90       	pop	r6
    9156:	08 95       	ret

00009158 <__ftoa_engine>:
    9158:	28 30       	cpi	r18, 0x08	; 8
    915a:	08 f0       	brcs	.+2      	; 0x915e <__ftoa_engine+0x6>
    915c:	27 e0       	ldi	r18, 0x07	; 7
    915e:	33 27       	eor	r19, r19
    9160:	da 01       	movw	r26, r20
    9162:	99 0f       	add	r25, r25
    9164:	31 1d       	adc	r19, r1
    9166:	87 fd       	sbrc	r24, 7
    9168:	91 60       	ori	r25, 0x01	; 1
    916a:	00 96       	adiw	r24, 0x00	; 0
    916c:	61 05       	cpc	r22, r1
    916e:	71 05       	cpc	r23, r1
    9170:	39 f4       	brne	.+14     	; 0x9180 <__ftoa_engine+0x28>
    9172:	32 60       	ori	r19, 0x02	; 2
    9174:	2e 5f       	subi	r18, 0xFE	; 254
    9176:	3d 93       	st	X+, r19
    9178:	30 e3       	ldi	r19, 0x30	; 48
    917a:	2a 95       	dec	r18
    917c:	e1 f7       	brne	.-8      	; 0x9176 <__ftoa_engine+0x1e>
    917e:	08 95       	ret
    9180:	9f 3f       	cpi	r25, 0xFF	; 255
    9182:	30 f0       	brcs	.+12     	; 0x9190 <__ftoa_engine+0x38>
    9184:	80 38       	cpi	r24, 0x80	; 128
    9186:	71 05       	cpc	r23, r1
    9188:	61 05       	cpc	r22, r1
    918a:	09 f0       	breq	.+2      	; 0x918e <__ftoa_engine+0x36>
    918c:	3c 5f       	subi	r19, 0xFC	; 252
    918e:	3c 5f       	subi	r19, 0xFC	; 252
    9190:	3d 93       	st	X+, r19
    9192:	91 30       	cpi	r25, 0x01	; 1
    9194:	08 f0       	brcs	.+2      	; 0x9198 <__ftoa_engine+0x40>
    9196:	80 68       	ori	r24, 0x80	; 128
    9198:	91 1d       	adc	r25, r1
    919a:	df 93       	push	r29
    919c:	cf 93       	push	r28
    919e:	1f 93       	push	r17
    91a0:	0f 93       	push	r16
    91a2:	ff 92       	push	r15
    91a4:	ef 92       	push	r14
    91a6:	19 2f       	mov	r17, r25
    91a8:	98 7f       	andi	r25, 0xF8	; 248
    91aa:	96 95       	lsr	r25
    91ac:	e9 2f       	mov	r30, r25
    91ae:	96 95       	lsr	r25
    91b0:	96 95       	lsr	r25
    91b2:	e9 0f       	add	r30, r25
    91b4:	ff 27       	eor	r31, r31
    91b6:	ee 57       	subi	r30, 0x7E	; 126
    91b8:	ff 49       	sbci	r31, 0x9F	; 159
    91ba:	99 27       	eor	r25, r25
    91bc:	33 27       	eor	r19, r19
    91be:	ee 24       	eor	r14, r14
    91c0:	ff 24       	eor	r15, r15
    91c2:	a7 01       	movw	r20, r14
    91c4:	e7 01       	movw	r28, r14
    91c6:	05 90       	lpm	r0, Z+
    91c8:	08 94       	sec
    91ca:	07 94       	ror	r0
    91cc:	28 f4       	brcc	.+10     	; 0x91d8 <__ftoa_engine+0x80>
    91ce:	36 0f       	add	r19, r22
    91d0:	e7 1e       	adc	r14, r23
    91d2:	f8 1e       	adc	r15, r24
    91d4:	49 1f       	adc	r20, r25
    91d6:	51 1d       	adc	r21, r1
    91d8:	66 0f       	add	r22, r22
    91da:	77 1f       	adc	r23, r23
    91dc:	88 1f       	adc	r24, r24
    91de:	99 1f       	adc	r25, r25
    91e0:	06 94       	lsr	r0
    91e2:	a1 f7       	brne	.-24     	; 0x91cc <__ftoa_engine+0x74>
    91e4:	05 90       	lpm	r0, Z+
    91e6:	07 94       	ror	r0
    91e8:	28 f4       	brcc	.+10     	; 0x91f4 <__ftoa_engine+0x9c>
    91ea:	e7 0e       	add	r14, r23
    91ec:	f8 1e       	adc	r15, r24
    91ee:	49 1f       	adc	r20, r25
    91f0:	56 1f       	adc	r21, r22
    91f2:	c1 1d       	adc	r28, r1
    91f4:	77 0f       	add	r23, r23
    91f6:	88 1f       	adc	r24, r24
    91f8:	99 1f       	adc	r25, r25
    91fa:	66 1f       	adc	r22, r22
    91fc:	06 94       	lsr	r0
    91fe:	a1 f7       	brne	.-24     	; 0x91e8 <__ftoa_engine+0x90>
    9200:	05 90       	lpm	r0, Z+
    9202:	07 94       	ror	r0
    9204:	28 f4       	brcc	.+10     	; 0x9210 <__ftoa_engine+0xb8>
    9206:	f8 0e       	add	r15, r24
    9208:	49 1f       	adc	r20, r25
    920a:	56 1f       	adc	r21, r22
    920c:	c7 1f       	adc	r28, r23
    920e:	d1 1d       	adc	r29, r1
    9210:	88 0f       	add	r24, r24
    9212:	99 1f       	adc	r25, r25
    9214:	66 1f       	adc	r22, r22
    9216:	77 1f       	adc	r23, r23
    9218:	06 94       	lsr	r0
    921a:	a1 f7       	brne	.-24     	; 0x9204 <__ftoa_engine+0xac>
    921c:	05 90       	lpm	r0, Z+
    921e:	07 94       	ror	r0
    9220:	20 f4       	brcc	.+8      	; 0x922a <__ftoa_engine+0xd2>
    9222:	49 0f       	add	r20, r25
    9224:	56 1f       	adc	r21, r22
    9226:	c7 1f       	adc	r28, r23
    9228:	d8 1f       	adc	r29, r24
    922a:	99 0f       	add	r25, r25
    922c:	66 1f       	adc	r22, r22
    922e:	77 1f       	adc	r23, r23
    9230:	88 1f       	adc	r24, r24
    9232:	06 94       	lsr	r0
    9234:	a9 f7       	brne	.-22     	; 0x9220 <__ftoa_engine+0xc8>
    9236:	84 91       	lpm	r24, Z+
    9238:	10 95       	com	r17
    923a:	17 70       	andi	r17, 0x07	; 7
    923c:	41 f0       	breq	.+16     	; 0x924e <__ftoa_engine+0xf6>
    923e:	d6 95       	lsr	r29
    9240:	c7 95       	ror	r28
    9242:	57 95       	ror	r21
    9244:	47 95       	ror	r20
    9246:	f7 94       	ror	r15
    9248:	e7 94       	ror	r14
    924a:	1a 95       	dec	r17
    924c:	c1 f7       	brne	.-16     	; 0x923e <__ftoa_engine+0xe6>
    924e:	e8 e2       	ldi	r30, 0x28	; 40
    9250:	f0 e6       	ldi	r31, 0x60	; 96
    9252:	68 94       	set
    9254:	15 90       	lpm	r1, Z+
    9256:	15 91       	lpm	r17, Z+
    9258:	35 91       	lpm	r19, Z+
    925a:	65 91       	lpm	r22, Z+
    925c:	95 91       	lpm	r25, Z+
    925e:	05 90       	lpm	r0, Z+
    9260:	7f e2       	ldi	r23, 0x2F	; 47
    9262:	73 95       	inc	r23
    9264:	e1 18       	sub	r14, r1
    9266:	f1 0a       	sbc	r15, r17
    9268:	43 0b       	sbc	r20, r19
    926a:	56 0b       	sbc	r21, r22
    926c:	c9 0b       	sbc	r28, r25
    926e:	d0 09       	sbc	r29, r0
    9270:	c0 f7       	brcc	.-16     	; 0x9262 <__ftoa_engine+0x10a>
    9272:	e1 0c       	add	r14, r1
    9274:	f1 1e       	adc	r15, r17
    9276:	43 1f       	adc	r20, r19
    9278:	56 1f       	adc	r21, r22
    927a:	c9 1f       	adc	r28, r25
    927c:	d0 1d       	adc	r29, r0
    927e:	7e f4       	brtc	.+30     	; 0x929e <__ftoa_engine+0x146>
    9280:	70 33       	cpi	r23, 0x30	; 48
    9282:	11 f4       	brne	.+4      	; 0x9288 <__ftoa_engine+0x130>
    9284:	8a 95       	dec	r24
    9286:	e6 cf       	rjmp	.-52     	; 0x9254 <__ftoa_engine+0xfc>
    9288:	e8 94       	clt
    928a:	01 50       	subi	r16, 0x01	; 1
    928c:	30 f0       	brcs	.+12     	; 0x929a <__ftoa_engine+0x142>
    928e:	08 0f       	add	r16, r24
    9290:	0a f4       	brpl	.+2      	; 0x9294 <__ftoa_engine+0x13c>
    9292:	00 27       	eor	r16, r16
    9294:	02 17       	cp	r16, r18
    9296:	08 f4       	brcc	.+2      	; 0x929a <__ftoa_engine+0x142>
    9298:	20 2f       	mov	r18, r16
    929a:	23 95       	inc	r18
    929c:	02 2f       	mov	r16, r18
    929e:	7a 33       	cpi	r23, 0x3A	; 58
    92a0:	28 f0       	brcs	.+10     	; 0x92ac <__ftoa_engine+0x154>
    92a2:	79 e3       	ldi	r23, 0x39	; 57
    92a4:	7d 93       	st	X+, r23
    92a6:	2a 95       	dec	r18
    92a8:	e9 f7       	brne	.-6      	; 0x92a4 <__ftoa_engine+0x14c>
    92aa:	10 c0       	rjmp	.+32     	; 0x92cc <__ftoa_engine+0x174>
    92ac:	7d 93       	st	X+, r23
    92ae:	2a 95       	dec	r18
    92b0:	89 f6       	brne	.-94     	; 0x9254 <__ftoa_engine+0xfc>
    92b2:	06 94       	lsr	r0
    92b4:	97 95       	ror	r25
    92b6:	67 95       	ror	r22
    92b8:	37 95       	ror	r19
    92ba:	17 95       	ror	r17
    92bc:	17 94       	ror	r1
    92be:	e1 18       	sub	r14, r1
    92c0:	f1 0a       	sbc	r15, r17
    92c2:	43 0b       	sbc	r20, r19
    92c4:	56 0b       	sbc	r21, r22
    92c6:	c9 0b       	sbc	r28, r25
    92c8:	d0 09       	sbc	r29, r0
    92ca:	98 f0       	brcs	.+38     	; 0x92f2 <__ftoa_engine+0x19a>
    92cc:	23 95       	inc	r18
    92ce:	7e 91       	ld	r23, -X
    92d0:	73 95       	inc	r23
    92d2:	7a 33       	cpi	r23, 0x3A	; 58
    92d4:	08 f0       	brcs	.+2      	; 0x92d8 <__ftoa_engine+0x180>
    92d6:	70 e3       	ldi	r23, 0x30	; 48
    92d8:	7c 93       	st	X, r23
    92da:	20 13       	cpse	r18, r16
    92dc:	b8 f7       	brcc	.-18     	; 0x92cc <__ftoa_engine+0x174>
    92de:	7e 91       	ld	r23, -X
    92e0:	70 61       	ori	r23, 0x10	; 16
    92e2:	7d 93       	st	X+, r23
    92e4:	30 f0       	brcs	.+12     	; 0x92f2 <__ftoa_engine+0x19a>
    92e6:	83 95       	inc	r24
    92e8:	71 e3       	ldi	r23, 0x31	; 49
    92ea:	7d 93       	st	X+, r23
    92ec:	70 e3       	ldi	r23, 0x30	; 48
    92ee:	2a 95       	dec	r18
    92f0:	e1 f7       	brne	.-8      	; 0x92ea <__ftoa_engine+0x192>
    92f2:	11 24       	eor	r1, r1
    92f4:	ef 90       	pop	r14
    92f6:	ff 90       	pop	r15
    92f8:	0f 91       	pop	r16
    92fa:	1f 91       	pop	r17
    92fc:	cf 91       	pop	r28
    92fe:	df 91       	pop	r29
    9300:	99 27       	eor	r25, r25
    9302:	87 fd       	sbrc	r24, 7
    9304:	90 95       	com	r25
    9306:	08 95       	ret

00009308 <strnlen_P>:
    9308:	fc 01       	movw	r30, r24
    930a:	05 90       	lpm	r0, Z+
    930c:	61 50       	subi	r22, 0x01	; 1
    930e:	70 40       	sbci	r23, 0x00	; 0
    9310:	01 10       	cpse	r0, r1
    9312:	d8 f7       	brcc	.-10     	; 0x930a <strnlen_P+0x2>
    9314:	80 95       	com	r24
    9316:	90 95       	com	r25
    9318:	8e 0f       	add	r24, r30
    931a:	9f 1f       	adc	r25, r31
    931c:	08 95       	ret

0000931e <strnlen>:
    931e:	fc 01       	movw	r30, r24
    9320:	61 50       	subi	r22, 0x01	; 1
    9322:	70 40       	sbci	r23, 0x00	; 0
    9324:	01 90       	ld	r0, Z+
    9326:	01 10       	cpse	r0, r1
    9328:	d8 f7       	brcc	.-10     	; 0x9320 <strnlen+0x2>
    932a:	80 95       	com	r24
    932c:	90 95       	com	r25
    932e:	8e 0f       	add	r24, r30
    9330:	9f 1f       	adc	r25, r31
    9332:	08 95       	ret

00009334 <fputc>:
    9334:	0f 93       	push	r16
    9336:	1f 93       	push	r17
    9338:	cf 93       	push	r28
    933a:	df 93       	push	r29
    933c:	8c 01       	movw	r16, r24
    933e:	eb 01       	movw	r28, r22
    9340:	8b 81       	ldd	r24, Y+3	; 0x03
    9342:	81 ff       	sbrs	r24, 1
    9344:	1b c0       	rjmp	.+54     	; 0x937c <fputc+0x48>
    9346:	82 ff       	sbrs	r24, 2
    9348:	0d c0       	rjmp	.+26     	; 0x9364 <fputc+0x30>
    934a:	2e 81       	ldd	r18, Y+6	; 0x06
    934c:	3f 81       	ldd	r19, Y+7	; 0x07
    934e:	8c 81       	ldd	r24, Y+4	; 0x04
    9350:	9d 81       	ldd	r25, Y+5	; 0x05
    9352:	28 17       	cp	r18, r24
    9354:	39 07       	cpc	r19, r25
    9356:	64 f4       	brge	.+24     	; 0x9370 <fputc+0x3c>
    9358:	e8 81       	ld	r30, Y
    935a:	f9 81       	ldd	r31, Y+1	; 0x01
    935c:	01 93       	st	Z+, r16
    935e:	f9 83       	std	Y+1, r31	; 0x01
    9360:	e8 83       	st	Y, r30
    9362:	06 c0       	rjmp	.+12     	; 0x9370 <fputc+0x3c>
    9364:	e8 85       	ldd	r30, Y+8	; 0x08
    9366:	f9 85       	ldd	r31, Y+9	; 0x09
    9368:	80 2f       	mov	r24, r16
    936a:	09 95       	icall
    936c:	89 2b       	or	r24, r25
    936e:	31 f4       	brne	.+12     	; 0x937c <fputc+0x48>
    9370:	8e 81       	ldd	r24, Y+6	; 0x06
    9372:	9f 81       	ldd	r25, Y+7	; 0x07
    9374:	01 96       	adiw	r24, 0x01	; 1
    9376:	9f 83       	std	Y+7, r25	; 0x07
    9378:	8e 83       	std	Y+6, r24	; 0x06
    937a:	02 c0       	rjmp	.+4      	; 0x9380 <fputc+0x4c>
    937c:	0f ef       	ldi	r16, 0xFF	; 255
    937e:	1f ef       	ldi	r17, 0xFF	; 255
    9380:	c8 01       	movw	r24, r16
    9382:	df 91       	pop	r29
    9384:	cf 91       	pop	r28
    9386:	1f 91       	pop	r17
    9388:	0f 91       	pop	r16
    938a:	08 95       	ret

0000938c <__ultoa_invert>:
    938c:	fa 01       	movw	r30, r20
    938e:	aa 27       	eor	r26, r26
    9390:	28 30       	cpi	r18, 0x08	; 8
    9392:	51 f1       	breq	.+84     	; 0x93e8 <__ultoa_invert+0x5c>
    9394:	20 31       	cpi	r18, 0x10	; 16
    9396:	81 f1       	breq	.+96     	; 0x93f8 <__ultoa_invert+0x6c>
    9398:	e8 94       	clt
    939a:	6f 93       	push	r22
    939c:	6e 7f       	andi	r22, 0xFE	; 254
    939e:	6e 5f       	subi	r22, 0xFE	; 254
    93a0:	7f 4f       	sbci	r23, 0xFF	; 255
    93a2:	8f 4f       	sbci	r24, 0xFF	; 255
    93a4:	9f 4f       	sbci	r25, 0xFF	; 255
    93a6:	af 4f       	sbci	r26, 0xFF	; 255
    93a8:	b1 e0       	ldi	r27, 0x01	; 1
    93aa:	3e d0       	rcall	.+124    	; 0x9428 <__ultoa_invert+0x9c>
    93ac:	b4 e0       	ldi	r27, 0x04	; 4
    93ae:	3c d0       	rcall	.+120    	; 0x9428 <__ultoa_invert+0x9c>
    93b0:	67 0f       	add	r22, r23
    93b2:	78 1f       	adc	r23, r24
    93b4:	89 1f       	adc	r24, r25
    93b6:	9a 1f       	adc	r25, r26
    93b8:	a1 1d       	adc	r26, r1
    93ba:	68 0f       	add	r22, r24
    93bc:	79 1f       	adc	r23, r25
    93be:	8a 1f       	adc	r24, r26
    93c0:	91 1d       	adc	r25, r1
    93c2:	a1 1d       	adc	r26, r1
    93c4:	6a 0f       	add	r22, r26
    93c6:	71 1d       	adc	r23, r1
    93c8:	81 1d       	adc	r24, r1
    93ca:	91 1d       	adc	r25, r1
    93cc:	a1 1d       	adc	r26, r1
    93ce:	20 d0       	rcall	.+64     	; 0x9410 <__ultoa_invert+0x84>
    93d0:	09 f4       	brne	.+2      	; 0x93d4 <__ultoa_invert+0x48>
    93d2:	68 94       	set
    93d4:	3f 91       	pop	r19
    93d6:	2a e0       	ldi	r18, 0x0A	; 10
    93d8:	26 9f       	mul	r18, r22
    93da:	11 24       	eor	r1, r1
    93dc:	30 19       	sub	r19, r0
    93de:	30 5d       	subi	r19, 0xD0	; 208
    93e0:	31 93       	st	Z+, r19
    93e2:	de f6       	brtc	.-74     	; 0x939a <__ultoa_invert+0xe>
    93e4:	cf 01       	movw	r24, r30
    93e6:	08 95       	ret
    93e8:	46 2f       	mov	r20, r22
    93ea:	47 70       	andi	r20, 0x07	; 7
    93ec:	40 5d       	subi	r20, 0xD0	; 208
    93ee:	41 93       	st	Z+, r20
    93f0:	b3 e0       	ldi	r27, 0x03	; 3
    93f2:	0f d0       	rcall	.+30     	; 0x9412 <__ultoa_invert+0x86>
    93f4:	c9 f7       	brne	.-14     	; 0x93e8 <__ultoa_invert+0x5c>
    93f6:	f6 cf       	rjmp	.-20     	; 0x93e4 <__ultoa_invert+0x58>
    93f8:	46 2f       	mov	r20, r22
    93fa:	4f 70       	andi	r20, 0x0F	; 15
    93fc:	40 5d       	subi	r20, 0xD0	; 208
    93fe:	4a 33       	cpi	r20, 0x3A	; 58
    9400:	18 f0       	brcs	.+6      	; 0x9408 <__ultoa_invert+0x7c>
    9402:	49 5d       	subi	r20, 0xD9	; 217
    9404:	31 fd       	sbrc	r19, 1
    9406:	40 52       	subi	r20, 0x20	; 32
    9408:	41 93       	st	Z+, r20
    940a:	02 d0       	rcall	.+4      	; 0x9410 <__ultoa_invert+0x84>
    940c:	a9 f7       	brne	.-22     	; 0x93f8 <__ultoa_invert+0x6c>
    940e:	ea cf       	rjmp	.-44     	; 0x93e4 <__ultoa_invert+0x58>
    9410:	b4 e0       	ldi	r27, 0x04	; 4
    9412:	a6 95       	lsr	r26
    9414:	97 95       	ror	r25
    9416:	87 95       	ror	r24
    9418:	77 95       	ror	r23
    941a:	67 95       	ror	r22
    941c:	ba 95       	dec	r27
    941e:	c9 f7       	brne	.-14     	; 0x9412 <__ultoa_invert+0x86>
    9420:	00 97       	sbiw	r24, 0x00	; 0
    9422:	61 05       	cpc	r22, r1
    9424:	71 05       	cpc	r23, r1
    9426:	08 95       	ret
    9428:	9b 01       	movw	r18, r22
    942a:	ac 01       	movw	r20, r24
    942c:	0a 2e       	mov	r0, r26
    942e:	06 94       	lsr	r0
    9430:	57 95       	ror	r21
    9432:	47 95       	ror	r20
    9434:	37 95       	ror	r19
    9436:	27 95       	ror	r18
    9438:	ba 95       	dec	r27
    943a:	c9 f7       	brne	.-14     	; 0x942e <__ultoa_invert+0xa2>
    943c:	62 0f       	add	r22, r18
    943e:	73 1f       	adc	r23, r19
    9440:	84 1f       	adc	r24, r20
    9442:	95 1f       	adc	r25, r21
    9444:	a0 1d       	adc	r26, r0
    9446:	08 95       	ret

00009448 <_exit>:
    9448:	f8 94       	cli

0000944a <__stop_program>:
    944a:	ff cf       	rjmp	.-2      	; 0x944a <__stop_program>
